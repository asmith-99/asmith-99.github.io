import{w as Bi}from"./with-props--4V-IpvB.js";import{a as p8,o as A1,O as zi}from"./chunk-K6CSEXPM-CHi24jHv.js";/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Fn="174",Qe={ROTATE:0,DOLLY:1,PAN:2},$e={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},Hi=0,e7=1,Vi=2,ti=1,Gi=2,$t=3,ge=0,Et=1,Jt=2,me=0,t1=1,Y8=2,n7=3,i7=4,ki=5,we=100,Wi=101,Xi=102,Yi=103,qi=104,Zi=200,Ki=201,ji=202,$i=203,q8=204,Z8=205,Ji=206,Qi=207,t9=208,e9=209,n9=210,i9=211,r9=212,s9=213,a9=214,K8=0,j8=1,$8=2,i1=3,J8=4,Q8=5,tn=6,en=7,ei=0,o9=1,l9=2,_e=0,c9=1,h9=2,u9=3,d9=4,f9=5,p9=6,m9=7,ni=300,r1=301,s1=302,nn=303,rn=304,l8=306,sn=1e3,Pe=1001,an=1002,Ht=1003,_9=1004,R1=1005,Gt=1006,m8=1007,De=1008,ie=1009,ii=1010,ri=1011,v1=1012,On=1013,Le=1014,Qt=1015,x1=1016,Bn=1017,zn=1018,a1=1020,si=35902,ai=1021,oi=1022,zt=1023,li=1024,ci=1025,e1=1026,o1=1027,hi=1028,Hn=1029,ui=1030,Vn=1031,Gn=1033,J1=33776,Q1=33777,t8=33778,e8=33779,on=35840,ln=35841,cn=35842,hn=35843,un=36196,dn=37492,fn=37496,pn=37808,mn=37809,_n=37810,gn=37811,vn=37812,xn=37813,Mn=37814,Sn=37815,En=37816,yn=37817,Tn=37818,bn=37819,An=37820,Rn=37821,n8=36492,wn=36494,Cn=36495,di=36283,Pn=36284,Dn=36285,Ln=36286,g9=3200,v9=3201,x9=0,M9=1,pe="",Dt="srgb",l1="srgb-linear",s8="linear",Z0="srgb",Oe=7680,r7=519,S9=512,E9=513,y9=514,fi=515,T9=516,b9=517,A9=518,R9=519,s7=35044,a7="300 es",te=2e3,a8=2001;class Ne{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){const n=this._listeners;return n===void 0?!1:n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){const n=this._listeners;if(n===void 0)return;const r=n[t];if(r!==void 0){const s=r.indexOf(e);s!==-1&&r.splice(s,1)}}dispatchEvent(t){const e=this._listeners;if(e===void 0)return;const n=e[t.type];if(n!==void 0){t.target=this;const r=n.slice(0);for(let s=0,a=r.length;s<a;s++)r[s].call(this,t);t.target=null}}}const pt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],i8=Math.PI/180,Un=180/Math.PI;function M1(){const i=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(pt[i&255]+pt[i>>8&255]+pt[i>>16&255]+pt[i>>24&255]+"-"+pt[t&255]+pt[t>>8&255]+"-"+pt[t>>16&15|64]+pt[t>>24&255]+"-"+pt[e&63|128]+pt[e>>8&255]+"-"+pt[e>>16&255]+pt[e>>24&255]+pt[n&255]+pt[n>>8&255]+pt[n>>16&255]+pt[n>>24&255]).toLowerCase()}function I0(i,t,e){return Math.max(t,Math.min(e,i))}function w9(i,t){return(i%t+t)%t}function _8(i,t,e){return(1-e)*i+e*t}function d1(i,t){switch(t.constructor){case Float32Array:return i;case Uint32Array:return i/4294967295;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int32Array:return Math.max(i/2147483647,-1);case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function Mt(i,t){switch(t.constructor){case Float32Array:return i;case Uint32Array:return Math.round(i*4294967295);case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int32Array:return Math.round(i*2147483647);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}const C9={DEG2RAD:i8};class L0{constructor(t=0,e=0){L0.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6],this.y=r[1]*e+r[4]*n+r[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=I0(this.x,t.x,e.x),this.y=I0(this.y,t.y,e.y),this}clampScalar(t,e){return this.x=I0(this.x,t,e),this.y=I0(this.y,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(I0(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(I0(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),r=Math.sin(e),s=this.x-t.x,a=this.y-t.y;return this.x=s*n-a*r+t.x,this.y=s*r+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class C0{constructor(t,e,n,r,s,a,o,l,c){C0.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,r,s,a,o,l,c)}set(t,e,n,r,s,a,o,l,c){const u=this.elements;return u[0]=t,u[1]=r,u[2]=o,u[3]=e,u[4]=s,u[5]=l,u[6]=n,u[7]=a,u[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,r=e.elements,s=this.elements,a=n[0],o=n[3],l=n[6],c=n[1],u=n[4],d=n[7],f=n[2],m=n[5],v=n[8],M=r[0],p=r[3],h=r[6],A=r[1],T=r[4],y=r[7],U=r[2],R=r[5],P=r[8];return s[0]=a*M+o*A+l*U,s[3]=a*p+o*T+l*R,s[6]=a*h+o*y+l*P,s[1]=c*M+u*A+d*U,s[4]=c*p+u*T+d*R,s[7]=c*h+u*y+d*P,s[2]=f*M+m*A+v*U,s[5]=f*p+m*T+v*R,s[8]=f*h+m*y+v*P,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],r=t[2],s=t[3],a=t[4],o=t[5],l=t[6],c=t[7],u=t[8];return e*a*u-e*o*c-n*s*u+n*o*l+r*s*c-r*a*l}invert(){const t=this.elements,e=t[0],n=t[1],r=t[2],s=t[3],a=t[4],o=t[5],l=t[6],c=t[7],u=t[8],d=u*a-o*c,f=o*l-u*s,m=c*s-a*l,v=e*d+n*f+r*m;if(v===0)return this.set(0,0,0,0,0,0,0,0,0);const M=1/v;return t[0]=d*M,t[1]=(r*c-u*n)*M,t[2]=(o*n-r*a)*M,t[3]=f*M,t[4]=(u*e-r*l)*M,t[5]=(r*s-o*e)*M,t[6]=m*M,t[7]=(n*l-c*e)*M,t[8]=(a*e-n*s)*M,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,r,s,a,o){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*a+c*o)+a+t,-r*c,r*l,-r*(-c*a+l*o)+o+e,0,0,1),this}scale(t,e){return this.premultiply(g8.makeScale(t,e)),this}rotate(t){return this.premultiply(g8.makeRotation(-t)),this}translate(t,e){return this.premultiply(g8.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let r=0;r<9;r++)if(e[r]!==n[r])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const g8=new C0;function pi(i){for(let t=i.length-1;t>=0;--t)if(i[t]>=65535)return!0;return!1}function o8(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function P9(){const i=o8("canvas");return i.style.display="block",i}const o7={};function Ae(i){i in o7||(o7[i]=!0,console.warn(i))}function D9(i,t,e){return new Promise(function(n,r){function s(){switch(i.clientWaitSync(t,i.SYNC_FLUSH_COMMANDS_BIT,0)){case i.WAIT_FAILED:r();break;case i.TIMEOUT_EXPIRED:setTimeout(s,e);break;default:n()}}setTimeout(s,e)})}function L9(i){const t=i.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function U9(i){const t=i.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const l7=new C0().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),c7=new C0().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function I9(){const i={enabled:!0,workingColorSpace:l1,spaces:{},convert:function(r,s,a){return this.enabled===!1||s===a||!s||!a||(this.spaces[s].transfer===Z0&&(r.r=ne(r.r),r.g=ne(r.g),r.b=ne(r.b)),this.spaces[s].primaries!==this.spaces[a].primaries&&(r.applyMatrix3(this.spaces[s].toXYZ),r.applyMatrix3(this.spaces[a].fromXYZ)),this.spaces[a].transfer===Z0&&(r.r=n1(r.r),r.g=n1(r.g),r.b=n1(r.b))),r},fromWorkingColorSpace:function(r,s){return this.convert(r,this.workingColorSpace,s)},toWorkingColorSpace:function(r,s){return this.convert(r,s,this.workingColorSpace)},getPrimaries:function(r){return this.spaces[r].primaries},getTransfer:function(r){return r===pe?s8:this.spaces[r].transfer},getLuminanceCoefficients:function(r,s=this.workingColorSpace){return r.fromArray(this.spaces[s].luminanceCoefficients)},define:function(r){Object.assign(this.spaces,r)},_getMatrix:function(r,s,a){return r.copy(this.spaces[s].toXYZ).multiply(this.spaces[a].fromXYZ)},_getDrawingBufferColorSpace:function(r){return this.spaces[r].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(r=this.workingColorSpace){return this.spaces[r].workingColorSpaceConfig.unpackColorSpace}},t=[.64,.33,.3,.6,.15,.06],e=[.2126,.7152,.0722],n=[.3127,.329];return i.define({[l1]:{primaries:t,whitePoint:n,transfer:s8,toXYZ:l7,fromXYZ:c7,luminanceCoefficients:e,workingColorSpaceConfig:{unpackColorSpace:Dt},outputColorSpaceConfig:{drawingBufferColorSpace:Dt}},[Dt]:{primaries:t,whitePoint:n,transfer:Z0,toXYZ:l7,fromXYZ:c7,luminanceCoefficients:e,outputColorSpaceConfig:{drawingBufferColorSpace:Dt}}}),i}const G0=I9();function ne(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function n1(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}let Be;class N9{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{Be===void 0&&(Be=o8("canvas")),Be.width=t.width,Be.height=t.height;const n=Be.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Be}return e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=o8("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const r=n.getImageData(0,0,t.width,t.height),s=r.data;for(let a=0;a<s.length;a++)s[a]=ne(s[a]/255)*255;return n.putImageData(r,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(ne(e[n]/255)*255):e[n]=ne(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let F9=0;class kn{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:F9++}),this.uuid=M1(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},r=this.data;if(r!==null){let s;if(Array.isArray(r)){s=[];for(let a=0,o=r.length;a<o;a++)r[a].isDataTexture?s.push(v8(r[a].image)):s.push(v8(r[a]))}else s=v8(r);n.url=s}return e||(t.images[this.uuid]=n),n}}function v8(i){return typeof HTMLImageElement<"u"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&i instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&i instanceof ImageBitmap?N9.getDataURL(i):i.data?{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let O9=0;class yt extends Ne{constructor(t=yt.DEFAULT_IMAGE,e=yt.DEFAULT_MAPPING,n=Pe,r=Pe,s=Gt,a=De,o=zt,l=ie,c=yt.DEFAULT_ANISOTROPY,u=pe){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:O9++}),this.uuid=M1(),this.name="",this.source=new kn(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=r,this.magFilter=s,this.minFilter=a,this.anisotropy=c,this.format=o,this.internalFormat=null,this.type=l,this.offset=new L0(0,0),this.repeat=new L0(1,1),this.center=new L0(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new C0,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=u,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==ni)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case sn:t.x=t.x-Math.floor(t.x);break;case Pe:t.x=t.x<0?0:1;break;case an:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case sn:t.y=t.y-Math.floor(t.y);break;case Pe:t.y=t.y<0?0:1;break;case an:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}yt.DEFAULT_IMAGE=null;yt.DEFAULT_MAPPING=ni;yt.DEFAULT_ANISOTROPY=1;class rt{constructor(t=0,e=0,n=0,r=1){rt.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=r}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,r){return this.x=t,this.y=e,this.z=n,this.w=r,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,r=this.z,s=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*r+a[12]*s,this.y=a[1]*e+a[5]*n+a[9]*r+a[13]*s,this.z=a[2]*e+a[6]*n+a[10]*r+a[14]*s,this.w=a[3]*e+a[7]*n+a[11]*r+a[15]*s,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,r,s;const l=t.elements,c=l[0],u=l[4],d=l[8],f=l[1],m=l[5],v=l[9],M=l[2],p=l[6],h=l[10];if(Math.abs(u-f)<.01&&Math.abs(d-M)<.01&&Math.abs(v-p)<.01){if(Math.abs(u+f)<.1&&Math.abs(d+M)<.1&&Math.abs(v+p)<.1&&Math.abs(c+m+h-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const T=(c+1)/2,y=(m+1)/2,U=(h+1)/2,R=(u+f)/4,P=(d+M)/4,I=(v+p)/4;return T>y&&T>U?T<.01?(n=0,r=.707106781,s=.707106781):(n=Math.sqrt(T),r=R/n,s=P/n):y>U?y<.01?(n=.707106781,r=0,s=.707106781):(r=Math.sqrt(y),n=R/r,s=I/r):U<.01?(n=.707106781,r=.707106781,s=0):(s=Math.sqrt(U),n=P/s,r=I/s),this.set(n,r,s,e),this}let A=Math.sqrt((p-v)*(p-v)+(d-M)*(d-M)+(f-u)*(f-u));return Math.abs(A)<.001&&(A=1),this.x=(p-v)/A,this.y=(d-M)/A,this.z=(f-u)/A,this.w=Math.acos((c+m+h-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=I0(this.x,t.x,e.x),this.y=I0(this.y,t.y,e.y),this.z=I0(this.z,t.z,e.z),this.w=I0(this.w,t.w,e.w),this}clampScalar(t,e){return this.x=I0(this.x,t,e),this.y=I0(this.y,t,e),this.z=I0(this.z,t,e),this.w=I0(this.w,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(I0(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class B9 extends Ne{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new rt(0,0,t,e),this.scissorTest=!1,this.viewport=new rt(0,0,t,e);const r={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Gt,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new yt(r,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const a=n.count;for(let o=0;o<a;o++)this.textures[o]=s.clone(),this.textures[o].isRenderTargetTexture=!0,this.textures[o].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),t!==null&&(t.renderTarget=this),this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let r=0,s=this.textures.length;r<s;r++)this.textures[r].image.width=t,this.textures[r].image.height=e,this.textures[r].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let e=0,n=t.textures.length;e<n;e++){this.textures[e]=t.textures[e].clone(),this.textures[e].isRenderTargetTexture=!0,this.textures[e].renderTarget=this;const r=Object.assign({},t.textures[e].image);this.textures[e].source=new kn(r)}return this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Ue extends B9{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class mi extends yt{constructor(t=null,e=1,n=1,r=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:r},this.magFilter=Ht,this.minFilter=Ht,this.wrapR=Pe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class z9 extends yt{constructor(t=null,e=1,n=1,r=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:r},this.magFilter=Ht,this.minFilter=Ht,this.wrapR=Pe,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Ie{constructor(t=0,e=0,n=0,r=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=r}static slerpFlat(t,e,n,r,s,a,o){let l=n[r+0],c=n[r+1],u=n[r+2],d=n[r+3];const f=s[a+0],m=s[a+1],v=s[a+2],M=s[a+3];if(o===0){t[e+0]=l,t[e+1]=c,t[e+2]=u,t[e+3]=d;return}if(o===1){t[e+0]=f,t[e+1]=m,t[e+2]=v,t[e+3]=M;return}if(d!==M||l!==f||c!==m||u!==v){let p=1-o;const h=l*f+c*m+u*v+d*M,A=h>=0?1:-1,T=1-h*h;if(T>Number.EPSILON){const U=Math.sqrt(T),R=Math.atan2(U,h*A);p=Math.sin(p*R)/U,o=Math.sin(o*R)/U}const y=o*A;if(l=l*p+f*y,c=c*p+m*y,u=u*p+v*y,d=d*p+M*y,p===1-o){const U=1/Math.sqrt(l*l+c*c+u*u+d*d);l*=U,c*=U,u*=U,d*=U}}t[e]=l,t[e+1]=c,t[e+2]=u,t[e+3]=d}static multiplyQuaternionsFlat(t,e,n,r,s,a){const o=n[r],l=n[r+1],c=n[r+2],u=n[r+3],d=s[a],f=s[a+1],m=s[a+2],v=s[a+3];return t[e]=o*v+u*d+l*m-c*f,t[e+1]=l*v+u*f+c*d-o*m,t[e+2]=c*v+u*m+o*f-l*d,t[e+3]=u*v-o*d-l*f-c*m,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,r=t._y,s=t._z,a=t._order,o=Math.cos,l=Math.sin,c=o(n/2),u=o(r/2),d=o(s/2),f=l(n/2),m=l(r/2),v=l(s/2);switch(a){case"XYZ":this._x=f*u*d+c*m*v,this._y=c*m*d-f*u*v,this._z=c*u*v+f*m*d,this._w=c*u*d-f*m*v;break;case"YXZ":this._x=f*u*d+c*m*v,this._y=c*m*d-f*u*v,this._z=c*u*v-f*m*d,this._w=c*u*d+f*m*v;break;case"ZXY":this._x=f*u*d-c*m*v,this._y=c*m*d+f*u*v,this._z=c*u*v+f*m*d,this._w=c*u*d-f*m*v;break;case"ZYX":this._x=f*u*d-c*m*v,this._y=c*m*d+f*u*v,this._z=c*u*v-f*m*d,this._w=c*u*d+f*m*v;break;case"YZX":this._x=f*u*d+c*m*v,this._y=c*m*d+f*u*v,this._z=c*u*v-f*m*d,this._w=c*u*d-f*m*v;break;case"XZY":this._x=f*u*d-c*m*v,this._y=c*m*d-f*u*v,this._z=c*u*v+f*m*d,this._w=c*u*d+f*m*v;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,r=Math.sin(n);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],r=e[4],s=e[8],a=e[1],o=e[5],l=e[9],c=e[2],u=e[6],d=e[10],f=n+o+d;if(f>0){const m=.5/Math.sqrt(f+1);this._w=.25/m,this._x=(u-l)*m,this._y=(s-c)*m,this._z=(a-r)*m}else if(n>o&&n>d){const m=2*Math.sqrt(1+n-o-d);this._w=(u-l)/m,this._x=.25*m,this._y=(r+a)/m,this._z=(s+c)/m}else if(o>d){const m=2*Math.sqrt(1+o-n-d);this._w=(s-c)/m,this._x=(r+a)/m,this._y=.25*m,this._z=(l+u)/m}else{const m=2*Math.sqrt(1+d-n-o);this._w=(a-r)/m,this._x=(s+c)/m,this._y=(l+u)/m,this._z=.25*m}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(I0(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const r=Math.min(1,e/n);return this.slerp(t,r),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,r=t._y,s=t._z,a=t._w,o=e._x,l=e._y,c=e._z,u=e._w;return this._x=n*u+a*o+r*c-s*l,this._y=r*u+a*l+s*o-n*c,this._z=s*u+a*c+n*l-r*o,this._w=a*u-n*o-r*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,r=this._y,s=this._z,a=this._w;let o=a*t._w+n*t._x+r*t._y+s*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=n,this._y=r,this._z=s,this;const l=1-o*o;if(l<=Number.EPSILON){const m=1-e;return this._w=m*a+e*this._w,this._x=m*n+e*this._x,this._y=m*r+e*this._y,this._z=m*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),u=Math.atan2(c,o),d=Math.sin((1-e)*u)/c,f=Math.sin(e*u)/c;return this._w=a*d+this._w*f,this._x=n*d+this._x*f,this._y=r*d+this._y*f,this._z=s*d+this._z*f,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),r=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(r*Math.sin(t),r*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class N{constructor(t=0,e=0,n=0){N.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(h7.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(h7.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*r,this.y=s[1]*e+s[4]*n+s[7]*r,this.z=s[2]*e+s[5]*n+s[8]*r,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,r=this.z,s=t.elements,a=1/(s[3]*e+s[7]*n+s[11]*r+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*r+s[12])*a,this.y=(s[1]*e+s[5]*n+s[9]*r+s[13])*a,this.z=(s[2]*e+s[6]*n+s[10]*r+s[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,r=this.z,s=t.x,a=t.y,o=t.z,l=t.w,c=2*(a*r-o*n),u=2*(o*e-s*r),d=2*(s*n-a*e);return this.x=e+l*c+a*d-o*u,this.y=n+l*u+o*c-s*d,this.z=r+l*d+s*u-a*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*r,this.y=s[1]*e+s[5]*n+s[9]*r,this.z=s[2]*e+s[6]*n+s[10]*r,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=I0(this.x,t.x,e.x),this.y=I0(this.y,t.y,e.y),this.z=I0(this.z,t.z,e.z),this}clampScalar(t,e){return this.x=I0(this.x,t,e),this.y=I0(this.y,t,e),this.z=I0(this.z,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(I0(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,r=t.y,s=t.z,a=e.x,o=e.y,l=e.z;return this.x=r*l-s*o,this.y=s*a-n*l,this.z=n*o-r*a,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return x8.copy(this).projectOnVector(t),this.sub(x8)}reflect(t){return this.sub(x8.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(I0(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return e*e+n*n+r*r}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const r=Math.sin(e)*t;return this.x=r*Math.sin(n),this.y=Math.cos(e)*t,this.z=r*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=r,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const x8=new N,h7=new Ie;class S1{constructor(t=new N(1/0,1/0,1/0),e=new N(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(Nt.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(Nt.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Nt.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const s=n.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let a=0,o=s.count;a<o;a++)t.isMesh===!0?t.getVertexPosition(a,Nt):Nt.fromBufferAttribute(s,a),Nt.applyMatrix4(t.matrixWorld),this.expandByPoint(Nt);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),w1.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),w1.copy(n.boundingBox)),w1.applyMatrix4(t.matrixWorld),this.union(w1)}const r=t.children;for(let s=0,a=r.length;s<a;s++)this.expandByObject(r[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Nt),Nt.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(f1),C1.subVectors(this.max,f1),ze.subVectors(t.a,f1),He.subVectors(t.b,f1),Ve.subVectors(t.c,f1),oe.subVectors(He,ze),le.subVectors(Ve,He),Me.subVectors(ze,Ve);let e=[0,-oe.z,oe.y,0,-le.z,le.y,0,-Me.z,Me.y,oe.z,0,-oe.x,le.z,0,-le.x,Me.z,0,-Me.x,-oe.y,oe.x,0,-le.y,le.x,0,-Me.y,Me.x,0];return!M8(e,ze,He,Ve,C1)||(e=[1,0,0,0,1,0,0,0,1],!M8(e,ze,He,Ve,C1))?!1:(P1.crossVectors(oe,le),e=[P1.x,P1.y,P1.z],M8(e,ze,He,Ve,C1))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Nt).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Nt).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Yt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Yt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Yt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Yt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Yt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Yt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Yt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Yt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Yt),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Yt=[new N,new N,new N,new N,new N,new N,new N,new N],Nt=new N,w1=new S1,ze=new N,He=new N,Ve=new N,oe=new N,le=new N,Me=new N,f1=new N,C1=new N,P1=new N,Se=new N;function M8(i,t,e,n,r){for(let s=0,a=i.length-3;s<=a;s+=3){Se.fromArray(i,s);const o=r.x*Math.abs(Se.x)+r.y*Math.abs(Se.y)+r.z*Math.abs(Se.z),l=t.dot(Se),c=e.dot(Se),u=n.dot(Se);if(Math.max(-Math.max(l,c,u),Math.min(l,c,u))>o)return!1}return!0}const H9=new S1,p1=new N,S8=new N;class c8{constructor(t=new N,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):H9.setFromPoints(t).getCenter(n);let r=0;for(let s=0,a=t.length;s<a;s++)r=Math.max(r,n.distanceToSquared(t[s]));return this.radius=Math.sqrt(r),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;p1.subVectors(t,this.center);const e=p1.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),r=(n-this.radius)*.5;this.center.addScaledVector(p1,r/n),this.radius+=r}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(S8.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(p1.copy(t.center).add(S8)),this.expandByPoint(p1.copy(t.center).sub(S8))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const qt=new N,E8=new N,D1=new N,ce=new N,y8=new N,L1=new N,T8=new N;class Wn{constructor(t=new N,e=new N(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,qt)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=qt.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(qt.copy(this.origin).addScaledVector(this.direction,e),qt.distanceToSquared(t))}distanceSqToSegment(t,e,n,r){E8.copy(t).add(e).multiplyScalar(.5),D1.copy(e).sub(t).normalize(),ce.copy(this.origin).sub(E8);const s=t.distanceTo(e)*.5,a=-this.direction.dot(D1),o=ce.dot(this.direction),l=-ce.dot(D1),c=ce.lengthSq(),u=Math.abs(1-a*a);let d,f,m,v;if(u>0)if(d=a*l-o,f=a*o-l,v=s*u,d>=0)if(f>=-v)if(f<=v){const M=1/u;d*=M,f*=M,m=d*(d+a*f+2*o)+f*(a*d+f+2*l)+c}else f=s,d=Math.max(0,-(a*f+o)),m=-d*d+f*(f+2*l)+c;else f=-s,d=Math.max(0,-(a*f+o)),m=-d*d+f*(f+2*l)+c;else f<=-v?(d=Math.max(0,-(-a*s+o)),f=d>0?-s:Math.min(Math.max(-s,-l),s),m=-d*d+f*(f+2*l)+c):f<=v?(d=0,f=Math.min(Math.max(-s,-l),s),m=f*(f+2*l)+c):(d=Math.max(0,-(a*s+o)),f=d>0?s:Math.min(Math.max(-s,-l),s),m=-d*d+f*(f+2*l)+c);else f=a>0?-s:s,d=Math.max(0,-(a*f+o)),m=-d*d+f*(f+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,d),r&&r.copy(E8).addScaledVector(D1,f),m}intersectSphere(t,e){qt.subVectors(t.center,this.origin);const n=qt.dot(this.direction),r=qt.dot(qt)-n*n,s=t.radius*t.radius;if(r>s)return null;const a=Math.sqrt(s-r),o=n-a,l=n+a;return l<0?null:o<0?this.at(l,e):this.at(o,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,r,s,a,o,l;const c=1/this.direction.x,u=1/this.direction.y,d=1/this.direction.z,f=this.origin;return c>=0?(n=(t.min.x-f.x)*c,r=(t.max.x-f.x)*c):(n=(t.max.x-f.x)*c,r=(t.min.x-f.x)*c),u>=0?(s=(t.min.y-f.y)*u,a=(t.max.y-f.y)*u):(s=(t.max.y-f.y)*u,a=(t.min.y-f.y)*u),n>a||s>r||((s>n||isNaN(n))&&(n=s),(a<r||isNaN(r))&&(r=a),d>=0?(o=(t.min.z-f.z)*d,l=(t.max.z-f.z)*d):(o=(t.max.z-f.z)*d,l=(t.min.z-f.z)*d),n>l||o>r)||((o>n||n!==n)&&(n=o),(l<r||r!==r)&&(r=l),r<0)?null:this.at(n>=0?n:r,e)}intersectsBox(t){return this.intersectBox(t,qt)!==null}intersectTriangle(t,e,n,r,s){y8.subVectors(e,t),L1.subVectors(n,t),T8.crossVectors(y8,L1);let a=this.direction.dot(T8),o;if(a>0){if(r)return null;o=1}else if(a<0)o=-1,a=-a;else return null;ce.subVectors(this.origin,t);const l=o*this.direction.dot(L1.crossVectors(ce,L1));if(l<0)return null;const c=o*this.direction.dot(y8.cross(ce));if(c<0||l+c>a)return null;const u=-o*ce.dot(T8);return u<0?null:this.at(u/a,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class st{constructor(t,e,n,r,s,a,o,l,c,u,d,f,m,v,M,p){st.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,r,s,a,o,l,c,u,d,f,m,v,M,p)}set(t,e,n,r,s,a,o,l,c,u,d,f,m,v,M,p){const h=this.elements;return h[0]=t,h[4]=e,h[8]=n,h[12]=r,h[1]=s,h[5]=a,h[9]=o,h[13]=l,h[2]=c,h[6]=u,h[10]=d,h[14]=f,h[3]=m,h[7]=v,h[11]=M,h[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new st().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,r=1/Ge.setFromMatrixColumn(t,0).length(),s=1/Ge.setFromMatrixColumn(t,1).length(),a=1/Ge.setFromMatrixColumn(t,2).length();return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,r=t.y,s=t.z,a=Math.cos(n),o=Math.sin(n),l=Math.cos(r),c=Math.sin(r),u=Math.cos(s),d=Math.sin(s);if(t.order==="XYZ"){const f=a*u,m=a*d,v=o*u,M=o*d;e[0]=l*u,e[4]=-l*d,e[8]=c,e[1]=m+v*c,e[5]=f-M*c,e[9]=-o*l,e[2]=M-f*c,e[6]=v+m*c,e[10]=a*l}else if(t.order==="YXZ"){const f=l*u,m=l*d,v=c*u,M=c*d;e[0]=f+M*o,e[4]=v*o-m,e[8]=a*c,e[1]=a*d,e[5]=a*u,e[9]=-o,e[2]=m*o-v,e[6]=M+f*o,e[10]=a*l}else if(t.order==="ZXY"){const f=l*u,m=l*d,v=c*u,M=c*d;e[0]=f-M*o,e[4]=-a*d,e[8]=v+m*o,e[1]=m+v*o,e[5]=a*u,e[9]=M-f*o,e[2]=-a*c,e[6]=o,e[10]=a*l}else if(t.order==="ZYX"){const f=a*u,m=a*d,v=o*u,M=o*d;e[0]=l*u,e[4]=v*c-m,e[8]=f*c+M,e[1]=l*d,e[5]=M*c+f,e[9]=m*c-v,e[2]=-c,e[6]=o*l,e[10]=a*l}else if(t.order==="YZX"){const f=a*l,m=a*c,v=o*l,M=o*c;e[0]=l*u,e[4]=M-f*d,e[8]=v*d+m,e[1]=d,e[5]=a*u,e[9]=-o*u,e[2]=-c*u,e[6]=m*d+v,e[10]=f-M*d}else if(t.order==="XZY"){const f=a*l,m=a*c,v=o*l,M=o*c;e[0]=l*u,e[4]=-d,e[8]=c*u,e[1]=f*d+M,e[5]=a*u,e[9]=m*d-v,e[2]=v*d-m,e[6]=o*u,e[10]=M*d+f}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(V9,t,G9)}lookAt(t,e,n){const r=this.elements;return bt.subVectors(t,e),bt.lengthSq()===0&&(bt.z=1),bt.normalize(),he.crossVectors(n,bt),he.lengthSq()===0&&(Math.abs(n.z)===1?bt.x+=1e-4:bt.z+=1e-4,bt.normalize(),he.crossVectors(n,bt)),he.normalize(),U1.crossVectors(bt,he),r[0]=he.x,r[4]=U1.x,r[8]=bt.x,r[1]=he.y,r[5]=U1.y,r[9]=bt.y,r[2]=he.z,r[6]=U1.z,r[10]=bt.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,r=e.elements,s=this.elements,a=n[0],o=n[4],l=n[8],c=n[12],u=n[1],d=n[5],f=n[9],m=n[13],v=n[2],M=n[6],p=n[10],h=n[14],A=n[3],T=n[7],y=n[11],U=n[15],R=r[0],P=r[4],I=r[8],S=r[12],x=r[1],w=r[5],Y=r[9],z=r[13],W=r[2],j=r[6],G=r[10],Q=r[14],V=r[3],r0=r[7],h0=r[11],v0=r[15];return s[0]=a*R+o*x+l*W+c*V,s[4]=a*P+o*w+l*j+c*r0,s[8]=a*I+o*Y+l*G+c*h0,s[12]=a*S+o*z+l*Q+c*v0,s[1]=u*R+d*x+f*W+m*V,s[5]=u*P+d*w+f*j+m*r0,s[9]=u*I+d*Y+f*G+m*h0,s[13]=u*S+d*z+f*Q+m*v0,s[2]=v*R+M*x+p*W+h*V,s[6]=v*P+M*w+p*j+h*r0,s[10]=v*I+M*Y+p*G+h*h0,s[14]=v*S+M*z+p*Q+h*v0,s[3]=A*R+T*x+y*W+U*V,s[7]=A*P+T*w+y*j+U*r0,s[11]=A*I+T*Y+y*G+U*h0,s[15]=A*S+T*z+y*Q+U*v0,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],r=t[8],s=t[12],a=t[1],o=t[5],l=t[9],c=t[13],u=t[2],d=t[6],f=t[10],m=t[14],v=t[3],M=t[7],p=t[11],h=t[15];return v*(+s*l*d-r*c*d-s*o*f+n*c*f+r*o*m-n*l*m)+M*(+e*l*m-e*c*f+s*a*f-r*a*m+r*c*u-s*l*u)+p*(+e*c*d-e*o*m-s*a*d+n*a*m+s*o*u-n*c*u)+h*(-r*o*u-e*l*d+e*o*f+r*a*d-n*a*f+n*l*u)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],r=t[2],s=t[3],a=t[4],o=t[5],l=t[6],c=t[7],u=t[8],d=t[9],f=t[10],m=t[11],v=t[12],M=t[13],p=t[14],h=t[15],A=d*p*c-M*f*c+M*l*m-o*p*m-d*l*h+o*f*h,T=v*f*c-u*p*c-v*l*m+a*p*m+u*l*h-a*f*h,y=u*M*c-v*d*c+v*o*m-a*M*m-u*o*h+a*d*h,U=v*d*l-u*M*l-v*o*f+a*M*f+u*o*p-a*d*p,R=e*A+n*T+r*y+s*U;if(R===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const P=1/R;return t[0]=A*P,t[1]=(M*f*s-d*p*s-M*r*m+n*p*m+d*r*h-n*f*h)*P,t[2]=(o*p*s-M*l*s+M*r*c-n*p*c-o*r*h+n*l*h)*P,t[3]=(d*l*s-o*f*s-d*r*c+n*f*c+o*r*m-n*l*m)*P,t[4]=T*P,t[5]=(u*p*s-v*f*s+v*r*m-e*p*m-u*r*h+e*f*h)*P,t[6]=(v*l*s-a*p*s-v*r*c+e*p*c+a*r*h-e*l*h)*P,t[7]=(a*f*s-u*l*s+u*r*c-e*f*c-a*r*m+e*l*m)*P,t[8]=y*P,t[9]=(v*d*s-u*M*s-v*n*m+e*M*m+u*n*h-e*d*h)*P,t[10]=(a*M*s-v*o*s+v*n*c-e*M*c-a*n*h+e*o*h)*P,t[11]=(u*o*s-a*d*s-u*n*c+e*d*c+a*n*m-e*o*m)*P,t[12]=U*P,t[13]=(u*M*r-v*d*r+v*n*f-e*M*f-u*n*p+e*d*p)*P,t[14]=(v*o*r-a*M*r-v*n*l+e*M*l+a*n*p-e*o*p)*P,t[15]=(a*d*r-u*o*r+u*n*l-e*d*l-a*n*f+e*o*f)*P,this}scale(t){const e=this.elements,n=t.x,r=t.y,s=t.z;return e[0]*=n,e[4]*=r,e[8]*=s,e[1]*=n,e[5]*=r,e[9]*=s,e[2]*=n,e[6]*=r,e[10]*=s,e[3]*=n,e[7]*=r,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,r))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),r=Math.sin(e),s=1-n,a=t.x,o=t.y,l=t.z,c=s*a,u=s*o;return this.set(c*a+n,c*o-r*l,c*l+r*o,0,c*o+r*l,u*o+n,u*l-r*a,0,c*l-r*o,u*l+r*a,s*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,r,s,a){return this.set(1,n,s,0,t,1,a,0,e,r,1,0,0,0,0,1),this}compose(t,e,n){const r=this.elements,s=e._x,a=e._y,o=e._z,l=e._w,c=s+s,u=a+a,d=o+o,f=s*c,m=s*u,v=s*d,M=a*u,p=a*d,h=o*d,A=l*c,T=l*u,y=l*d,U=n.x,R=n.y,P=n.z;return r[0]=(1-(M+h))*U,r[1]=(m+y)*U,r[2]=(v-T)*U,r[3]=0,r[4]=(m-y)*R,r[5]=(1-(f+h))*R,r[6]=(p+A)*R,r[7]=0,r[8]=(v+T)*P,r[9]=(p-A)*P,r[10]=(1-(f+M))*P,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this}decompose(t,e,n){const r=this.elements;let s=Ge.set(r[0],r[1],r[2]).length();const a=Ge.set(r[4],r[5],r[6]).length(),o=Ge.set(r[8],r[9],r[10]).length();this.determinant()<0&&(s=-s),t.x=r[12],t.y=r[13],t.z=r[14],Ft.copy(this);const c=1/s,u=1/a,d=1/o;return Ft.elements[0]*=c,Ft.elements[1]*=c,Ft.elements[2]*=c,Ft.elements[4]*=u,Ft.elements[5]*=u,Ft.elements[6]*=u,Ft.elements[8]*=d,Ft.elements[9]*=d,Ft.elements[10]*=d,e.setFromRotationMatrix(Ft),n.x=s,n.y=a,n.z=o,this}makePerspective(t,e,n,r,s,a,o=te){const l=this.elements,c=2*s/(e-t),u=2*s/(n-r),d=(e+t)/(e-t),f=(n+r)/(n-r);let m,v;if(o===te)m=-(a+s)/(a-s),v=-2*a*s/(a-s);else if(o===a8)m=-a/(a-s),v=-a*s/(a-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+o);return l[0]=c,l[4]=0,l[8]=d,l[12]=0,l[1]=0,l[5]=u,l[9]=f,l[13]=0,l[2]=0,l[6]=0,l[10]=m,l[14]=v,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,r,s,a,o=te){const l=this.elements,c=1/(e-t),u=1/(n-r),d=1/(a-s),f=(e+t)*c,m=(n+r)*u;let v,M;if(o===te)v=(a+s)*d,M=-2*d;else if(o===a8)v=s*d,M=-1*d;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+o);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-f,l[1]=0,l[5]=2*u,l[9]=0,l[13]=-m,l[2]=0,l[6]=0,l[10]=M,l[14]=-v,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let r=0;r<16;r++)if(e[r]!==n[r])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const Ge=new N,Ft=new st,V9=new N(0,0,0),G9=new N(1,1,1),he=new N,U1=new N,bt=new N,u7=new st,d7=new Ie;class re{constructor(t=0,e=0,n=0,r=re.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=r}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,r=this._order){return this._x=t,this._y=e,this._z=n,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const r=t.elements,s=r[0],a=r[4],o=r[8],l=r[1],c=r[5],u=r[9],d=r[2],f=r[6],m=r[10];switch(e){case"XYZ":this._y=Math.asin(I0(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-u,m),this._z=Math.atan2(-a,s)):(this._x=Math.atan2(f,c),this._z=0);break;case"YXZ":this._x=Math.asin(-I0(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(o,m),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-d,s),this._z=0);break;case"ZXY":this._x=Math.asin(I0(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(-d,m),this._z=Math.atan2(-a,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-I0(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(f,m),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-a,c));break;case"YZX":this._z=Math.asin(I0(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-u,c),this._y=Math.atan2(-d,s)):(this._x=0,this._y=Math.atan2(o,m));break;case"XZY":this._z=Math.asin(-I0(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(f,c),this._y=Math.atan2(o,s)):(this._x=Math.atan2(-u,m),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return u7.makeRotationFromQuaternion(t),this.setFromRotationMatrix(u7,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return d7.setFromEuler(this),this.setFromQuaternion(d7,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}re.DEFAULT_ORDER="XYZ";class _i{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let k9=0;const f7=new N,ke=new Ie,Zt=new st,I1=new N,m1=new N,W9=new N,X9=new Ie,p7=new N(1,0,0),m7=new N(0,1,0),_7=new N(0,0,1),g7={type:"added"},Y9={type:"removed"},We={type:"childadded",child:null},b8={type:"childremoved",child:null};class vt extends Ne{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:k9++}),this.uuid=M1(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=vt.DEFAULT_UP.clone();const t=new N,e=new re,n=new Ie,r=new N(1,1,1);function s(){n.setFromEuler(e,!1)}function a(){e.setFromQuaternion(n,void 0,!1)}e._onChange(s),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new st},normalMatrix:{value:new C0}}),this.matrix=new st,this.matrixWorld=new st,this.matrixAutoUpdate=vt.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=vt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new _i,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return ke.setFromAxisAngle(t,e),this.quaternion.multiply(ke),this}rotateOnWorldAxis(t,e){return ke.setFromAxisAngle(t,e),this.quaternion.premultiply(ke),this}rotateX(t){return this.rotateOnAxis(p7,t)}rotateY(t){return this.rotateOnAxis(m7,t)}rotateZ(t){return this.rotateOnAxis(_7,t)}translateOnAxis(t,e){return f7.copy(t).applyQuaternion(this.quaternion),this.position.add(f7.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(p7,t)}translateY(t){return this.translateOnAxis(m7,t)}translateZ(t){return this.translateOnAxis(_7,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Zt.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?I1.copy(t):I1.set(t,e,n);const r=this.parent;this.updateWorldMatrix(!0,!1),m1.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Zt.lookAt(m1,I1,this.up):Zt.lookAt(I1,m1,this.up),this.quaternion.setFromRotationMatrix(Zt),r&&(Zt.extractRotation(r.matrixWorld),ke.setFromRotationMatrix(Zt),this.quaternion.premultiply(ke.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(g7),We.child=t,this.dispatchEvent(We),We.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Y9),b8.child=t,this.dispatchEvent(b8),b8.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Zt.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Zt.multiply(t.parent.matrixWorld)),t.applyMatrix4(Zt),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(g7),We.child=t,this.dispatchEvent(We),We.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,r=this.children.length;n<r;n++){const a=this.children[n].getObjectByProperty(t,e);if(a!==void 0)return a}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const r=this.children;for(let s=0,a=r.length;s<a;s++)r[s].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(m1,t,W9),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(m1,X9,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,r=e.length;n<r;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,r=e.length;n<r;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,r=e.length;n<r;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const r=this.children;for(let s=0,a=r.length;s<a;s++)r[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const r={};r.uuid=this.uuid,r.type=this.type,this.name!==""&&(r.name=this.name),this.castShadow===!0&&(r.castShadow=!0),this.receiveShadow===!0&&(r.receiveShadow=!0),this.visible===!1&&(r.visible=!1),this.frustumCulled===!1&&(r.frustumCulled=!1),this.renderOrder!==0&&(r.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),r.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(r.matrixAutoUpdate=!1),this.isInstancedMesh&&(r.type="InstancedMesh",r.count=this.count,r.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(r.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(r.type="BatchedMesh",r.perObjectFrustumCulled=this.perObjectFrustumCulled,r.sortObjects=this.sortObjects,r.drawRanges=this._drawRanges,r.reservedRanges=this._reservedRanges,r.visibility=this._visibility,r.active=this._active,r.bounds=this._bounds.map(o=>({boxInitialized:o.boxInitialized,boxMin:o.box.min.toArray(),boxMax:o.box.max.toArray(),sphereInitialized:o.sphereInitialized,sphereRadius:o.sphere.radius,sphereCenter:o.sphere.center.toArray()})),r.maxInstanceCount=this._maxInstanceCount,r.maxVertexCount=this._maxVertexCount,r.maxIndexCount=this._maxIndexCount,r.geometryInitialized=this._geometryInitialized,r.geometryCount=this._geometryCount,r.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(r.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(r.boundingSphere={center:r.boundingSphere.center.toArray(),radius:r.boundingSphere.radius}),this.boundingBox!==null&&(r.boundingBox={min:r.boundingBox.min.toArray(),max:r.boundingBox.max.toArray()}));function s(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?r.background=this.background.toJSON():this.background.isTexture&&(r.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(r.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){r.geometry=s(t.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let c=0,u=l.length;c<u;c++){const d=l[c];s(t.shapes,d)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(r.bindMode=this.bindMode,r.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),r.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,c=this.material.length;l<c;l++)o.push(s(t.materials,this.material[l]));r.material=o}else r.material=s(t.materials,this.material);if(this.children.length>0){r.children=[];for(let o=0;o<this.children.length;o++)r.children.push(this.children[o].toJSON(t).object)}if(this.animations.length>0){r.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];r.animations.push(s(t.animations,l))}}if(e){const o=a(t.geometries),l=a(t.materials),c=a(t.textures),u=a(t.images),d=a(t.shapes),f=a(t.skeletons),m=a(t.animations),v=a(t.nodes);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),u.length>0&&(n.images=u),d.length>0&&(n.shapes=d),f.length>0&&(n.skeletons=f),m.length>0&&(n.animations=m),v.length>0&&(n.nodes=v)}return n.object=r,n;function a(o){const l=[];for(const c in o){const u=o[c];delete u.metadata,l.push(u)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const r=t.children[n];this.add(r.clone())}return this}}vt.DEFAULT_UP=new N(0,1,0);vt.DEFAULT_MATRIX_AUTO_UPDATE=!0;vt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Ot=new N,Kt=new N,A8=new N,jt=new N,Xe=new N,Ye=new N,v7=new N,R8=new N,w8=new N,C8=new N,P8=new rt,D8=new rt,L8=new rt;class Bt{constructor(t=new N,e=new N,n=new N){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,r){r.subVectors(n,e),Ot.subVectors(t,e),r.cross(Ot);const s=r.lengthSq();return s>0?r.multiplyScalar(1/Math.sqrt(s)):r.set(0,0,0)}static getBarycoord(t,e,n,r,s){Ot.subVectors(r,e),Kt.subVectors(n,e),A8.subVectors(t,e);const a=Ot.dot(Ot),o=Ot.dot(Kt),l=Ot.dot(A8),c=Kt.dot(Kt),u=Kt.dot(A8),d=a*c-o*o;if(d===0)return s.set(0,0,0),null;const f=1/d,m=(c*l-o*u)*f,v=(a*u-o*l)*f;return s.set(1-m-v,v,m)}static containsPoint(t,e,n,r){return this.getBarycoord(t,e,n,r,jt)===null?!1:jt.x>=0&&jt.y>=0&&jt.x+jt.y<=1}static getInterpolation(t,e,n,r,s,a,o,l){return this.getBarycoord(t,e,n,r,jt)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,jt.x),l.addScaledVector(a,jt.y),l.addScaledVector(o,jt.z),l)}static getInterpolatedAttribute(t,e,n,r,s,a){return P8.setScalar(0),D8.setScalar(0),L8.setScalar(0),P8.fromBufferAttribute(t,e),D8.fromBufferAttribute(t,n),L8.fromBufferAttribute(t,r),a.setScalar(0),a.addScaledVector(P8,s.x),a.addScaledVector(D8,s.y),a.addScaledVector(L8,s.z),a}static isFrontFacing(t,e,n,r){return Ot.subVectors(n,e),Kt.subVectors(t,e),Ot.cross(Kt).dot(r)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,r){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[r]),this}setFromAttributeAndIndices(t,e,n,r){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,r),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ot.subVectors(this.c,this.b),Kt.subVectors(this.a,this.b),Ot.cross(Kt).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Bt.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Bt.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,r,s){return Bt.getInterpolation(t,this.a,this.b,this.c,e,n,r,s)}containsPoint(t){return Bt.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Bt.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,r=this.b,s=this.c;let a,o;Xe.subVectors(r,n),Ye.subVectors(s,n),R8.subVectors(t,n);const l=Xe.dot(R8),c=Ye.dot(R8);if(l<=0&&c<=0)return e.copy(n);w8.subVectors(t,r);const u=Xe.dot(w8),d=Ye.dot(w8);if(u>=0&&d<=u)return e.copy(r);const f=l*d-u*c;if(f<=0&&l>=0&&u<=0)return a=l/(l-u),e.copy(n).addScaledVector(Xe,a);C8.subVectors(t,s);const m=Xe.dot(C8),v=Ye.dot(C8);if(v>=0&&m<=v)return e.copy(s);const M=m*c-l*v;if(M<=0&&c>=0&&v<=0)return o=c/(c-v),e.copy(n).addScaledVector(Ye,o);const p=u*v-m*d;if(p<=0&&d-u>=0&&m-v>=0)return v7.subVectors(s,r),o=(d-u)/(d-u+(m-v)),e.copy(r).addScaledVector(v7,o);const h=1/(p+M+f);return a=M*h,o=f*h,e.copy(n).addScaledVector(Xe,a).addScaledVector(Ye,o)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const gi={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ue={h:0,s:0,l:0},N1={h:0,s:0,l:0};function U8(i,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?i+(t-i)*6*e:e<1/2?t:e<2/3?i+(t-i)*6*(2/3-e):i}class Y0{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const r=t;r&&r.isColor?this.copy(r):typeof r=="number"?this.setHex(r):typeof r=="string"&&this.setStyle(r)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Dt){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,G0.toWorkingColorSpace(this,e),this}setRGB(t,e,n,r=G0.workingColorSpace){return this.r=t,this.g=e,this.b=n,G0.toWorkingColorSpace(this,r),this}setHSL(t,e,n,r=G0.workingColorSpace){if(t=w9(t,1),e=I0(e,0,1),n=I0(n,0,1),e===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+e):n+e-n*e,a=2*n-s;this.r=U8(a,s,t+1/3),this.g=U8(a,s,t),this.b=U8(a,s,t-1/3)}return G0.toWorkingColorSpace(this,r),this}setStyle(t,e=Dt){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let r;if(r=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const a=r[1],o=r[2];switch(a){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=r[1],a=s.length;if(a===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(a===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Dt){const n=gi[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=ne(t.r),this.g=ne(t.g),this.b=ne(t.b),this}copyLinearToSRGB(t){return this.r=n1(t.r),this.g=n1(t.g),this.b=n1(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Dt){return G0.fromWorkingColorSpace(mt.copy(this),t),Math.round(I0(mt.r*255,0,255))*65536+Math.round(I0(mt.g*255,0,255))*256+Math.round(I0(mt.b*255,0,255))}getHexString(t=Dt){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=G0.workingColorSpace){G0.fromWorkingColorSpace(mt.copy(this),e);const n=mt.r,r=mt.g,s=mt.b,a=Math.max(n,r,s),o=Math.min(n,r,s);let l,c;const u=(o+a)/2;if(o===a)l=0,c=0;else{const d=a-o;switch(c=u<=.5?d/(a+o):d/(2-a-o),a){case n:l=(r-s)/d+(r<s?6:0);break;case r:l=(s-n)/d+2;break;case s:l=(n-r)/d+4;break}l/=6}return t.h=l,t.s=c,t.l=u,t}getRGB(t,e=G0.workingColorSpace){return G0.fromWorkingColorSpace(mt.copy(this),e),t.r=mt.r,t.g=mt.g,t.b=mt.b,t}getStyle(t=Dt){G0.fromWorkingColorSpace(mt.copy(this),t);const e=mt.r,n=mt.g,r=mt.b;return t!==Dt?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${r.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(r*255)})`}offsetHSL(t,e,n){return this.getHSL(ue),this.setHSL(ue.h+t,ue.s+e,ue.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(ue),t.getHSL(N1);const n=_8(ue.h,N1.h,e),r=_8(ue.s,N1.s,e),s=_8(ue.l,N1.l,e);return this.setHSL(n,r,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,r=this.b,s=t.elements;return this.r=s[0]*e+s[3]*n+s[6]*r,this.g=s[1]*e+s[4]*n+s[7]*r,this.b=s[2]*e+s[5]*n+s[8]*r,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const mt=new Y0;Y0.NAMES=gi;let q9=0;class E1 extends Ne{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:q9++}),this.uuid=M1(),this.name="",this.type="Material",this.blending=t1,this.side=ge,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=q8,this.blendDst=Z8,this.blendEquation=we,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Y0(0,0,0),this.blendAlpha=0,this.depthFunc=i1,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=r7,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Oe,this.stencilZFail=Oe,this.stencilZPass=Oe,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const r=this[e];if(r===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==t1&&(n.blending=this.blending),this.side!==ge&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==q8&&(n.blendSrc=this.blendSrc),this.blendDst!==Z8&&(n.blendDst=this.blendDst),this.blendEquation!==we&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==i1&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==r7&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Oe&&(n.stencilFail=this.stencilFail),this.stencilZFail!==Oe&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==Oe&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function r(s){const a=[];for(const o in s){const l=s[o];delete l.metadata,a.push(l)}return a}if(e){const s=r(t.textures),a=r(t.images);s.length>0&&(n.textures=s),a.length>0&&(n.images=a)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const r=e.length;n=new Array(r);for(let s=0;s!==r;++s)n[s]=e[s].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class vi extends E1{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Y0(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new re,this.combine=ei,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const ot=new N,F1=new L0;let Z9=0;class kt{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:Z9++}),this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=s7,this.updateRanges=[],this.gpuType=Qt,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let r=0,s=this.itemSize;r<s;r++)this.array[t+r]=e.array[n+r];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)F1.fromBufferAttribute(this,e),F1.applyMatrix3(t),this.setXY(e,F1.x,F1.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)ot.fromBufferAttribute(this,e),ot.applyMatrix3(t),this.setXYZ(e,ot.x,ot.y,ot.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)ot.fromBufferAttribute(this,e),ot.applyMatrix4(t),this.setXYZ(e,ot.x,ot.y,ot.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)ot.fromBufferAttribute(this,e),ot.applyNormalMatrix(t),this.setXYZ(e,ot.x,ot.y,ot.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)ot.fromBufferAttribute(this,e),ot.transformDirection(t),this.setXYZ(e,ot.x,ot.y,ot.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=d1(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Mt(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=d1(e,this.array)),e}setX(t,e){return this.normalized&&(e=Mt(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=d1(e,this.array)),e}setY(t,e){return this.normalized&&(e=Mt(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=d1(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Mt(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=d1(e,this.array)),e}setW(t,e){return this.normalized&&(e=Mt(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Mt(e,this.array),n=Mt(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,r){return t*=this.itemSize,this.normalized&&(e=Mt(e,this.array),n=Mt(n,this.array),r=Mt(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this}setXYZW(t,e,n,r,s){return t*=this.itemSize,this.normalized&&(e=Mt(e,this.array),n=Mt(n,this.array),r=Mt(r,this.array),s=Mt(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==s7&&(t.usage=this.usage),t}}class xi extends kt{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class Mi extends kt{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class Wt extends kt{constructor(t,e,n){super(new Float32Array(t),e,n)}}let K9=0;const Pt=new st,I8=new vt,qe=new N,At=new S1,_1=new S1,ut=new N;class ae extends Ne{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:K9++}),this.uuid=M1(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(pi(t)?Mi:xi)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new C0().getNormalMatrix(t);n.applyNormalMatrix(s),n.needsUpdate=!0}const r=this.attributes.tangent;return r!==void 0&&(r.transformDirection(t),r.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Pt.makeRotationFromQuaternion(t),this.applyMatrix4(Pt),this}rotateX(t){return Pt.makeRotationX(t),this.applyMatrix4(Pt),this}rotateY(t){return Pt.makeRotationY(t),this.applyMatrix4(Pt),this}rotateZ(t){return Pt.makeRotationZ(t),this.applyMatrix4(Pt),this}translate(t,e,n){return Pt.makeTranslation(t,e,n),this.applyMatrix4(Pt),this}scale(t,e,n){return Pt.makeScale(t,e,n),this.applyMatrix4(Pt),this}lookAt(t){return I8.lookAt(t),I8.updateMatrix(),this.applyMatrix4(I8.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(qe).negate(),this.translate(qe.x,qe.y,qe.z),this}setFromPoints(t){const e=this.getAttribute("position");if(e===void 0){const n=[];for(let r=0,s=t.length;r<s;r++){const a=t[r];n.push(a.x,a.y,a.z||0)}this.setAttribute("position",new Wt(n,3))}else{const n=Math.min(t.length,e.count);for(let r=0;r<n;r++){const s=t[r];e.setXYZ(r,s.x,s.y,s.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new S1);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new N(-1/0,-1/0,-1/0),new N(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,r=e.length;n<r;n++){const s=e[n];At.setFromBufferAttribute(s),this.morphTargetsRelative?(ut.addVectors(this.boundingBox.min,At.min),this.boundingBox.expandByPoint(ut),ut.addVectors(this.boundingBox.max,At.max),this.boundingBox.expandByPoint(ut)):(this.boundingBox.expandByPoint(At.min),this.boundingBox.expandByPoint(At.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new c8);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new N,1/0);return}if(t){const n=this.boundingSphere.center;if(At.setFromBufferAttribute(t),e)for(let s=0,a=e.length;s<a;s++){const o=e[s];_1.setFromBufferAttribute(o),this.morphTargetsRelative?(ut.addVectors(At.min,_1.min),At.expandByPoint(ut),ut.addVectors(At.max,_1.max),At.expandByPoint(ut)):(At.expandByPoint(_1.min),At.expandByPoint(_1.max))}At.getCenter(n);let r=0;for(let s=0,a=t.count;s<a;s++)ut.fromBufferAttribute(t,s),r=Math.max(r,n.distanceToSquared(ut));if(e)for(let s=0,a=e.length;s<a;s++){const o=e[s],l=this.morphTargetsRelative;for(let c=0,u=o.count;c<u;c++)ut.fromBufferAttribute(o,c),l&&(qe.fromBufferAttribute(t,c),ut.add(qe)),r=Math.max(r,n.distanceToSquared(ut))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,r=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new kt(new Float32Array(4*n.count),4));const a=this.getAttribute("tangent"),o=[],l=[];for(let I=0;I<n.count;I++)o[I]=new N,l[I]=new N;const c=new N,u=new N,d=new N,f=new L0,m=new L0,v=new L0,M=new N,p=new N;function h(I,S,x){c.fromBufferAttribute(n,I),u.fromBufferAttribute(n,S),d.fromBufferAttribute(n,x),f.fromBufferAttribute(s,I),m.fromBufferAttribute(s,S),v.fromBufferAttribute(s,x),u.sub(c),d.sub(c),m.sub(f),v.sub(f);const w=1/(m.x*v.y-v.x*m.y);isFinite(w)&&(M.copy(u).multiplyScalar(v.y).addScaledVector(d,-m.y).multiplyScalar(w),p.copy(d).multiplyScalar(m.x).addScaledVector(u,-v.x).multiplyScalar(w),o[I].add(M),o[S].add(M),o[x].add(M),l[I].add(p),l[S].add(p),l[x].add(p))}let A=this.groups;A.length===0&&(A=[{start:0,count:t.count}]);for(let I=0,S=A.length;I<S;++I){const x=A[I],w=x.start,Y=x.count;for(let z=w,W=w+Y;z<W;z+=3)h(t.getX(z+0),t.getX(z+1),t.getX(z+2))}const T=new N,y=new N,U=new N,R=new N;function P(I){U.fromBufferAttribute(r,I),R.copy(U);const S=o[I];T.copy(S),T.sub(U.multiplyScalar(U.dot(S))).normalize(),y.crossVectors(R,S);const w=y.dot(l[I])<0?-1:1;a.setXYZW(I,T.x,T.y,T.z,w)}for(let I=0,S=A.length;I<S;++I){const x=A[I],w=x.start,Y=x.count;for(let z=w,W=w+Y;z<W;z+=3)P(t.getX(z+0)),P(t.getX(z+1)),P(t.getX(z+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new kt(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let f=0,m=n.count;f<m;f++)n.setXYZ(f,0,0,0);const r=new N,s=new N,a=new N,o=new N,l=new N,c=new N,u=new N,d=new N;if(t)for(let f=0,m=t.count;f<m;f+=3){const v=t.getX(f+0),M=t.getX(f+1),p=t.getX(f+2);r.fromBufferAttribute(e,v),s.fromBufferAttribute(e,M),a.fromBufferAttribute(e,p),u.subVectors(a,s),d.subVectors(r,s),u.cross(d),o.fromBufferAttribute(n,v),l.fromBufferAttribute(n,M),c.fromBufferAttribute(n,p),o.add(u),l.add(u),c.add(u),n.setXYZ(v,o.x,o.y,o.z),n.setXYZ(M,l.x,l.y,l.z),n.setXYZ(p,c.x,c.y,c.z)}else for(let f=0,m=e.count;f<m;f+=3)r.fromBufferAttribute(e,f+0),s.fromBufferAttribute(e,f+1),a.fromBufferAttribute(e,f+2),u.subVectors(a,s),d.subVectors(r,s),u.cross(d),n.setXYZ(f+0,u.x,u.y,u.z),n.setXYZ(f+1,u.x,u.y,u.z),n.setXYZ(f+2,u.x,u.y,u.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)ut.fromBufferAttribute(t,e),ut.normalize(),t.setXYZ(e,ut.x,ut.y,ut.z)}toNonIndexed(){function t(o,l){const c=o.array,u=o.itemSize,d=o.normalized,f=new c.constructor(l.length*u);let m=0,v=0;for(let M=0,p=l.length;M<p;M++){o.isInterleavedBufferAttribute?m=l[M]*o.data.stride+o.offset:m=l[M]*u;for(let h=0;h<u;h++)f[v++]=c[m++]}return new kt(f,u,d)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new ae,n=this.index.array,r=this.attributes;for(const o in r){const l=r[o],c=t(l,n);e.setAttribute(o,c)}const s=this.morphAttributes;for(const o in s){const l=[],c=s[o];for(let u=0,d=c.length;u<d;u++){const f=c[u],m=t(f,n);l.push(m)}e.morphAttributes[o]=l}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let o=0,l=a.length;o<l;o++){const c=a[o];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const l in n){const c=n[l];t.data.attributes[l]=c.toJSON(t.data)}const r={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],u=[];for(let d=0,f=c.length;d<f;d++){const m=c[d];u.push(m.toJSON(t.data))}u.length>0&&(r[l]=u,s=!0)}s&&(t.data.morphAttributes=r,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return o!==null&&(t.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const r=t.attributes;for(const c in r){const u=r[c];this.setAttribute(c,u.clone(e))}const s=t.morphAttributes;for(const c in s){const u=[],d=s[c];for(let f=0,m=d.length;f<m;f++)u.push(d[f].clone(e));this.morphAttributes[c]=u}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let c=0,u=a.length;c<u;c++){const d=a[c];this.addGroup(d.start,d.count,d.materialIndex)}const o=t.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const x7=new st,Ee=new Wn,O1=new c8,M7=new N,B1=new N,z1=new N,H1=new N,N8=new N,V1=new N,S7=new N,G1=new N;class ee extends vt{constructor(t=new ae,e=new vi){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const r=e[n[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=r.length;s<a;s++){const o=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}getVertexPosition(t,e){const n=this.geometry,r=n.attributes.position,s=n.morphAttributes.position,a=n.morphTargetsRelative;e.fromBufferAttribute(r,t);const o=this.morphTargetInfluences;if(s&&o){V1.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const u=o[l],d=s[l];u!==0&&(N8.fromBufferAttribute(d,t),a?V1.addScaledVector(N8,u):V1.addScaledVector(N8.sub(e),u))}e.add(V1)}return e}raycast(t,e){const n=this.geometry,r=this.material,s=this.matrixWorld;r!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),O1.copy(n.boundingSphere),O1.applyMatrix4(s),Ee.copy(t.ray).recast(t.near),!(O1.containsPoint(Ee.origin)===!1&&(Ee.intersectSphere(O1,M7)===null||Ee.origin.distanceToSquared(M7)>(t.far-t.near)**2))&&(x7.copy(s).invert(),Ee.copy(t.ray).applyMatrix4(x7),!(n.boundingBox!==null&&Ee.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,Ee)))}_computeIntersections(t,e,n){let r;const s=this.geometry,a=this.material,o=s.index,l=s.attributes.position,c=s.attributes.uv,u=s.attributes.uv1,d=s.attributes.normal,f=s.groups,m=s.drawRange;if(o!==null)if(Array.isArray(a))for(let v=0,M=f.length;v<M;v++){const p=f[v],h=a[p.materialIndex],A=Math.max(p.start,m.start),T=Math.min(o.count,Math.min(p.start+p.count,m.start+m.count));for(let y=A,U=T;y<U;y+=3){const R=o.getX(y),P=o.getX(y+1),I=o.getX(y+2);r=k1(this,h,t,n,c,u,d,R,P,I),r&&(r.faceIndex=Math.floor(y/3),r.face.materialIndex=p.materialIndex,e.push(r))}}else{const v=Math.max(0,m.start),M=Math.min(o.count,m.start+m.count);for(let p=v,h=M;p<h;p+=3){const A=o.getX(p),T=o.getX(p+1),y=o.getX(p+2);r=k1(this,a,t,n,c,u,d,A,T,y),r&&(r.faceIndex=Math.floor(p/3),e.push(r))}}else if(l!==void 0)if(Array.isArray(a))for(let v=0,M=f.length;v<M;v++){const p=f[v],h=a[p.materialIndex],A=Math.max(p.start,m.start),T=Math.min(l.count,Math.min(p.start+p.count,m.start+m.count));for(let y=A,U=T;y<U;y+=3){const R=y,P=y+1,I=y+2;r=k1(this,h,t,n,c,u,d,R,P,I),r&&(r.faceIndex=Math.floor(y/3),r.face.materialIndex=p.materialIndex,e.push(r))}}else{const v=Math.max(0,m.start),M=Math.min(l.count,m.start+m.count);for(let p=v,h=M;p<h;p+=3){const A=p,T=p+1,y=p+2;r=k1(this,a,t,n,c,u,d,A,T,y),r&&(r.faceIndex=Math.floor(p/3),e.push(r))}}}}function j9(i,t,e,n,r,s,a,o){let l;if(t.side===Et?l=n.intersectTriangle(a,s,r,!0,o):l=n.intersectTriangle(r,s,a,t.side===ge,o),l===null)return null;G1.copy(o),G1.applyMatrix4(i.matrixWorld);const c=e.ray.origin.distanceTo(G1);return c<e.near||c>e.far?null:{distance:c,point:G1.clone(),object:i}}function k1(i,t,e,n,r,s,a,o,l,c){i.getVertexPosition(o,B1),i.getVertexPosition(l,z1),i.getVertexPosition(c,H1);const u=j9(i,t,e,n,B1,z1,H1,S7);if(u){const d=new N;Bt.getBarycoord(S7,B1,z1,H1,d),r&&(u.uv=Bt.getInterpolatedAttribute(r,o,l,c,d,new L0)),s&&(u.uv1=Bt.getInterpolatedAttribute(s,o,l,c,d,new L0)),a&&(u.normal=Bt.getInterpolatedAttribute(a,o,l,c,d,new N),u.normal.dot(n.direction)>0&&u.normal.multiplyScalar(-1));const f={a:o,b:l,c,normal:new N,materialIndex:0};Bt.getNormal(B1,z1,H1,f.normal),u.face=f,u.barycoord=d}return u}class y1 extends ae{constructor(t=1,e=1,n=1,r=1,s=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:s,depthSegments:a};const o=this;r=Math.floor(r),s=Math.floor(s),a=Math.floor(a);const l=[],c=[],u=[],d=[];let f=0,m=0;v("z","y","x",-1,-1,n,e,t,a,s,0),v("z","y","x",1,-1,n,e,-t,a,s,1),v("x","z","y",1,1,t,n,e,r,a,2),v("x","z","y",1,-1,t,n,-e,r,a,3),v("x","y","z",1,-1,t,e,n,r,s,4),v("x","y","z",-1,-1,t,e,-n,r,s,5),this.setIndex(l),this.setAttribute("position",new Wt(c,3)),this.setAttribute("normal",new Wt(u,3)),this.setAttribute("uv",new Wt(d,2));function v(M,p,h,A,T,y,U,R,P,I,S){const x=y/P,w=U/I,Y=y/2,z=U/2,W=R/2,j=P+1,G=I+1;let Q=0,V=0;const r0=new N;for(let h0=0;h0<G;h0++){const v0=h0*w-z;for(let U0=0;U0<j;U0++){const j0=U0*x-Y;r0[M]=j0*A,r0[p]=v0*T,r0[h]=W,c.push(r0.x,r0.y,r0.z),r0[M]=0,r0[p]=0,r0[h]=R>0?1:-1,u.push(r0.x,r0.y,r0.z),d.push(U0/P),d.push(1-h0/I),Q+=1}}for(let h0=0;h0<I;h0++)for(let v0=0;v0<P;v0++){const U0=f+v0+j*h0,j0=f+v0+j*(h0+1),X=f+(v0+1)+j*(h0+1),t0=f+(v0+1)+j*h0;l.push(U0,j0,t0),l.push(j0,X,t0),V+=6}o.addGroup(m,V,S),m+=V,f+=Q}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new y1(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function c1(i){const t={};for(const e in i){t[e]={};for(const n in i[e]){const r=i[e][n];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=r.clone():Array.isArray(r)?t[e][n]=r.slice():t[e][n]=r}}return t}function gt(i){const t={};for(let e=0;e<i.length;e++){const n=c1(i[e]);for(const r in n)t[r]=n[r]}return t}function $9(i){const t=[];for(let e=0;e<i.length;e++)t.push(i[e].clone());return t}function Si(i){const t=i.getRenderTarget();return t===null?i.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:G0.workingColorSpace}const J9={clone:c1,merge:gt};var Q9=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,t5=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class se extends E1{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=Q9,this.fragmentShader=t5,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=c1(t.uniforms),this.uniformsGroups=$9(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const r in this.uniforms){const a=this.uniforms[r].value;a&&a.isTexture?e.uniforms[r]={type:"t",value:a.toJSON(t).uuid}:a&&a.isColor?e.uniforms[r]={type:"c",value:a.getHex()}:a&&a.isVector2?e.uniforms[r]={type:"v2",value:a.toArray()}:a&&a.isVector3?e.uniforms[r]={type:"v3",value:a.toArray()}:a&&a.isVector4?e.uniforms[r]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?e.uniforms[r]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?e.uniforms[r]={type:"m4",value:a.toArray()}:e.uniforms[r]={value:a}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const r in this.extensions)this.extensions[r]===!0&&(n[r]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class Ei extends vt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new st,this.projectionMatrix=new st,this.projectionMatrixInverse=new st,this.coordinateSystem=te}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const de=new N,E7=new L0,y7=new L0;class Lt extends Ei{constructor(t=50,e=1,n=.1,r=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=r,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=Un*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(i8*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return Un*2*Math.atan(Math.tan(i8*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){de.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(de.x,de.y).multiplyScalar(-t/de.z),de.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(de.x,de.y).multiplyScalar(-t/de.z)}getViewSize(t,e){return this.getViewBounds(t,E7,y7),e.subVectors(y7,E7)}setViewOffset(t,e,n,r,s,a){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(i8*.5*this.fov)/this.zoom,n=2*e,r=this.aspect*n,s=-.5*r;const a=this.view;if(this.view!==null&&this.view.enabled){const l=a.fullWidth,c=a.fullHeight;s+=a.offsetX*r/l,e-=a.offsetY*n/c,r*=a.width/l,n*=a.height/c}const o=this.filmOffset;o!==0&&(s+=t*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+r,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const Ze=-90,Ke=1;class e5 extends vt{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const r=new Lt(Ze,Ke,t,e);r.layers=this.layers,this.add(r);const s=new Lt(Ze,Ke,t,e);s.layers=this.layers,this.add(s);const a=new Lt(Ze,Ke,t,e);a.layers=this.layers,this.add(a);const o=new Lt(Ze,Ke,t,e);o.layers=this.layers,this.add(o);const l=new Lt(Ze,Ke,t,e);l.layers=this.layers,this.add(l);const c=new Lt(Ze,Ke,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,r,s,a,o,l]=e;for(const c of e)this.remove(c);if(t===te)n.up.set(0,1,0),n.lookAt(1,0,0),r.up.set(0,1,0),r.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===a8)n.up.set(0,-1,0),n.lookAt(-1,0,0),r.up.set(0,-1,0),r.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:r}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,a,o,l,c,u]=this.children,d=t.getRenderTarget(),f=t.getActiveCubeFace(),m=t.getActiveMipmapLevel(),v=t.xr.enabled;t.xr.enabled=!1;const M=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,r),t.render(e,s),t.setRenderTarget(n,1,r),t.render(e,a),t.setRenderTarget(n,2,r),t.render(e,o),t.setRenderTarget(n,3,r),t.render(e,l),t.setRenderTarget(n,4,r),t.render(e,c),n.texture.generateMipmaps=M,t.setRenderTarget(n,5,r),t.render(e,u),t.setRenderTarget(d,f,m),t.xr.enabled=v,n.texture.needsPMREMUpdate=!0}}class yi extends yt{constructor(t,e,n,r,s,a,o,l,c,u){t=t!==void 0?t:[],e=e!==void 0?e:r1,super(t,e,n,r,s,a,o,l,c,u),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class n5 extends Ue{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},r=[n,n,n,n,n,n];this.texture=new yi(r,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:Gt}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},r=new y1(5,5,5),s=new se({name:"CubemapFromEquirect",uniforms:c1(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Et,blending:me});s.uniforms.tEquirect.value=e;const a=new ee(r,s),o=e.minFilter;return e.minFilter===De&&(e.minFilter=Gt),new e5(1,10,this).update(t,a),e.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,n,r){const s=t.getRenderTarget();for(let a=0;a<6;a++)t.setRenderTarget(this,a),t.clear(e,n,r);t.setRenderTarget(s)}}class W1 extends vt{constructor(){super(),this.isGroup=!0,this.type="Group"}}const i5={type:"move"};class F8{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new W1,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new W1,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new N,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new N),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new W1,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new N,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new N),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,n){let r=null,s=null,a=null;const o=this._targetRay,l=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(c&&t.hand){a=!0;for(const M of t.hand.values()){const p=e.getJointPose(M,n),h=this._getHandJoint(c,M);p!==null&&(h.matrix.fromArray(p.transform.matrix),h.matrix.decompose(h.position,h.rotation,h.scale),h.matrixWorldNeedsUpdate=!0,h.jointRadius=p.radius),h.visible=p!==null}const u=c.joints["index-finger-tip"],d=c.joints["thumb-tip"],f=u.position.distanceTo(d.position),m=.02,v=.005;c.inputState.pinching&&f>m+v?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&f<=m-v&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));o!==null&&(r=e.getPose(t.targetRaySpace,n),r===null&&s!==null&&(r=s),r!==null&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(i5)))}return o!==null&&(o.visible=r!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=a!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const n=new W1;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}class r5 extends vt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new re,this.environmentIntensity=1,this.environmentRotation=new re,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}const O8=new N,s5=new N,a5=new C0;class fe{constructor(t=new N(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,r){return this.normal.set(t,e,n),this.constant=r,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const r=O8.subVectors(n,e).cross(s5.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(r,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(O8),r=this.normal.dot(n);if(r===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/r;return s<0||s>1?null:e.copy(t.start).addScaledVector(n,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||a5.getNormalMatrix(t),r=this.coplanarPoint(O8).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-r.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const ye=new c8,X1=new N;class Ti{constructor(t=new fe,e=new fe,n=new fe,r=new fe,s=new fe,a=new fe){this.planes=[t,e,n,r,s,a]}set(t,e,n,r,s,a){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(r),o[4].copy(s),o[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=te){const n=this.planes,r=t.elements,s=r[0],a=r[1],o=r[2],l=r[3],c=r[4],u=r[5],d=r[6],f=r[7],m=r[8],v=r[9],M=r[10],p=r[11],h=r[12],A=r[13],T=r[14],y=r[15];if(n[0].setComponents(l-s,f-c,p-m,y-h).normalize(),n[1].setComponents(l+s,f+c,p+m,y+h).normalize(),n[2].setComponents(l+a,f+u,p+v,y+A).normalize(),n[3].setComponents(l-a,f-u,p-v,y-A).normalize(),n[4].setComponents(l-o,f-d,p-M,y-T).normalize(),e===te)n[5].setComponents(l+o,f+d,p+M,y+T).normalize();else if(e===a8)n[5].setComponents(o,d,M,T).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),ye.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),ye.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(ye)}intersectsSprite(t){return ye.center.set(0,0,0),ye.radius=.7071067811865476,ye.applyMatrix4(t.matrixWorld),this.intersectsSphere(ye)}intersectsSphere(t){const e=this.planes,n=t.center,r=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(n)<r)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const r=e[n];if(X1.x=r.normal.x>0?t.max.x:t.min.x,X1.y=r.normal.y>0?t.max.y:t.min.y,X1.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(X1)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class o5 extends E1{constructor(t){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Y0(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}const T7=new st,In=new Wn,Y1=new c8,q1=new N;class l5 extends vt{constructor(t=new ae,e=new o5){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=e,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,r=this.matrixWorld,s=t.params.Points.threshold,a=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),Y1.copy(n.boundingSphere),Y1.applyMatrix4(r),Y1.radius+=s,t.ray.intersectsSphere(Y1)===!1)return;T7.copy(r).invert(),In.copy(t.ray).applyMatrix4(T7);const o=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=o*o,c=n.index,d=n.attributes.position;if(c!==null){const f=Math.max(0,a.start),m=Math.min(c.count,a.start+a.count);for(let v=f,M=m;v<M;v++){const p=c.getX(v);q1.fromBufferAttribute(d,p),b7(q1,p,l,r,t,e,this)}}else{const f=Math.max(0,a.start),m=Math.min(d.count,a.start+a.count);for(let v=f,M=m;v<M;v++)q1.fromBufferAttribute(d,v),b7(q1,v,l,r,t,e,this)}}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const r=e[n[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,a=r.length;s<a;s++){const o=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=s}}}}}function b7(i,t,e,n,r,s,a){const o=In.distanceSqToPoint(i);if(o<e){const l=new N;In.closestPointToPoint(i,l),l.applyMatrix4(n);const c=r.ray.origin.distanceTo(l);if(c<r.near||c>r.far)return;s.push({distance:c,distanceToRay:Math.sqrt(o),point:l,index:t,face:null,faceIndex:null,barycoord:null,object:a})}}class bi extends yt{constructor(t,e,n,r,s,a,o,l,c,u=e1){if(u!==e1&&u!==o1)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&u===e1&&(n=Le),n===void 0&&u===o1&&(n=a1),super(null,r,s,a,o,l,u,n,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=o!==void 0?o:Ht,this.minFilter=l!==void 0?l:Ht,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.source=new kn(Object.assign({},t.image)),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}class h8 extends ae{constructor(t=1,e=1,n=1,r=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r};const s=t/2,a=e/2,o=Math.floor(n),l=Math.floor(r),c=o+1,u=l+1,d=t/o,f=e/l,m=[],v=[],M=[],p=[];for(let h=0;h<u;h++){const A=h*f-a;for(let T=0;T<c;T++){const y=T*d-s;v.push(y,-A,0),M.push(0,0,1),p.push(T/o),p.push(1-h/l)}}for(let h=0;h<l;h++)for(let A=0;A<o;A++){const T=A+c*h,y=A+c*(h+1),U=A+1+c*(h+1),R=A+1+c*h;m.push(T,y,R),m.push(y,U,R)}this.setIndex(m),this.setAttribute("position",new Wt(v,3)),this.setAttribute("normal",new Wt(M,3)),this.setAttribute("uv",new Wt(p,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new h8(t.width,t.height,t.widthSegments,t.heightSegments)}}class c5 extends E1{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=g9,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class h5 extends E1{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}class u5 extends Ei{constructor(t=-1,e=1,n=1,r=-1,s=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=r,this.near=s,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,r,s,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=s,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let s=n-t,a=n+t,o=r+e,l=r-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,a=s+c*this.view.width,o-=u*this.view.offsetY,l=o-u*this.view.height}this.projectionMatrix.makeOrthographic(s,a,o,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}class d5 extends Lt{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t,this.index=0}}class Xn{constructor(t){this.value=t}clone(){return new Xn(this.value.clone===void 0?this.value:this.value.clone())}}class A7{constructor(t=1,e=0,n=0){this.radius=t,this.phi=e,this.theta=n}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=I0(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(I0(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class f5 extends Ne{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function R7(i,t,e,n){const r=p5(n);switch(e){case ai:return i*t;case li:return i*t;case ci:return i*t*2;case hi:return i*t/r.components*r.byteLength;case Hn:return i*t/r.components*r.byteLength;case ui:return i*t*2/r.components*r.byteLength;case Vn:return i*t*2/r.components*r.byteLength;case oi:return i*t*3/r.components*r.byteLength;case zt:return i*t*4/r.components*r.byteLength;case Gn:return i*t*4/r.components*r.byteLength;case J1:case Q1:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*8;case t8:case e8:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*16;case ln:case hn:return Math.max(i,16)*Math.max(t,8)/4;case on:case cn:return Math.max(i,8)*Math.max(t,8)/2;case un:case dn:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*8;case fn:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*16;case pn:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*16;case mn:return Math.floor((i+4)/5)*Math.floor((t+3)/4)*16;case _n:return Math.floor((i+4)/5)*Math.floor((t+4)/5)*16;case gn:return Math.floor((i+5)/6)*Math.floor((t+4)/5)*16;case vn:return Math.floor((i+5)/6)*Math.floor((t+5)/6)*16;case xn:return Math.floor((i+7)/8)*Math.floor((t+4)/5)*16;case Mn:return Math.floor((i+7)/8)*Math.floor((t+5)/6)*16;case Sn:return Math.floor((i+7)/8)*Math.floor((t+7)/8)*16;case En:return Math.floor((i+9)/10)*Math.floor((t+4)/5)*16;case yn:return Math.floor((i+9)/10)*Math.floor((t+5)/6)*16;case Tn:return Math.floor((i+9)/10)*Math.floor((t+7)/8)*16;case bn:return Math.floor((i+9)/10)*Math.floor((t+9)/10)*16;case An:return Math.floor((i+11)/12)*Math.floor((t+9)/10)*16;case Rn:return Math.floor((i+11)/12)*Math.floor((t+11)/12)*16;case n8:case wn:case Cn:return Math.ceil(i/4)*Math.ceil(t/4)*16;case di:case Pn:return Math.ceil(i/4)*Math.ceil(t/4)*8;case Dn:case Ln:return Math.ceil(i/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function p5(i){switch(i){case ie:case ii:return{byteLength:1,components:1};case v1:case ri:case x1:return{byteLength:2,components:1};case Bn:case zn:return{byteLength:2,components:4};case Le:case On:case Qt:return{byteLength:4,components:1};case si:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${i}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Fn}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Fn);/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function Ai(){let i=null,t=!1,e=null,n=null;function r(s,a){e(s,a),n=i.requestAnimationFrame(r)}return{start:function(){t!==!0&&e!==null&&(n=i.requestAnimationFrame(r),t=!0)},stop:function(){i.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){i=s}}}function m5(i){const t=new WeakMap;function e(o,l){const c=o.array,u=o.usage,d=c.byteLength,f=i.createBuffer();i.bindBuffer(l,f),i.bufferData(l,c,u),o.onUploadCallback();let m;if(c instanceof Float32Array)m=i.FLOAT;else if(c instanceof Uint16Array)o.isFloat16BufferAttribute?m=i.HALF_FLOAT:m=i.UNSIGNED_SHORT;else if(c instanceof Int16Array)m=i.SHORT;else if(c instanceof Uint32Array)m=i.UNSIGNED_INT;else if(c instanceof Int32Array)m=i.INT;else if(c instanceof Int8Array)m=i.BYTE;else if(c instanceof Uint8Array)m=i.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)m=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:f,type:m,bytesPerElement:c.BYTES_PER_ELEMENT,version:o.version,size:d}}function n(o,l,c){const u=l.array,d=l.updateRanges;if(i.bindBuffer(c,o),d.length===0)i.bufferSubData(c,0,u);else{d.sort((m,v)=>m.start-v.start);let f=0;for(let m=1;m<d.length;m++){const v=d[f],M=d[m];M.start<=v.start+v.count+1?v.count=Math.max(v.count,M.start+M.count-v.start):(++f,d[f]=M)}d.length=f+1;for(let m=0,v=d.length;m<v;m++){const M=d[m];i.bufferSubData(c,M.start*u.BYTES_PER_ELEMENT,u,M.start,M.count)}l.clearUpdateRanges()}l.onUploadCallback()}function r(o){return o.isInterleavedBufferAttribute&&(o=o.data),t.get(o)}function s(o){o.isInterleavedBufferAttribute&&(o=o.data);const l=t.get(o);l&&(i.deleteBuffer(l.buffer),t.delete(o))}function a(o,l){if(o.isInterleavedBufferAttribute&&(o=o.data),o.isGLBufferAttribute){const u=t.get(o);(!u||u.version<o.version)&&t.set(o,{buffer:o.buffer,type:o.type,bytesPerElement:o.elementSize,version:o.version});return}const c=t.get(o);if(c===void 0)t.set(o,e(o,l));else if(c.version<o.version){if(c.size!==o.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(c.buffer,o,l),c.version=o.version}}return{get:r,remove:s,update:a}}var _5=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,g5=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,v5=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,x5=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,M5=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,S5=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,E5=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,y5=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,T5=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,b5=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,A5=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,R5=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,w5=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,C5=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,P5=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,D5=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,L5=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,U5=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,I5=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,N5=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,F5=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,O5=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,B5=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,z5=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,H5=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,V5=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,G5=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,k5=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,W5=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,X5=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,Y5="gl_FragColor = linearToOutputTexel( gl_FragColor );",q5=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,Z5=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,K5=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,j5=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,$5=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,J5=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Q5=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,t6=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,e6=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,n6=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,i6=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,r6=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,s6=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,a6=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,o6=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,l6=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,c6=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,h6=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,u6=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,d6=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,f6=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,p6=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,m6=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,_6=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,g6=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,v6=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,x6=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,M6=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,S6=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,E6=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,y6=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,T6=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,b6=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,A6=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,R6=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,w6=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,C6=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,P6=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,D6=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,L6=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,U6=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,I6=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,N6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,F6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,O6=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,B6=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,z6=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,H6=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,V6=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,G6=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,k6=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,W6=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,X6=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Y6=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,q6=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,Z6=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,K6=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,j6=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,$6=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,J6=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Q6=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,t2=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,e2=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,n2=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,i2=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,r2=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,s2=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,a2=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,o2=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,l2=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,c2=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,h2=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,u2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,d2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,f2=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,p2=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const m2=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,_2=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,g2=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,v2=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,x2=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,M2=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,S2=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,E2=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,y2=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,T2=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,b2=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,A2=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,R2=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,w2=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,C2=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,P2=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,D2=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,L2=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,U2=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,I2=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,N2=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,F2=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,O2=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,B2=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,z2=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,H2=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,V2=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,G2=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,k2=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,W2=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,X2=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,Y2=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,q2=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Z2=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,D0={alphahash_fragment:_5,alphahash_pars_fragment:g5,alphamap_fragment:v5,alphamap_pars_fragment:x5,alphatest_fragment:M5,alphatest_pars_fragment:S5,aomap_fragment:E5,aomap_pars_fragment:y5,batching_pars_vertex:T5,batching_vertex:b5,begin_vertex:A5,beginnormal_vertex:R5,bsdfs:w5,iridescence_fragment:C5,bumpmap_pars_fragment:P5,clipping_planes_fragment:D5,clipping_planes_pars_fragment:L5,clipping_planes_pars_vertex:U5,clipping_planes_vertex:I5,color_fragment:N5,color_pars_fragment:F5,color_pars_vertex:O5,color_vertex:B5,common:z5,cube_uv_reflection_fragment:H5,defaultnormal_vertex:V5,displacementmap_pars_vertex:G5,displacementmap_vertex:k5,emissivemap_fragment:W5,emissivemap_pars_fragment:X5,colorspace_fragment:Y5,colorspace_pars_fragment:q5,envmap_fragment:Z5,envmap_common_pars_fragment:K5,envmap_pars_fragment:j5,envmap_pars_vertex:$5,envmap_physical_pars_fragment:l6,envmap_vertex:J5,fog_vertex:Q5,fog_pars_vertex:t6,fog_fragment:e6,fog_pars_fragment:n6,gradientmap_pars_fragment:i6,lightmap_pars_fragment:r6,lights_lambert_fragment:s6,lights_lambert_pars_fragment:a6,lights_pars_begin:o6,lights_toon_fragment:c6,lights_toon_pars_fragment:h6,lights_phong_fragment:u6,lights_phong_pars_fragment:d6,lights_physical_fragment:f6,lights_physical_pars_fragment:p6,lights_fragment_begin:m6,lights_fragment_maps:_6,lights_fragment_end:g6,logdepthbuf_fragment:v6,logdepthbuf_pars_fragment:x6,logdepthbuf_pars_vertex:M6,logdepthbuf_vertex:S6,map_fragment:E6,map_pars_fragment:y6,map_particle_fragment:T6,map_particle_pars_fragment:b6,metalnessmap_fragment:A6,metalnessmap_pars_fragment:R6,morphinstance_vertex:w6,morphcolor_vertex:C6,morphnormal_vertex:P6,morphtarget_pars_vertex:D6,morphtarget_vertex:L6,normal_fragment_begin:U6,normal_fragment_maps:I6,normal_pars_fragment:N6,normal_pars_vertex:F6,normal_vertex:O6,normalmap_pars_fragment:B6,clearcoat_normal_fragment_begin:z6,clearcoat_normal_fragment_maps:H6,clearcoat_pars_fragment:V6,iridescence_pars_fragment:G6,opaque_fragment:k6,packing:W6,premultiplied_alpha_fragment:X6,project_vertex:Y6,dithering_fragment:q6,dithering_pars_fragment:Z6,roughnessmap_fragment:K6,roughnessmap_pars_fragment:j6,shadowmap_pars_fragment:$6,shadowmap_pars_vertex:J6,shadowmap_vertex:Q6,shadowmask_pars_fragment:t2,skinbase_vertex:e2,skinning_pars_vertex:n2,skinning_vertex:i2,skinnormal_vertex:r2,specularmap_fragment:s2,specularmap_pars_fragment:a2,tonemapping_fragment:o2,tonemapping_pars_fragment:l2,transmission_fragment:c2,transmission_pars_fragment:h2,uv_pars_fragment:u2,uv_pars_vertex:d2,uv_vertex:f2,worldpos_vertex:p2,background_vert:m2,background_frag:_2,backgroundCube_vert:g2,backgroundCube_frag:v2,cube_vert:x2,cube_frag:M2,depth_vert:S2,depth_frag:E2,distanceRGBA_vert:y2,distanceRGBA_frag:T2,equirect_vert:b2,equirect_frag:A2,linedashed_vert:R2,linedashed_frag:w2,meshbasic_vert:C2,meshbasic_frag:P2,meshlambert_vert:D2,meshlambert_frag:L2,meshmatcap_vert:U2,meshmatcap_frag:I2,meshnormal_vert:N2,meshnormal_frag:F2,meshphong_vert:O2,meshphong_frag:B2,meshphysical_vert:z2,meshphysical_frag:H2,meshtoon_vert:V2,meshtoon_frag:G2,points_vert:k2,points_frag:W2,shadow_vert:X2,shadow_frag:Y2,sprite_vert:q2,sprite_frag:Z2},e0={common:{diffuse:{value:new Y0(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new C0},alphaMap:{value:null},alphaMapTransform:{value:new C0},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new C0}},envmap:{envMap:{value:null},envMapRotation:{value:new C0},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new C0}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new C0}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new C0},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new C0},normalScale:{value:new L0(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new C0},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new C0}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new C0}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new C0}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Y0(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Y0(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new C0},alphaTest:{value:0},uvTransform:{value:new C0}},sprite:{diffuse:{value:new Y0(16777215)},opacity:{value:1},center:{value:new L0(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new C0},alphaMap:{value:null},alphaMapTransform:{value:new C0},alphaTest:{value:0}}},Vt={basic:{uniforms:gt([e0.common,e0.specularmap,e0.envmap,e0.aomap,e0.lightmap,e0.fog]),vertexShader:D0.meshbasic_vert,fragmentShader:D0.meshbasic_frag},lambert:{uniforms:gt([e0.common,e0.specularmap,e0.envmap,e0.aomap,e0.lightmap,e0.emissivemap,e0.bumpmap,e0.normalmap,e0.displacementmap,e0.fog,e0.lights,{emissive:{value:new Y0(0)}}]),vertexShader:D0.meshlambert_vert,fragmentShader:D0.meshlambert_frag},phong:{uniforms:gt([e0.common,e0.specularmap,e0.envmap,e0.aomap,e0.lightmap,e0.emissivemap,e0.bumpmap,e0.normalmap,e0.displacementmap,e0.fog,e0.lights,{emissive:{value:new Y0(0)},specular:{value:new Y0(1118481)},shininess:{value:30}}]),vertexShader:D0.meshphong_vert,fragmentShader:D0.meshphong_frag},standard:{uniforms:gt([e0.common,e0.envmap,e0.aomap,e0.lightmap,e0.emissivemap,e0.bumpmap,e0.normalmap,e0.displacementmap,e0.roughnessmap,e0.metalnessmap,e0.fog,e0.lights,{emissive:{value:new Y0(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:D0.meshphysical_vert,fragmentShader:D0.meshphysical_frag},toon:{uniforms:gt([e0.common,e0.aomap,e0.lightmap,e0.emissivemap,e0.bumpmap,e0.normalmap,e0.displacementmap,e0.gradientmap,e0.fog,e0.lights,{emissive:{value:new Y0(0)}}]),vertexShader:D0.meshtoon_vert,fragmentShader:D0.meshtoon_frag},matcap:{uniforms:gt([e0.common,e0.bumpmap,e0.normalmap,e0.displacementmap,e0.fog,{matcap:{value:null}}]),vertexShader:D0.meshmatcap_vert,fragmentShader:D0.meshmatcap_frag},points:{uniforms:gt([e0.points,e0.fog]),vertexShader:D0.points_vert,fragmentShader:D0.points_frag},dashed:{uniforms:gt([e0.common,e0.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:D0.linedashed_vert,fragmentShader:D0.linedashed_frag},depth:{uniforms:gt([e0.common,e0.displacementmap]),vertexShader:D0.depth_vert,fragmentShader:D0.depth_frag},normal:{uniforms:gt([e0.common,e0.bumpmap,e0.normalmap,e0.displacementmap,{opacity:{value:1}}]),vertexShader:D0.meshnormal_vert,fragmentShader:D0.meshnormal_frag},sprite:{uniforms:gt([e0.sprite,e0.fog]),vertexShader:D0.sprite_vert,fragmentShader:D0.sprite_frag},background:{uniforms:{uvTransform:{value:new C0},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:D0.background_vert,fragmentShader:D0.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new C0}},vertexShader:D0.backgroundCube_vert,fragmentShader:D0.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:D0.cube_vert,fragmentShader:D0.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:D0.equirect_vert,fragmentShader:D0.equirect_frag},distanceRGBA:{uniforms:gt([e0.common,e0.displacementmap,{referencePosition:{value:new N},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:D0.distanceRGBA_vert,fragmentShader:D0.distanceRGBA_frag},shadow:{uniforms:gt([e0.lights,e0.fog,{color:{value:new Y0(0)},opacity:{value:1}}]),vertexShader:D0.shadow_vert,fragmentShader:D0.shadow_frag}};Vt.physical={uniforms:gt([Vt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new C0},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new C0},clearcoatNormalScale:{value:new L0(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new C0},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new C0},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new C0},sheen:{value:0},sheenColor:{value:new Y0(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new C0},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new C0},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new C0},transmissionSamplerSize:{value:new L0},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new C0},attenuationDistance:{value:0},attenuationColor:{value:new Y0(0)},specularColor:{value:new Y0(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new C0},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new C0},anisotropyVector:{value:new L0},anisotropyMap:{value:null},anisotropyMapTransform:{value:new C0}}]),vertexShader:D0.meshphysical_vert,fragmentShader:D0.meshphysical_frag};const Z1={r:0,b:0,g:0},Te=new re,K2=new st;function j2(i,t,e,n,r,s,a){const o=new Y0(0);let l=s===!0?0:1,c,u,d=null,f=0,m=null;function v(T){let y=T.isScene===!0?T.background:null;return y&&y.isTexture&&(y=(T.backgroundBlurriness>0?e:t).get(y)),y}function M(T){let y=!1;const U=v(T);U===null?h(o,l):U&&U.isColor&&(h(U,1),y=!0);const R=i.xr.getEnvironmentBlendMode();R==="additive"?n.buffers.color.setClear(0,0,0,1,a):R==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,a),(i.autoClear||y)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil))}function p(T,y){const U=v(y);U&&(U.isCubeTexture||U.mapping===l8)?(u===void 0&&(u=new ee(new y1(1,1,1),new se({name:"BackgroundCubeMaterial",uniforms:c1(Vt.backgroundCube.uniforms),vertexShader:Vt.backgroundCube.vertexShader,fragmentShader:Vt.backgroundCube.fragmentShader,side:Et,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),u.geometry.deleteAttribute("uv"),u.onBeforeRender=function(R,P,I){this.matrixWorld.copyPosition(I.matrixWorld)},Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(u)),Te.copy(y.backgroundRotation),Te.x*=-1,Te.y*=-1,Te.z*=-1,U.isCubeTexture&&U.isRenderTargetTexture===!1&&(Te.y*=-1,Te.z*=-1),u.material.uniforms.envMap.value=U,u.material.uniforms.flipEnvMap.value=U.isCubeTexture&&U.isRenderTargetTexture===!1?-1:1,u.material.uniforms.backgroundBlurriness.value=y.backgroundBlurriness,u.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,u.material.uniforms.backgroundRotation.value.setFromMatrix4(K2.makeRotationFromEuler(Te)),u.material.toneMapped=G0.getTransfer(U.colorSpace)!==Z0,(d!==U||f!==U.version||m!==i.toneMapping)&&(u.material.needsUpdate=!0,d=U,f=U.version,m=i.toneMapping),u.layers.enableAll(),T.unshift(u,u.geometry,u.material,0,0,null)):U&&U.isTexture&&(c===void 0&&(c=new ee(new h8(2,2),new se({name:"BackgroundMaterial",uniforms:c1(Vt.background.uniforms),vertexShader:Vt.background.vertexShader,fragmentShader:Vt.background.fragmentShader,side:ge,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(c)),c.material.uniforms.t2D.value=U,c.material.uniforms.backgroundIntensity.value=y.backgroundIntensity,c.material.toneMapped=G0.getTransfer(U.colorSpace)!==Z0,U.matrixAutoUpdate===!0&&U.updateMatrix(),c.material.uniforms.uvTransform.value.copy(U.matrix),(d!==U||f!==U.version||m!==i.toneMapping)&&(c.material.needsUpdate=!0,d=U,f=U.version,m=i.toneMapping),c.layers.enableAll(),T.unshift(c,c.geometry,c.material,0,0,null))}function h(T,y){T.getRGB(Z1,Si(i)),n.buffers.color.setClear(Z1.r,Z1.g,Z1.b,y,a)}function A(){u!==void 0&&(u.geometry.dispose(),u.material.dispose(),u=void 0),c!==void 0&&(c.geometry.dispose(),c.material.dispose(),c=void 0)}return{getClearColor:function(){return o},setClearColor:function(T,y=1){o.set(T),l=y,h(o,l)},getClearAlpha:function(){return l},setClearAlpha:function(T){l=T,h(o,l)},render:M,addToRenderList:p,dispose:A}}function $2(i,t){const e=i.getParameter(i.MAX_VERTEX_ATTRIBS),n={},r=f(null);let s=r,a=!1;function o(x,w,Y,z,W){let j=!1;const G=d(z,Y,w);s!==G&&(s=G,c(s.object)),j=m(x,z,Y,W),j&&v(x,z,Y,W),W!==null&&t.update(W,i.ELEMENT_ARRAY_BUFFER),(j||a)&&(a=!1,y(x,w,Y,z),W!==null&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.get(W).buffer))}function l(){return i.createVertexArray()}function c(x){return i.bindVertexArray(x)}function u(x){return i.deleteVertexArray(x)}function d(x,w,Y){const z=Y.wireframe===!0;let W=n[x.id];W===void 0&&(W={},n[x.id]=W);let j=W[w.id];j===void 0&&(j={},W[w.id]=j);let G=j[z];return G===void 0&&(G=f(l()),j[z]=G),G}function f(x){const w=[],Y=[],z=[];for(let W=0;W<e;W++)w[W]=0,Y[W]=0,z[W]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:w,enabledAttributes:Y,attributeDivisors:z,object:x,attributes:{},index:null}}function m(x,w,Y,z){const W=s.attributes,j=w.attributes;let G=0;const Q=Y.getAttributes();for(const V in Q)if(Q[V].location>=0){const h0=W[V];let v0=j[V];if(v0===void 0&&(V==="instanceMatrix"&&x.instanceMatrix&&(v0=x.instanceMatrix),V==="instanceColor"&&x.instanceColor&&(v0=x.instanceColor)),h0===void 0||h0.attribute!==v0||v0&&h0.data!==v0.data)return!0;G++}return s.attributesNum!==G||s.index!==z}function v(x,w,Y,z){const W={},j=w.attributes;let G=0;const Q=Y.getAttributes();for(const V in Q)if(Q[V].location>=0){let h0=j[V];h0===void 0&&(V==="instanceMatrix"&&x.instanceMatrix&&(h0=x.instanceMatrix),V==="instanceColor"&&x.instanceColor&&(h0=x.instanceColor));const v0={};v0.attribute=h0,h0&&h0.data&&(v0.data=h0.data),W[V]=v0,G++}s.attributes=W,s.attributesNum=G,s.index=z}function M(){const x=s.newAttributes;for(let w=0,Y=x.length;w<Y;w++)x[w]=0}function p(x){h(x,0)}function h(x,w){const Y=s.newAttributes,z=s.enabledAttributes,W=s.attributeDivisors;Y[x]=1,z[x]===0&&(i.enableVertexAttribArray(x),z[x]=1),W[x]!==w&&(i.vertexAttribDivisor(x,w),W[x]=w)}function A(){const x=s.newAttributes,w=s.enabledAttributes;for(let Y=0,z=w.length;Y<z;Y++)w[Y]!==x[Y]&&(i.disableVertexAttribArray(Y),w[Y]=0)}function T(x,w,Y,z,W,j,G){G===!0?i.vertexAttribIPointer(x,w,Y,W,j):i.vertexAttribPointer(x,w,Y,z,W,j)}function y(x,w,Y,z){M();const W=z.attributes,j=Y.getAttributes(),G=w.defaultAttributeValues;for(const Q in j){const V=j[Q];if(V.location>=0){let r0=W[Q];if(r0===void 0&&(Q==="instanceMatrix"&&x.instanceMatrix&&(r0=x.instanceMatrix),Q==="instanceColor"&&x.instanceColor&&(r0=x.instanceColor)),r0!==void 0){const h0=r0.normalized,v0=r0.itemSize,U0=t.get(r0);if(U0===void 0)continue;const j0=U0.buffer,X=U0.type,t0=U0.bytesPerElement,m0=X===i.INT||X===i.UNSIGNED_INT||r0.gpuType===On;if(r0.isInterleavedBufferAttribute){const s0=r0.data,E0=s0.stride,k0=r0.offset;if(s0.isInstancedInterleavedBuffer){for(let T0=0;T0<V.locationSize;T0++)h(V.location+T0,s0.meshPerAttribute);x.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=s0.meshPerAttribute*s0.count)}else for(let T0=0;T0<V.locationSize;T0++)p(V.location+T0);i.bindBuffer(i.ARRAY_BUFFER,j0);for(let T0=0;T0<V.locationSize;T0++)T(V.location+T0,v0/V.locationSize,X,h0,E0*t0,(k0+v0/V.locationSize*T0)*t0,m0)}else{if(r0.isInstancedBufferAttribute){for(let s0=0;s0<V.locationSize;s0++)h(V.location+s0,r0.meshPerAttribute);x.isInstancedMesh!==!0&&z._maxInstanceCount===void 0&&(z._maxInstanceCount=r0.meshPerAttribute*r0.count)}else for(let s0=0;s0<V.locationSize;s0++)p(V.location+s0);i.bindBuffer(i.ARRAY_BUFFER,j0);for(let s0=0;s0<V.locationSize;s0++)T(V.location+s0,v0/V.locationSize,X,h0,v0*t0,v0/V.locationSize*s0*t0,m0)}}else if(G!==void 0){const h0=G[Q];if(h0!==void 0)switch(h0.length){case 2:i.vertexAttrib2fv(V.location,h0);break;case 3:i.vertexAttrib3fv(V.location,h0);break;case 4:i.vertexAttrib4fv(V.location,h0);break;default:i.vertexAttrib1fv(V.location,h0)}}}}A()}function U(){I();for(const x in n){const w=n[x];for(const Y in w){const z=w[Y];for(const W in z)u(z[W].object),delete z[W];delete w[Y]}delete n[x]}}function R(x){if(n[x.id]===void 0)return;const w=n[x.id];for(const Y in w){const z=w[Y];for(const W in z)u(z[W].object),delete z[W];delete w[Y]}delete n[x.id]}function P(x){for(const w in n){const Y=n[w];if(Y[x.id]===void 0)continue;const z=Y[x.id];for(const W in z)u(z[W].object),delete z[W];delete Y[x.id]}}function I(){S(),a=!0,s!==r&&(s=r,c(s.object))}function S(){r.geometry=null,r.program=null,r.wireframe=!1}return{setup:o,reset:I,resetDefaultState:S,dispose:U,releaseStatesOfGeometry:R,releaseStatesOfProgram:P,initAttributes:M,enableAttribute:p,disableUnusedAttributes:A}}function J2(i,t,e){let n;function r(c){n=c}function s(c,u){i.drawArrays(n,c,u),e.update(u,n,1)}function a(c,u,d){d!==0&&(i.drawArraysInstanced(n,c,u,d),e.update(u,n,d))}function o(c,u,d){if(d===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,c,0,u,0,d);let m=0;for(let v=0;v<d;v++)m+=u[v];e.update(m,n,1)}function l(c,u,d,f){if(d===0)return;const m=t.get("WEBGL_multi_draw");if(m===null)for(let v=0;v<c.length;v++)a(c[v],u[v],f[v]);else{m.multiDrawArraysInstancedWEBGL(n,c,0,u,0,f,0,d);let v=0;for(let M=0;M<d;M++)v+=u[M]*f[M];e.update(v,n,1)}}this.setMode=r,this.render=s,this.renderInstances=a,this.renderMultiDraw=o,this.renderMultiDrawInstances=l}function Q2(i,t,e,n){let r;function s(){if(r!==void 0)return r;if(t.has("EXT_texture_filter_anisotropic")===!0){const P=t.get("EXT_texture_filter_anisotropic");r=i.getParameter(P.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r}function a(P){return!(P!==zt&&n.convert(P)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_FORMAT))}function o(P){const I=P===x1&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(P!==ie&&n.convert(P)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_TYPE)&&P!==Qt&&!I)}function l(P){if(P==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0)return"highp";P="mediump"}return P==="mediump"&&i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=e.precision!==void 0?e.precision:"highp";const u=l(c);u!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",u,"instead."),c=u);const d=e.logarithmicDepthBuffer===!0,f=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control"),m=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS),v=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS),M=i.getParameter(i.MAX_TEXTURE_SIZE),p=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE),h=i.getParameter(i.MAX_VERTEX_ATTRIBS),A=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS),T=i.getParameter(i.MAX_VARYING_VECTORS),y=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS),U=v>0,R=i.getParameter(i.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:a,textureTypeReadable:o,precision:c,logarithmicDepthBuffer:d,reverseDepthBuffer:f,maxTextures:m,maxVertexTextures:v,maxTextureSize:M,maxCubemapSize:p,maxAttributes:h,maxVertexUniforms:A,maxVaryings:T,maxFragmentUniforms:y,vertexTextures:U,maxSamples:R}}function t3(i){const t=this;let e=null,n=0,r=!1,s=!1;const a=new fe,o=new C0,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(d,f){const m=d.length!==0||f||n!==0||r;return r=f,n=d.length,m},this.beginShadows=function(){s=!0,u(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(d,f){e=u(d,f,0)},this.setState=function(d,f,m){const v=d.clippingPlanes,M=d.clipIntersection,p=d.clipShadows,h=i.get(d);if(!r||v===null||v.length===0||s&&!p)s?u(null):c();else{const A=s?0:n,T=A*4;let y=h.clippingState||null;l.value=y,y=u(v,f,T,m);for(let U=0;U!==T;++U)y[U]=e[U];h.clippingState=y,this.numIntersection=M?this.numPlanes:0,this.numPlanes+=A}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function u(d,f,m,v){const M=d!==null?d.length:0;let p=null;if(M!==0){if(p=l.value,v!==!0||p===null){const h=m+M*4,A=f.matrixWorldInverse;o.getNormalMatrix(A),(p===null||p.length<h)&&(p=new Float32Array(h));for(let T=0,y=m;T!==M;++T,y+=4)a.copy(d[T]).applyMatrix4(A,o),a.normal.toArray(p,y),p[y+3]=a.constant}l.value=p,l.needsUpdate=!0}return t.numPlanes=M,t.numIntersection=0,p}}function e3(i){let t=new WeakMap;function e(a,o){return o===nn?a.mapping=r1:o===rn&&(a.mapping=s1),a}function n(a){if(a&&a.isTexture){const o=a.mapping;if(o===nn||o===rn)if(t.has(a)){const l=t.get(a).texture;return e(l,a.mapping)}else{const l=a.image;if(l&&l.height>0){const c=new n5(l.height);return c.fromEquirectangularTexture(i,a),t.set(a,c),a.addEventListener("dispose",r),e(c.texture,a.mapping)}else return null}}return a}function r(a){const o=a.target;o.removeEventListener("dispose",r);const l=t.get(o);l!==void 0&&(t.delete(o),l.dispose())}function s(){t=new WeakMap}return{get:n,dispose:s}}const Je=4,w7=[.125,.215,.35,.446,.526,.582],Ce=20,B8=new u5,C7=new Y0;let z8=null,H8=0,V8=0,G8=!1;const Re=(1+Math.sqrt(5))/2,je=1/Re,P7=[new N(-Re,je,0),new N(Re,je,0),new N(-je,0,Re),new N(je,0,Re),new N(0,Re,-je),new N(0,Re,je),new N(-1,1,-1),new N(1,1,-1),new N(-1,1,1),new N(1,1,1)],n3=new N;class D7{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,r=100,s={}){const{size:a=256,position:o=n3}=s;z8=this._renderer.getRenderTarget(),H8=this._renderer.getActiveCubeFace(),V8=this._renderer.getActiveMipmapLevel(),G8=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(a);const l=this._allocateTargets();return l.depthBuffer=!0,this._sceneToCubeUV(t,n,r,l,o),e>0&&this._blur(l,0,0,e),this._applyPMREM(l),this._cleanup(l),l}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=I7(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=U7(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(z8,H8,V8),this._renderer.xr.enabled=G8,t.scissorTest=!1,K1(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===r1||t.mapping===s1?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),z8=this._renderer.getRenderTarget(),H8=this._renderer.getActiveCubeFace(),V8=this._renderer.getActiveMipmapLevel(),G8=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:Gt,minFilter:Gt,generateMipmaps:!1,type:x1,format:zt,colorSpace:l1,depthBuffer:!1},r=L7(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=L7(t,e,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=i3(s)),this._blurMaterial=r3(s,t,e)}return r}_compileMaterial(t){const e=new ee(this._lodPlanes[0],t);this._renderer.compile(e,B8)}_sceneToCubeUV(t,e,n,r,s){const l=new Lt(90,1,e,n),c=[1,-1,1,1,1,1],u=[1,1,1,-1,-1,-1],d=this._renderer,f=d.autoClear,m=d.toneMapping;d.getClearColor(C7),d.toneMapping=_e,d.autoClear=!1;const v=new vi({name:"PMREM.Background",side:Et,depthWrite:!1,depthTest:!1}),M=new ee(new y1,v);let p=!1;const h=t.background;h?h.isColor&&(v.color.copy(h),t.background=null,p=!0):(v.color.copy(C7),p=!0);for(let A=0;A<6;A++){const T=A%3;T===0?(l.up.set(0,c[A],0),l.position.set(s.x,s.y,s.z),l.lookAt(s.x+u[A],s.y,s.z)):T===1?(l.up.set(0,0,c[A]),l.position.set(s.x,s.y,s.z),l.lookAt(s.x,s.y+u[A],s.z)):(l.up.set(0,c[A],0),l.position.set(s.x,s.y,s.z),l.lookAt(s.x,s.y,s.z+u[A]));const y=this._cubeSize;K1(r,T*y,A>2?y:0,y,y),d.setRenderTarget(r),p&&d.render(M,l),d.render(t,l)}M.geometry.dispose(),M.material.dispose(),d.toneMapping=m,d.autoClear=f,t.background=h}_textureToCubeUV(t,e){const n=this._renderer,r=t.mapping===r1||t.mapping===s1;r?(this._cubemapMaterial===null&&(this._cubemapMaterial=I7()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=U7());const s=r?this._cubemapMaterial:this._equirectMaterial,a=new ee(this._lodPlanes[0],s),o=s.uniforms;o.envMap.value=t;const l=this._cubeSize;K1(e,0,0,3*l,2*l),n.setRenderTarget(e),n.render(a,B8)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const r=this._lodPlanes.length;for(let s=1;s<r;s++){const a=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),o=P7[(r-s-1)%P7.length];this._blur(t,s-1,s,a,o)}e.autoClear=n}_blur(t,e,n,r,s){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,r,"latitudinal",s),this._halfBlur(a,t,n,n,r,"longitudinal",s)}_halfBlur(t,e,n,r,s,a,o){const l=this._renderer,c=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const u=3,d=new ee(this._lodPlanes[r],c),f=c.uniforms,m=this._sizeLods[n]-1,v=isFinite(s)?Math.PI/(2*m):2*Math.PI/(2*Ce-1),M=s/v,p=isFinite(s)?1+Math.floor(u*M):Ce;p>Ce&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${Ce}`);const h=[];let A=0;for(let P=0;P<Ce;++P){const I=P/M,S=Math.exp(-I*I/2);h.push(S),P===0?A+=S:P<p&&(A+=2*S)}for(let P=0;P<h.length;P++)h[P]=h[P]/A;f.envMap.value=t.texture,f.samples.value=p,f.weights.value=h,f.latitudinal.value=a==="latitudinal",o&&(f.poleAxis.value=o);const{_lodMax:T}=this;f.dTheta.value=v,f.mipInt.value=T-n;const y=this._sizeLods[r],U=3*y*(r>T-Je?r-T+Je:0),R=4*(this._cubeSize-y);K1(e,U,R,3*y,2*y),l.setRenderTarget(e),l.render(d,B8)}}function i3(i){const t=[],e=[],n=[];let r=i;const s=i-Je+1+w7.length;for(let a=0;a<s;a++){const o=Math.pow(2,r);e.push(o);let l=1/o;a>i-Je?l=w7[a-i+Je-1]:a===0&&(l=0),n.push(l);const c=1/(o-2),u=-c,d=1+c,f=[u,u,d,u,d,d,u,u,d,d,u,d],m=6,v=6,M=3,p=2,h=1,A=new Float32Array(M*v*m),T=new Float32Array(p*v*m),y=new Float32Array(h*v*m);for(let R=0;R<m;R++){const P=R%3*2/3-1,I=R>2?0:-1,S=[P,I,0,P+2/3,I,0,P+2/3,I+1,0,P,I,0,P+2/3,I+1,0,P,I+1,0];A.set(S,M*v*R),T.set(f,p*v*R);const x=[R,R,R,R,R,R];y.set(x,h*v*R)}const U=new ae;U.setAttribute("position",new kt(A,M)),U.setAttribute("uv",new kt(T,p)),U.setAttribute("faceIndex",new kt(y,h)),t.push(U),r>Je&&r--}return{lodPlanes:t,sizeLods:e,sigmas:n}}function L7(i,t,e){const n=new Ue(i,t,e);return n.texture.mapping=l8,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function K1(i,t,e,n,r){i.viewport.set(t,e,n,r),i.scissor.set(t,e,n,r)}function r3(i,t,e){const n=new Float32Array(Ce),r=new N(0,1,0);return new se({name:"SphericalGaussianBlur",defines:{n:Ce,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${i}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:Yn(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:me,depthTest:!1,depthWrite:!1})}function U7(){return new se({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Yn(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:me,depthTest:!1,depthWrite:!1})}function I7(){return new se({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Yn(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:me,depthTest:!1,depthWrite:!1})}function Yn(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function s3(i){let t=new WeakMap,e=null;function n(o){if(o&&o.isTexture){const l=o.mapping,c=l===nn||l===rn,u=l===r1||l===s1;if(c||u){let d=t.get(o);const f=d!==void 0?d.texture.pmremVersion:0;if(o.isRenderTargetTexture&&o.pmremVersion!==f)return e===null&&(e=new D7(i)),d=c?e.fromEquirectangular(o,d):e.fromCubemap(o,d),d.texture.pmremVersion=o.pmremVersion,t.set(o,d),d.texture;if(d!==void 0)return d.texture;{const m=o.image;return c&&m&&m.height>0||u&&m&&r(m)?(e===null&&(e=new D7(i)),d=c?e.fromEquirectangular(o):e.fromCubemap(o),d.texture.pmremVersion=o.pmremVersion,t.set(o,d),o.addEventListener("dispose",s),d.texture):null}}}return o}function r(o){let l=0;const c=6;for(let u=0;u<c;u++)o[u]!==void 0&&l++;return l===c}function s(o){const l=o.target;l.removeEventListener("dispose",s);const c=t.get(l);c!==void 0&&(t.delete(l),c.dispose())}function a(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:n,dispose:a}}function a3(i){const t={};function e(n){if(t[n]!==void 0)return t[n];let r;switch(n){case"WEBGL_depth_texture":r=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=i.getExtension(n)}return t[n]=r,r}return{has:function(n){return e(n)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(n){const r=e(n);return r===null&&Ae("THREE.WebGLRenderer: "+n+" extension not supported."),r}}}function o3(i,t,e,n){const r={},s=new WeakMap;function a(d){const f=d.target;f.index!==null&&t.remove(f.index);for(const v in f.attributes)t.remove(f.attributes[v]);f.removeEventListener("dispose",a),delete r[f.id];const m=s.get(f);m&&(t.remove(m),s.delete(f)),n.releaseStatesOfGeometry(f),f.isInstancedBufferGeometry===!0&&delete f._maxInstanceCount,e.memory.geometries--}function o(d,f){return r[f.id]===!0||(f.addEventListener("dispose",a),r[f.id]=!0,e.memory.geometries++),f}function l(d){const f=d.attributes;for(const m in f)t.update(f[m],i.ARRAY_BUFFER)}function c(d){const f=[],m=d.index,v=d.attributes.position;let M=0;if(m!==null){const A=m.array;M=m.version;for(let T=0,y=A.length;T<y;T+=3){const U=A[T+0],R=A[T+1],P=A[T+2];f.push(U,R,R,P,P,U)}}else if(v!==void 0){const A=v.array;M=v.version;for(let T=0,y=A.length/3-1;T<y;T+=3){const U=T+0,R=T+1,P=T+2;f.push(U,R,R,P,P,U)}}else return;const p=new(pi(f)?Mi:xi)(f,1);p.version=M;const h=s.get(d);h&&t.remove(h),s.set(d,p)}function u(d){const f=s.get(d);if(f){const m=d.index;m!==null&&f.version<m.version&&c(d)}else c(d);return s.get(d)}return{get:o,update:l,getWireframeAttribute:u}}function l3(i,t,e){let n;function r(f){n=f}let s,a;function o(f){s=f.type,a=f.bytesPerElement}function l(f,m){i.drawElements(n,m,s,f*a),e.update(m,n,1)}function c(f,m,v){v!==0&&(i.drawElementsInstanced(n,m,s,f*a,v),e.update(m,n,v))}function u(f,m,v){if(v===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,m,0,s,f,0,v);let p=0;for(let h=0;h<v;h++)p+=m[h];e.update(p,n,1)}function d(f,m,v,M){if(v===0)return;const p=t.get("WEBGL_multi_draw");if(p===null)for(let h=0;h<f.length;h++)c(f[h]/a,m[h],M[h]);else{p.multiDrawElementsInstancedWEBGL(n,m,0,s,f,0,M,0,v);let h=0;for(let A=0;A<v;A++)h+=m[A]*M[A];e.update(h,n,1)}}this.setMode=r,this.setIndex=o,this.render=l,this.renderInstances=c,this.renderMultiDraw=u,this.renderMultiDrawInstances=d}function c3(i){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,a,o){switch(e.calls++,a){case i.TRIANGLES:e.triangles+=o*(s/3);break;case i.LINES:e.lines+=o*(s/2);break;case i.LINE_STRIP:e.lines+=o*(s-1);break;case i.LINE_LOOP:e.lines+=o*s;break;case i.POINTS:e.points+=o*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function r(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:r,update:n}}function h3(i,t,e){const n=new WeakMap,r=new rt;function s(a,o,l){const c=a.morphTargetInfluences,u=o.morphAttributes.position||o.morphAttributes.normal||o.morphAttributes.color,d=u!==void 0?u.length:0;let f=n.get(o);if(f===void 0||f.count!==d){let S=function(){P.dispose(),n.delete(o),o.removeEventListener("dispose",S)};f!==void 0&&f.texture.dispose();const m=o.morphAttributes.position!==void 0,v=o.morphAttributes.normal!==void 0,M=o.morphAttributes.color!==void 0,p=o.morphAttributes.position||[],h=o.morphAttributes.normal||[],A=o.morphAttributes.color||[];let T=0;m===!0&&(T=1),v===!0&&(T=2),M===!0&&(T=3);let y=o.attributes.position.count*T,U=1;y>t.maxTextureSize&&(U=Math.ceil(y/t.maxTextureSize),y=t.maxTextureSize);const R=new Float32Array(y*U*4*d),P=new mi(R,y,U,d);P.type=Qt,P.needsUpdate=!0;const I=T*4;for(let x=0;x<d;x++){const w=p[x],Y=h[x],z=A[x],W=y*U*4*x;for(let j=0;j<w.count;j++){const G=j*I;m===!0&&(r.fromBufferAttribute(w,j),R[W+G+0]=r.x,R[W+G+1]=r.y,R[W+G+2]=r.z,R[W+G+3]=0),v===!0&&(r.fromBufferAttribute(Y,j),R[W+G+4]=r.x,R[W+G+5]=r.y,R[W+G+6]=r.z,R[W+G+7]=0),M===!0&&(r.fromBufferAttribute(z,j),R[W+G+8]=r.x,R[W+G+9]=r.y,R[W+G+10]=r.z,R[W+G+11]=z.itemSize===4?r.w:1)}}f={count:d,texture:P,size:new L0(y,U)},n.set(o,f),o.addEventListener("dispose",S)}if(a.isInstancedMesh===!0&&a.morphTexture!==null)l.getUniforms().setValue(i,"morphTexture",a.morphTexture,e);else{let m=0;for(let M=0;M<c.length;M++)m+=c[M];const v=o.morphTargetsRelative?1:1-m;l.getUniforms().setValue(i,"morphTargetBaseInfluence",v),l.getUniforms().setValue(i,"morphTargetInfluences",c)}l.getUniforms().setValue(i,"morphTargetsTexture",f.texture,e),l.getUniforms().setValue(i,"morphTargetsTextureSize",f.size)}return{update:s}}function u3(i,t,e,n){let r=new WeakMap;function s(l){const c=n.render.frame,u=l.geometry,d=t.get(l,u);if(r.get(d)!==c&&(t.update(d),r.set(d,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),r.get(l)!==c&&(e.update(l.instanceMatrix,i.ARRAY_BUFFER),l.instanceColor!==null&&e.update(l.instanceColor,i.ARRAY_BUFFER),r.set(l,c))),l.isSkinnedMesh){const f=l.skeleton;r.get(f)!==c&&(f.update(),r.set(f,c))}return d}function a(){r=new WeakMap}function o(l){const c=l.target;c.removeEventListener("dispose",o),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:s,dispose:a}}const Ri=new yt,N7=new bi(1,1),wi=new mi,Ci=new z9,Pi=new yi,F7=[],O7=[],B7=new Float32Array(16),z7=new Float32Array(9),H7=new Float32Array(4);function h1(i,t,e){const n=i[0];if(n<=0||n>0)return i;const r=t*e;let s=F7[r];if(s===void 0&&(s=new Float32Array(r),F7[r]=s),t!==0){n.toArray(s,0);for(let a=1,o=0;a!==t;++a)o+=e,i[a].toArray(s,o)}return s}function ct(i,t){if(i.length!==t.length)return!1;for(let e=0,n=i.length;e<n;e++)if(i[e]!==t[e])return!1;return!0}function ht(i,t){for(let e=0,n=t.length;e<n;e++)i[e]=t[e]}function u8(i,t){let e=O7[t];e===void 0&&(e=new Int32Array(t),O7[t]=e);for(let n=0;n!==t;++n)e[n]=i.allocateTextureUnit();return e}function d3(i,t){const e=this.cache;e[0]!==t&&(i.uniform1f(this.addr,t),e[0]=t)}function f3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(i.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(ct(e,t))return;i.uniform2fv(this.addr,t),ht(e,t)}}function p3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(i.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(i.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(ct(e,t))return;i.uniform3fv(this.addr,t),ht(e,t)}}function m3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(i.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(ct(e,t))return;i.uniform4fv(this.addr,t),ht(e,t)}}function _3(i,t){const e=this.cache,n=t.elements;if(n===void 0){if(ct(e,t))return;i.uniformMatrix2fv(this.addr,!1,t),ht(e,t)}else{if(ct(e,n))return;H7.set(n),i.uniformMatrix2fv(this.addr,!1,H7),ht(e,n)}}function g3(i,t){const e=this.cache,n=t.elements;if(n===void 0){if(ct(e,t))return;i.uniformMatrix3fv(this.addr,!1,t),ht(e,t)}else{if(ct(e,n))return;z7.set(n),i.uniformMatrix3fv(this.addr,!1,z7),ht(e,n)}}function v3(i,t){const e=this.cache,n=t.elements;if(n===void 0){if(ct(e,t))return;i.uniformMatrix4fv(this.addr,!1,t),ht(e,t)}else{if(ct(e,n))return;B7.set(n),i.uniformMatrix4fv(this.addr,!1,B7),ht(e,n)}}function x3(i,t){const e=this.cache;e[0]!==t&&(i.uniform1i(this.addr,t),e[0]=t)}function M3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(i.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(ct(e,t))return;i.uniform2iv(this.addr,t),ht(e,t)}}function S3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(i.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(ct(e,t))return;i.uniform3iv(this.addr,t),ht(e,t)}}function E3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(i.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(ct(e,t))return;i.uniform4iv(this.addr,t),ht(e,t)}}function y3(i,t){const e=this.cache;e[0]!==t&&(i.uniform1ui(this.addr,t),e[0]=t)}function T3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(i.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(ct(e,t))return;i.uniform2uiv(this.addr,t),ht(e,t)}}function b3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(i.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(ct(e,t))return;i.uniform3uiv(this.addr,t),ht(e,t)}}function A3(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(i.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(ct(e,t))return;i.uniform4uiv(this.addr,t),ht(e,t)}}function R3(i,t,e){const n=this.cache,r=e.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r);let s;this.type===i.SAMPLER_2D_SHADOW?(N7.compareFunction=fi,s=N7):s=Ri,e.setTexture2D(t||s,r)}function w3(i,t,e){const n=this.cache,r=e.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r),e.setTexture3D(t||Ci,r)}function C3(i,t,e){const n=this.cache,r=e.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r),e.setTextureCube(t||Pi,r)}function P3(i,t,e){const n=this.cache,r=e.allocateTextureUnit();n[0]!==r&&(i.uniform1i(this.addr,r),n[0]=r),e.setTexture2DArray(t||wi,r)}function D3(i){switch(i){case 5126:return d3;case 35664:return f3;case 35665:return p3;case 35666:return m3;case 35674:return _3;case 35675:return g3;case 35676:return v3;case 5124:case 35670:return x3;case 35667:case 35671:return M3;case 35668:case 35672:return S3;case 35669:case 35673:return E3;case 5125:return y3;case 36294:return T3;case 36295:return b3;case 36296:return A3;case 35678:case 36198:case 36298:case 36306:case 35682:return R3;case 35679:case 36299:case 36307:return w3;case 35680:case 36300:case 36308:case 36293:return C3;case 36289:case 36303:case 36311:case 36292:return P3}}function L3(i,t){i.uniform1fv(this.addr,t)}function U3(i,t){const e=h1(t,this.size,2);i.uniform2fv(this.addr,e)}function I3(i,t){const e=h1(t,this.size,3);i.uniform3fv(this.addr,e)}function N3(i,t){const e=h1(t,this.size,4);i.uniform4fv(this.addr,e)}function F3(i,t){const e=h1(t,this.size,4);i.uniformMatrix2fv(this.addr,!1,e)}function O3(i,t){const e=h1(t,this.size,9);i.uniformMatrix3fv(this.addr,!1,e)}function B3(i,t){const e=h1(t,this.size,16);i.uniformMatrix4fv(this.addr,!1,e)}function z3(i,t){i.uniform1iv(this.addr,t)}function H3(i,t){i.uniform2iv(this.addr,t)}function V3(i,t){i.uniform3iv(this.addr,t)}function G3(i,t){i.uniform4iv(this.addr,t)}function k3(i,t){i.uniform1uiv(this.addr,t)}function W3(i,t){i.uniform2uiv(this.addr,t)}function X3(i,t){i.uniform3uiv(this.addr,t)}function Y3(i,t){i.uniform4uiv(this.addr,t)}function q3(i,t,e){const n=this.cache,r=t.length,s=u8(e,r);ct(n,s)||(i.uniform1iv(this.addr,s),ht(n,s));for(let a=0;a!==r;++a)e.setTexture2D(t[a]||Ri,s[a])}function Z3(i,t,e){const n=this.cache,r=t.length,s=u8(e,r);ct(n,s)||(i.uniform1iv(this.addr,s),ht(n,s));for(let a=0;a!==r;++a)e.setTexture3D(t[a]||Ci,s[a])}function K3(i,t,e){const n=this.cache,r=t.length,s=u8(e,r);ct(n,s)||(i.uniform1iv(this.addr,s),ht(n,s));for(let a=0;a!==r;++a)e.setTextureCube(t[a]||Pi,s[a])}function j3(i,t,e){const n=this.cache,r=t.length,s=u8(e,r);ct(n,s)||(i.uniform1iv(this.addr,s),ht(n,s));for(let a=0;a!==r;++a)e.setTexture2DArray(t[a]||wi,s[a])}function $3(i){switch(i){case 5126:return L3;case 35664:return U3;case 35665:return I3;case 35666:return N3;case 35674:return F3;case 35675:return O3;case 35676:return B3;case 5124:case 35670:return z3;case 35667:case 35671:return H3;case 35668:case 35672:return V3;case 35669:case 35673:return G3;case 5125:return k3;case 36294:return W3;case 36295:return X3;case 36296:return Y3;case 35678:case 36198:case 36298:case 36306:case 35682:return q3;case 35679:case 36299:case 36307:return Z3;case 35680:case 36300:case 36308:case 36293:return K3;case 36289:case 36303:case 36311:case 36292:return j3}}class J3{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=D3(e.type)}}class Q3{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=$3(e.type)}}class t4{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const r=this.seq;for(let s=0,a=r.length;s!==a;++s){const o=r[s];o.setValue(t,e[o.id],n)}}}const k8=/(\w+)(\])?(\[|\.)?/g;function V7(i,t){i.seq.push(t),i.map[t.id]=t}function e4(i,t,e){const n=i.name,r=n.length;for(k8.lastIndex=0;;){const s=k8.exec(n),a=k8.lastIndex;let o=s[1];const l=s[2]==="]",c=s[3];if(l&&(o=o|0),c===void 0||c==="["&&a+2===r){V7(e,c===void 0?new J3(o,i,t):new Q3(o,i,t));break}else{let d=e.map[o];d===void 0&&(d=new t4(o),V7(e,d)),e=d}}}class r8{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let r=0;r<n;++r){const s=t.getActiveUniform(e,r),a=t.getUniformLocation(e,s.name);e4(s,a,this)}}setValue(t,e,n,r){const s=this.map[e];s!==void 0&&s.setValue(t,n,r)}setOptional(t,e,n){const r=e[n];r!==void 0&&this.setValue(t,n,r)}static upload(t,e,n,r){for(let s=0,a=e.length;s!==a;++s){const o=e[s],l=n[o.id];l.needsUpdate!==!1&&o.setValue(t,l.value,r)}}static seqWithValue(t,e){const n=[];for(let r=0,s=t.length;r!==s;++r){const a=t[r];a.id in e&&n.push(a)}return n}}function G7(i,t,e){const n=i.createShader(t);return i.shaderSource(n,e),i.compileShader(n),n}const n4=37297;let i4=0;function r4(i,t){const e=i.split(`
`),n=[],r=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let a=r;a<s;a++){const o=a+1;n.push(`${o===t?">":" "} ${o}: ${e[a]}`)}return n.join(`
`)}const k7=new C0;function s4(i){G0._getMatrix(k7,G0.workingColorSpace,i);const t=`mat3( ${k7.elements.map(e=>e.toFixed(4))} )`;switch(G0.getTransfer(i)){case s8:return[t,"LinearTransferOETF"];case Z0:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",i),[t,"LinearTransferOETF"]}}function W7(i,t,e){const n=i.getShaderParameter(t,i.COMPILE_STATUS),r=i.getShaderInfoLog(t).trim();if(n&&r==="")return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const a=parseInt(s[1]);return e.toUpperCase()+`

`+r+`

`+r4(i.getShaderSource(t),a)}else return r}function a4(i,t){const e=s4(t);return[`vec4 ${i}( vec4 value ) {`,`	return ${e[1]}( vec4( value.rgb * ${e[0]}, value.a ) );`,"}"].join(`
`)}function o4(i,t){let e;switch(t){case c9:e="Linear";break;case h9:e="Reinhard";break;case u9:e="Cineon";break;case d9:e="ACESFilmic";break;case p9:e="AgX";break;case m9:e="Neutral";break;case f9:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+i+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const j1=new N;function l4(){G0.getLuminanceCoefficients(j1);const i=j1.x.toFixed(4),t=j1.y.toFixed(4),e=j1.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${i}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function c4(i){return[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",i.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(g1).join(`
`)}function h4(i){const t=[];for(const e in i){const n=i[e];n!==!1&&t.push("#define "+e+" "+n)}return t.join(`
`)}function u4(i,t){const e={},n=i.getProgramParameter(t,i.ACTIVE_ATTRIBUTES);for(let r=0;r<n;r++){const s=i.getActiveAttrib(t,r),a=s.name;let o=1;s.type===i.FLOAT_MAT2&&(o=2),s.type===i.FLOAT_MAT3&&(o=3),s.type===i.FLOAT_MAT4&&(o=4),e[a]={type:s.type,location:i.getAttribLocation(t,a),locationSize:o}}return e}function g1(i){return i!==""}function X7(i,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Y7(i,t){return i.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const d4=/^[ \t]*#include +<([\w\d./]+)>/gm;function Nn(i){return i.replace(d4,p4)}const f4=new Map;function p4(i,t){let e=D0[t];if(e===void 0){const n=f4.get(t);if(n!==void 0)e=D0[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,n);else throw new Error("Can not resolve #include <"+t+">")}return Nn(e)}const m4=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function q7(i){return i.replace(m4,_4)}function _4(i,t,e,n){let r="";for(let s=parseInt(t);s<parseInt(e);s++)r+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return r}function Z7(i){let t=`precision ${i.precision} float;
	precision ${i.precision} int;
	precision ${i.precision} sampler2D;
	precision ${i.precision} samplerCube;
	precision ${i.precision} sampler3D;
	precision ${i.precision} sampler2DArray;
	precision ${i.precision} sampler2DShadow;
	precision ${i.precision} samplerCubeShadow;
	precision ${i.precision} sampler2DArrayShadow;
	precision ${i.precision} isampler2D;
	precision ${i.precision} isampler3D;
	precision ${i.precision} isamplerCube;
	precision ${i.precision} isampler2DArray;
	precision ${i.precision} usampler2D;
	precision ${i.precision} usampler3D;
	precision ${i.precision} usamplerCube;
	precision ${i.precision} usampler2DArray;
	`;return i.precision==="highp"?t+=`
#define HIGH_PRECISION`:i.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:i.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function g4(i){let t="SHADOWMAP_TYPE_BASIC";return i.shadowMapType===ti?t="SHADOWMAP_TYPE_PCF":i.shadowMapType===Gi?t="SHADOWMAP_TYPE_PCF_SOFT":i.shadowMapType===$t&&(t="SHADOWMAP_TYPE_VSM"),t}function v4(i){let t="ENVMAP_TYPE_CUBE";if(i.envMap)switch(i.envMapMode){case r1:case s1:t="ENVMAP_TYPE_CUBE";break;case l8:t="ENVMAP_TYPE_CUBE_UV";break}return t}function x4(i){let t="ENVMAP_MODE_REFLECTION";if(i.envMap)switch(i.envMapMode){case s1:t="ENVMAP_MODE_REFRACTION";break}return t}function M4(i){let t="ENVMAP_BLENDING_NONE";if(i.envMap)switch(i.combine){case ei:t="ENVMAP_BLENDING_MULTIPLY";break;case o9:t="ENVMAP_BLENDING_MIX";break;case l9:t="ENVMAP_BLENDING_ADD";break}return t}function S4(i){const t=i.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:n,maxMip:e}}function E4(i,t,e,n){const r=i.getContext(),s=e.defines;let a=e.vertexShader,o=e.fragmentShader;const l=g4(e),c=v4(e),u=x4(e),d=M4(e),f=S4(e),m=c4(e),v=h4(s),M=r.createProgram();let p,h,A=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(p=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v].filter(g1).join(`
`),p.length>0&&(p+=`
`),h=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v].filter(g1).join(`
`),h.length>0&&(h+=`
`)):(p=[Z7(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+u:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(g1).join(`
`),h=[Z7(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,v,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+u:"",e.envMap?"#define "+d:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==_e?"#define TONE_MAPPING":"",e.toneMapping!==_e?D0.tonemapping_pars_fragment:"",e.toneMapping!==_e?o4("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",D0.colorspace_pars_fragment,a4("linearToOutputTexel",e.outputColorSpace),l4(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(g1).join(`
`)),a=Nn(a),a=X7(a,e),a=Y7(a,e),o=Nn(o),o=X7(o,e),o=Y7(o,e),a=q7(a),o=q7(o),e.isRawShaderMaterial!==!0&&(A=`#version 300 es
`,p=[m,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+p,h=["#define varying in",e.glslVersion===a7?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===a7?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+h);const T=A+p+a,y=A+h+o,U=G7(r,r.VERTEX_SHADER,T),R=G7(r,r.FRAGMENT_SHADER,y);r.attachShader(M,U),r.attachShader(M,R),e.index0AttributeName!==void 0?r.bindAttribLocation(M,0,e.index0AttributeName):e.morphTargets===!0&&r.bindAttribLocation(M,0,"position"),r.linkProgram(M);function P(w){if(i.debug.checkShaderErrors){const Y=r.getProgramInfoLog(M).trim(),z=r.getShaderInfoLog(U).trim(),W=r.getShaderInfoLog(R).trim();let j=!0,G=!0;if(r.getProgramParameter(M,r.LINK_STATUS)===!1)if(j=!1,typeof i.debug.onShaderError=="function")i.debug.onShaderError(r,M,U,R);else{const Q=W7(r,U,"vertex"),V=W7(r,R,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(M,r.VALIDATE_STATUS)+`

Material Name: `+w.name+`
Material Type: `+w.type+`

Program Info Log: `+Y+`
`+Q+`
`+V)}else Y!==""?console.warn("THREE.WebGLProgram: Program Info Log:",Y):(z===""||W==="")&&(G=!1);G&&(w.diagnostics={runnable:j,programLog:Y,vertexShader:{log:z,prefix:p},fragmentShader:{log:W,prefix:h}})}r.deleteShader(U),r.deleteShader(R),I=new r8(r,M),S=u4(r,M)}let I;this.getUniforms=function(){return I===void 0&&P(this),I};let S;this.getAttributes=function(){return S===void 0&&P(this),S};let x=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return x===!1&&(x=r.getProgramParameter(M,n4)),x},this.destroy=function(){n.releaseStatesOfProgram(this),r.deleteProgram(M),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=i4++,this.cacheKey=t,this.usedTimes=1,this.program=M,this.vertexShader=U,this.fragmentShader=R,this}let y4=0;class T4{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,r=this._getShaderStage(e),s=this._getShaderStage(n),a=this._getShaderCacheForMaterial(t);return a.has(r)===!1&&(a.add(r),r.usedTimes++),a.has(s)===!1&&(a.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const n of e)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return n===void 0&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return n===void 0&&(n=new b4(t),e.set(t,n)),n}}class b4{constructor(t){this.id=y4++,this.code=t,this.usedTimes=0}}function A4(i,t,e,n,r,s,a){const o=new _i,l=new T4,c=new Set,u=[],d=r.logarithmicDepthBuffer,f=r.vertexTextures;let m=r.precision;const v={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function M(S){return c.add(S),S===0?"uv":`uv${S}`}function p(S,x,w,Y,z){const W=Y.fog,j=z.geometry,G=S.isMeshStandardMaterial?Y.environment:null,Q=(S.isMeshStandardMaterial?e:t).get(S.envMap||G),V=Q&&Q.mapping===l8?Q.image.height:null,r0=v[S.type];S.precision!==null&&(m=r.getMaxPrecision(S.precision),m!==S.precision&&console.warn("THREE.WebGLProgram.getParameters:",S.precision,"not supported, using",m,"instead."));const h0=j.morphAttributes.position||j.morphAttributes.normal||j.morphAttributes.color,v0=h0!==void 0?h0.length:0;let U0=0;j.morphAttributes.position!==void 0&&(U0=1),j.morphAttributes.normal!==void 0&&(U0=2),j.morphAttributes.color!==void 0&&(U0=3);let j0,X,t0,m0;if(r0){const q0=Vt[r0];j0=q0.vertexShader,X=q0.fragmentShader}else j0=S.vertexShader,X=S.fragmentShader,l.update(S),t0=l.getVertexShaderID(S),m0=l.getFragmentShaderID(S);const s0=i.getRenderTarget(),E0=i.state.buffers.depth.getReversed(),k0=z.isInstancedMesh===!0,T0=z.isBatchedMesh===!0,it=!!S.map,tt=!!S.matcap,N0=!!Q,b=!!S.aoMap,Rt=!!S.lightMap,F0=!!S.bumpMap,O0=!!S.normalMap,x0=!!S.displacementMap,J0=!!S.emissiveMap,g0=!!S.metalnessMap,E=!!S.roughnessMap,_=S.anisotropy>0,F=S.clearcoat>0,q=S.dispersion>0,K=S.iridescence>0,k=S.sheen>0,_0=S.transmission>0,a0=_&&!!S.anisotropyMap,u0=F&&!!S.clearcoatMap,z0=F&&!!S.clearcoatNormalMap,J=F&&!!S.clearcoatRoughnessMap,d0=K&&!!S.iridescenceMap,y0=K&&!!S.iridescenceThicknessMap,b0=k&&!!S.sheenColorMap,f0=k&&!!S.sheenRoughnessMap,B0=!!S.specularMap,P0=!!S.specularColorMap,$0=!!S.specularIntensityMap,C=_0&&!!S.transmissionMap,n0=_0&&!!S.thicknessMap,H=!!S.gradientMap,Z=!!S.alphaMap,l0=S.alphaTest>0,o0=!!S.alphaHash,w0=!!S.extensions;let et=_e;S.toneMapped&&(s0===null||s0.isXRRenderTarget===!0)&&(et=i.toneMapping);const ft={shaderID:r0,shaderType:S.type,shaderName:S.name,vertexShader:j0,fragmentShader:X,defines:S.defines,customVertexShaderID:t0,customFragmentShaderID:m0,isRawShaderMaterial:S.isRawShaderMaterial===!0,glslVersion:S.glslVersion,precision:m,batching:T0,batchingColor:T0&&z._colorsTexture!==null,instancing:k0,instancingColor:k0&&z.instanceColor!==null,instancingMorph:k0&&z.morphTexture!==null,supportsVertexTextures:f,outputColorSpace:s0===null?i.outputColorSpace:s0.isXRRenderTarget===!0?s0.texture.colorSpace:l1,alphaToCoverage:!!S.alphaToCoverage,map:it,matcap:tt,envMap:N0,envMapMode:N0&&Q.mapping,envMapCubeUVHeight:V,aoMap:b,lightMap:Rt,bumpMap:F0,normalMap:O0,displacementMap:f&&x0,emissiveMap:J0,normalMapObjectSpace:O0&&S.normalMapType===M9,normalMapTangentSpace:O0&&S.normalMapType===x9,metalnessMap:g0,roughnessMap:E,anisotropy:_,anisotropyMap:a0,clearcoat:F,clearcoatMap:u0,clearcoatNormalMap:z0,clearcoatRoughnessMap:J,dispersion:q,iridescence:K,iridescenceMap:d0,iridescenceThicknessMap:y0,sheen:k,sheenColorMap:b0,sheenRoughnessMap:f0,specularMap:B0,specularColorMap:P0,specularIntensityMap:$0,transmission:_0,transmissionMap:C,thicknessMap:n0,gradientMap:H,opaque:S.transparent===!1&&S.blending===t1&&S.alphaToCoverage===!1,alphaMap:Z,alphaTest:l0,alphaHash:o0,combine:S.combine,mapUv:it&&M(S.map.channel),aoMapUv:b&&M(S.aoMap.channel),lightMapUv:Rt&&M(S.lightMap.channel),bumpMapUv:F0&&M(S.bumpMap.channel),normalMapUv:O0&&M(S.normalMap.channel),displacementMapUv:x0&&M(S.displacementMap.channel),emissiveMapUv:J0&&M(S.emissiveMap.channel),metalnessMapUv:g0&&M(S.metalnessMap.channel),roughnessMapUv:E&&M(S.roughnessMap.channel),anisotropyMapUv:a0&&M(S.anisotropyMap.channel),clearcoatMapUv:u0&&M(S.clearcoatMap.channel),clearcoatNormalMapUv:z0&&M(S.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:J&&M(S.clearcoatRoughnessMap.channel),iridescenceMapUv:d0&&M(S.iridescenceMap.channel),iridescenceThicknessMapUv:y0&&M(S.iridescenceThicknessMap.channel),sheenColorMapUv:b0&&M(S.sheenColorMap.channel),sheenRoughnessMapUv:f0&&M(S.sheenRoughnessMap.channel),specularMapUv:B0&&M(S.specularMap.channel),specularColorMapUv:P0&&M(S.specularColorMap.channel),specularIntensityMapUv:$0&&M(S.specularIntensityMap.channel),transmissionMapUv:C&&M(S.transmissionMap.channel),thicknessMapUv:n0&&M(S.thicknessMap.channel),alphaMapUv:Z&&M(S.alphaMap.channel),vertexTangents:!!j.attributes.tangent&&(O0||_),vertexColors:S.vertexColors,vertexAlphas:S.vertexColors===!0&&!!j.attributes.color&&j.attributes.color.itemSize===4,pointsUvs:z.isPoints===!0&&!!j.attributes.uv&&(it||Z),fog:!!W,useFog:S.fog===!0,fogExp2:!!W&&W.isFogExp2,flatShading:S.flatShading===!0,sizeAttenuation:S.sizeAttenuation===!0,logarithmicDepthBuffer:d,reverseDepthBuffer:E0,skinning:z.isSkinnedMesh===!0,morphTargets:j.morphAttributes.position!==void 0,morphNormals:j.morphAttributes.normal!==void 0,morphColors:j.morphAttributes.color!==void 0,morphTargetsCount:v0,morphTextureStride:U0,numDirLights:x.directional.length,numPointLights:x.point.length,numSpotLights:x.spot.length,numSpotLightMaps:x.spotLightMap.length,numRectAreaLights:x.rectArea.length,numHemiLights:x.hemi.length,numDirLightShadows:x.directionalShadowMap.length,numPointLightShadows:x.pointShadowMap.length,numSpotLightShadows:x.spotShadowMap.length,numSpotLightShadowsWithMaps:x.numSpotLightShadowsWithMaps,numLightProbes:x.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:S.dithering,shadowMapEnabled:i.shadowMap.enabled&&w.length>0,shadowMapType:i.shadowMap.type,toneMapping:et,decodeVideoTexture:it&&S.map.isVideoTexture===!0&&G0.getTransfer(S.map.colorSpace)===Z0,decodeVideoTextureEmissive:J0&&S.emissiveMap.isVideoTexture===!0&&G0.getTransfer(S.emissiveMap.colorSpace)===Z0,premultipliedAlpha:S.premultipliedAlpha,doubleSided:S.side===Jt,flipSided:S.side===Et,useDepthPacking:S.depthPacking>=0,depthPacking:S.depthPacking||0,index0AttributeName:S.index0AttributeName,extensionClipCullDistance:w0&&S.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(w0&&S.extensions.multiDraw===!0||T0)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:S.customProgramCacheKey()};return ft.vertexUv1s=c.has(1),ft.vertexUv2s=c.has(2),ft.vertexUv3s=c.has(3),c.clear(),ft}function h(S){const x=[];if(S.shaderID?x.push(S.shaderID):(x.push(S.customVertexShaderID),x.push(S.customFragmentShaderID)),S.defines!==void 0)for(const w in S.defines)x.push(w),x.push(S.defines[w]);return S.isRawShaderMaterial===!1&&(A(x,S),T(x,S),x.push(i.outputColorSpace)),x.push(S.customProgramCacheKey),x.join()}function A(S,x){S.push(x.precision),S.push(x.outputColorSpace),S.push(x.envMapMode),S.push(x.envMapCubeUVHeight),S.push(x.mapUv),S.push(x.alphaMapUv),S.push(x.lightMapUv),S.push(x.aoMapUv),S.push(x.bumpMapUv),S.push(x.normalMapUv),S.push(x.displacementMapUv),S.push(x.emissiveMapUv),S.push(x.metalnessMapUv),S.push(x.roughnessMapUv),S.push(x.anisotropyMapUv),S.push(x.clearcoatMapUv),S.push(x.clearcoatNormalMapUv),S.push(x.clearcoatRoughnessMapUv),S.push(x.iridescenceMapUv),S.push(x.iridescenceThicknessMapUv),S.push(x.sheenColorMapUv),S.push(x.sheenRoughnessMapUv),S.push(x.specularMapUv),S.push(x.specularColorMapUv),S.push(x.specularIntensityMapUv),S.push(x.transmissionMapUv),S.push(x.thicknessMapUv),S.push(x.combine),S.push(x.fogExp2),S.push(x.sizeAttenuation),S.push(x.morphTargetsCount),S.push(x.morphAttributeCount),S.push(x.numDirLights),S.push(x.numPointLights),S.push(x.numSpotLights),S.push(x.numSpotLightMaps),S.push(x.numHemiLights),S.push(x.numRectAreaLights),S.push(x.numDirLightShadows),S.push(x.numPointLightShadows),S.push(x.numSpotLightShadows),S.push(x.numSpotLightShadowsWithMaps),S.push(x.numLightProbes),S.push(x.shadowMapType),S.push(x.toneMapping),S.push(x.numClippingPlanes),S.push(x.numClipIntersection),S.push(x.depthPacking)}function T(S,x){o.disableAll(),x.supportsVertexTextures&&o.enable(0),x.instancing&&o.enable(1),x.instancingColor&&o.enable(2),x.instancingMorph&&o.enable(3),x.matcap&&o.enable(4),x.envMap&&o.enable(5),x.normalMapObjectSpace&&o.enable(6),x.normalMapTangentSpace&&o.enable(7),x.clearcoat&&o.enable(8),x.iridescence&&o.enable(9),x.alphaTest&&o.enable(10),x.vertexColors&&o.enable(11),x.vertexAlphas&&o.enable(12),x.vertexUv1s&&o.enable(13),x.vertexUv2s&&o.enable(14),x.vertexUv3s&&o.enable(15),x.vertexTangents&&o.enable(16),x.anisotropy&&o.enable(17),x.alphaHash&&o.enable(18),x.batching&&o.enable(19),x.dispersion&&o.enable(20),x.batchingColor&&o.enable(21),S.push(o.mask),o.disableAll(),x.fog&&o.enable(0),x.useFog&&o.enable(1),x.flatShading&&o.enable(2),x.logarithmicDepthBuffer&&o.enable(3),x.reverseDepthBuffer&&o.enable(4),x.skinning&&o.enable(5),x.morphTargets&&o.enable(6),x.morphNormals&&o.enable(7),x.morphColors&&o.enable(8),x.premultipliedAlpha&&o.enable(9),x.shadowMapEnabled&&o.enable(10),x.doubleSided&&o.enable(11),x.flipSided&&o.enable(12),x.useDepthPacking&&o.enable(13),x.dithering&&o.enable(14),x.transmission&&o.enable(15),x.sheen&&o.enable(16),x.opaque&&o.enable(17),x.pointsUvs&&o.enable(18),x.decodeVideoTexture&&o.enable(19),x.decodeVideoTextureEmissive&&o.enable(20),x.alphaToCoverage&&o.enable(21),S.push(o.mask)}function y(S){const x=v[S.type];let w;if(x){const Y=Vt[x];w=J9.clone(Y.uniforms)}else w=S.uniforms;return w}function U(S,x){let w;for(let Y=0,z=u.length;Y<z;Y++){const W=u[Y];if(W.cacheKey===x){w=W,++w.usedTimes;break}}return w===void 0&&(w=new E4(i,x,S,s),u.push(w)),w}function R(S){if(--S.usedTimes===0){const x=u.indexOf(S);u[x]=u[u.length-1],u.pop(),S.destroy()}}function P(S){l.remove(S)}function I(){l.dispose()}return{getParameters:p,getProgramCacheKey:h,getUniforms:y,acquireProgram:U,releaseProgram:R,releaseShaderCache:P,programs:u,dispose:I}}function R4(){let i=new WeakMap;function t(a){return i.has(a)}function e(a){let o=i.get(a);return o===void 0&&(o={},i.set(a,o)),o}function n(a){i.delete(a)}function r(a,o,l){i.get(a)[o]=l}function s(){i=new WeakMap}return{has:t,get:e,remove:n,update:r,dispose:s}}function w4(i,t){return i.groupOrder!==t.groupOrder?i.groupOrder-t.groupOrder:i.renderOrder!==t.renderOrder?i.renderOrder-t.renderOrder:i.material.id!==t.material.id?i.material.id-t.material.id:i.z!==t.z?i.z-t.z:i.id-t.id}function K7(i,t){return i.groupOrder!==t.groupOrder?i.groupOrder-t.groupOrder:i.renderOrder!==t.renderOrder?i.renderOrder-t.renderOrder:i.z!==t.z?t.z-i.z:i.id-t.id}function j7(){const i=[];let t=0;const e=[],n=[],r=[];function s(){t=0,e.length=0,n.length=0,r.length=0}function a(d,f,m,v,M,p){let h=i[t];return h===void 0?(h={id:d.id,object:d,geometry:f,material:m,groupOrder:v,renderOrder:d.renderOrder,z:M,group:p},i[t]=h):(h.id=d.id,h.object=d,h.geometry=f,h.material=m,h.groupOrder=v,h.renderOrder=d.renderOrder,h.z=M,h.group=p),t++,h}function o(d,f,m,v,M,p){const h=a(d,f,m,v,M,p);m.transmission>0?n.push(h):m.transparent===!0?r.push(h):e.push(h)}function l(d,f,m,v,M,p){const h=a(d,f,m,v,M,p);m.transmission>0?n.unshift(h):m.transparent===!0?r.unshift(h):e.unshift(h)}function c(d,f){e.length>1&&e.sort(d||w4),n.length>1&&n.sort(f||K7),r.length>1&&r.sort(f||K7)}function u(){for(let d=t,f=i.length;d<f;d++){const m=i[d];if(m.id===null)break;m.id=null,m.object=null,m.geometry=null,m.material=null,m.group=null}}return{opaque:e,transmissive:n,transparent:r,init:s,push:o,unshift:l,finish:u,sort:c}}function C4(){let i=new WeakMap;function t(n,r){const s=i.get(n);let a;return s===void 0?(a=new j7,i.set(n,[a])):r>=s.length?(a=new j7,s.push(a)):a=s[r],a}function e(){i=new WeakMap}return{get:t,dispose:e}}function P4(){const i={};return{get:function(t){if(i[t.id]!==void 0)return i[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new N,color:new Y0};break;case"SpotLight":e={position:new N,direction:new N,color:new Y0,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new N,color:new Y0,distance:0,decay:0};break;case"HemisphereLight":e={direction:new N,skyColor:new Y0,groundColor:new Y0};break;case"RectAreaLight":e={color:new Y0,position:new N,halfWidth:new N,halfHeight:new N};break}return i[t.id]=e,e}}}function D4(){const i={};return{get:function(t){if(i[t.id]!==void 0)return i[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new L0};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new L0};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new L0,shadowCameraNear:1,shadowCameraFar:1e3};break}return i[t.id]=e,e}}}let L4=0;function U4(i,t){return(t.castShadow?2:0)-(i.castShadow?2:0)+(t.map?1:0)-(i.map?1:0)}function I4(i){const t=new P4,e=D4(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)n.probe.push(new N);const r=new N,s=new st,a=new st;function o(c){let u=0,d=0,f=0;for(let S=0;S<9;S++)n.probe[S].set(0,0,0);let m=0,v=0,M=0,p=0,h=0,A=0,T=0,y=0,U=0,R=0,P=0;c.sort(U4);for(let S=0,x=c.length;S<x;S++){const w=c[S],Y=w.color,z=w.intensity,W=w.distance,j=w.shadow&&w.shadow.map?w.shadow.map.texture:null;if(w.isAmbientLight)u+=Y.r*z,d+=Y.g*z,f+=Y.b*z;else if(w.isLightProbe){for(let G=0;G<9;G++)n.probe[G].addScaledVector(w.sh.coefficients[G],z);P++}else if(w.isDirectionalLight){const G=t.get(w);if(G.color.copy(w.color).multiplyScalar(w.intensity),w.castShadow){const Q=w.shadow,V=e.get(w);V.shadowIntensity=Q.intensity,V.shadowBias=Q.bias,V.shadowNormalBias=Q.normalBias,V.shadowRadius=Q.radius,V.shadowMapSize=Q.mapSize,n.directionalShadow[m]=V,n.directionalShadowMap[m]=j,n.directionalShadowMatrix[m]=w.shadow.matrix,A++}n.directional[m]=G,m++}else if(w.isSpotLight){const G=t.get(w);G.position.setFromMatrixPosition(w.matrixWorld),G.color.copy(Y).multiplyScalar(z),G.distance=W,G.coneCos=Math.cos(w.angle),G.penumbraCos=Math.cos(w.angle*(1-w.penumbra)),G.decay=w.decay,n.spot[M]=G;const Q=w.shadow;if(w.map&&(n.spotLightMap[U]=w.map,U++,Q.updateMatrices(w),w.castShadow&&R++),n.spotLightMatrix[M]=Q.matrix,w.castShadow){const V=e.get(w);V.shadowIntensity=Q.intensity,V.shadowBias=Q.bias,V.shadowNormalBias=Q.normalBias,V.shadowRadius=Q.radius,V.shadowMapSize=Q.mapSize,n.spotShadow[M]=V,n.spotShadowMap[M]=j,y++}M++}else if(w.isRectAreaLight){const G=t.get(w);G.color.copy(Y).multiplyScalar(z),G.halfWidth.set(w.width*.5,0,0),G.halfHeight.set(0,w.height*.5,0),n.rectArea[p]=G,p++}else if(w.isPointLight){const G=t.get(w);if(G.color.copy(w.color).multiplyScalar(w.intensity),G.distance=w.distance,G.decay=w.decay,w.castShadow){const Q=w.shadow,V=e.get(w);V.shadowIntensity=Q.intensity,V.shadowBias=Q.bias,V.shadowNormalBias=Q.normalBias,V.shadowRadius=Q.radius,V.shadowMapSize=Q.mapSize,V.shadowCameraNear=Q.camera.near,V.shadowCameraFar=Q.camera.far,n.pointShadow[v]=V,n.pointShadowMap[v]=j,n.pointShadowMatrix[v]=w.shadow.matrix,T++}n.point[v]=G,v++}else if(w.isHemisphereLight){const G=t.get(w);G.skyColor.copy(w.color).multiplyScalar(z),G.groundColor.copy(w.groundColor).multiplyScalar(z),n.hemi[h]=G,h++}}p>0&&(i.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=e0.LTC_FLOAT_1,n.rectAreaLTC2=e0.LTC_FLOAT_2):(n.rectAreaLTC1=e0.LTC_HALF_1,n.rectAreaLTC2=e0.LTC_HALF_2)),n.ambient[0]=u,n.ambient[1]=d,n.ambient[2]=f;const I=n.hash;(I.directionalLength!==m||I.pointLength!==v||I.spotLength!==M||I.rectAreaLength!==p||I.hemiLength!==h||I.numDirectionalShadows!==A||I.numPointShadows!==T||I.numSpotShadows!==y||I.numSpotMaps!==U||I.numLightProbes!==P)&&(n.directional.length=m,n.spot.length=M,n.rectArea.length=p,n.point.length=v,n.hemi.length=h,n.directionalShadow.length=A,n.directionalShadowMap.length=A,n.pointShadow.length=T,n.pointShadowMap.length=T,n.spotShadow.length=y,n.spotShadowMap.length=y,n.directionalShadowMatrix.length=A,n.pointShadowMatrix.length=T,n.spotLightMatrix.length=y+U-R,n.spotLightMap.length=U,n.numSpotLightShadowsWithMaps=R,n.numLightProbes=P,I.directionalLength=m,I.pointLength=v,I.spotLength=M,I.rectAreaLength=p,I.hemiLength=h,I.numDirectionalShadows=A,I.numPointShadows=T,I.numSpotShadows=y,I.numSpotMaps=U,I.numLightProbes=P,n.version=L4++)}function l(c,u){let d=0,f=0,m=0,v=0,M=0;const p=u.matrixWorldInverse;for(let h=0,A=c.length;h<A;h++){const T=c[h];if(T.isDirectionalLight){const y=n.directional[d];y.direction.setFromMatrixPosition(T.matrixWorld),r.setFromMatrixPosition(T.target.matrixWorld),y.direction.sub(r),y.direction.transformDirection(p),d++}else if(T.isSpotLight){const y=n.spot[m];y.position.setFromMatrixPosition(T.matrixWorld),y.position.applyMatrix4(p),y.direction.setFromMatrixPosition(T.matrixWorld),r.setFromMatrixPosition(T.target.matrixWorld),y.direction.sub(r),y.direction.transformDirection(p),m++}else if(T.isRectAreaLight){const y=n.rectArea[v];y.position.setFromMatrixPosition(T.matrixWorld),y.position.applyMatrix4(p),a.identity(),s.copy(T.matrixWorld),s.premultiply(p),a.extractRotation(s),y.halfWidth.set(T.width*.5,0,0),y.halfHeight.set(0,T.height*.5,0),y.halfWidth.applyMatrix4(a),y.halfHeight.applyMatrix4(a),v++}else if(T.isPointLight){const y=n.point[f];y.position.setFromMatrixPosition(T.matrixWorld),y.position.applyMatrix4(p),f++}else if(T.isHemisphereLight){const y=n.hemi[M];y.direction.setFromMatrixPosition(T.matrixWorld),y.direction.transformDirection(p),M++}}}return{setup:o,setupView:l,state:n}}function $7(i){const t=new I4(i),e=[],n=[];function r(u){c.camera=u,e.length=0,n.length=0}function s(u){e.push(u)}function a(u){n.push(u)}function o(){t.setup(e)}function l(u){t.setupView(e,u)}const c={lightsArray:e,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:r,state:c,setupLights:o,setupLightsView:l,pushLight:s,pushShadow:a}}function N4(i){let t=new WeakMap;function e(r,s=0){const a=t.get(r);let o;return a===void 0?(o=new $7(i),t.set(r,[o])):s>=a.length?(o=new $7(i),a.push(o)):o=a[s],o}function n(){t=new WeakMap}return{get:e,dispose:n}}const F4=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,O4=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function B4(i,t,e){let n=new Ti;const r=new L0,s=new L0,a=new rt,o=new c5({depthPacking:v9}),l=new h5,c={},u=e.maxTextureSize,d={[ge]:Et,[Et]:ge,[Jt]:Jt},f=new se({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new L0},radius:{value:4}},vertexShader:F4,fragmentShader:O4}),m=f.clone();m.defines.HORIZONTAL_PASS=1;const v=new ae;v.setAttribute("position",new kt(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const M=new ee(v,f),p=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=ti;let h=this.type;this.render=function(R,P,I){if(p.enabled===!1||p.autoUpdate===!1&&p.needsUpdate===!1||R.length===0)return;const S=i.getRenderTarget(),x=i.getActiveCubeFace(),w=i.getActiveMipmapLevel(),Y=i.state;Y.setBlending(me),Y.buffers.color.setClear(1,1,1,1),Y.buffers.depth.setTest(!0),Y.setScissorTest(!1);const z=h!==$t&&this.type===$t,W=h===$t&&this.type!==$t;for(let j=0,G=R.length;j<G;j++){const Q=R[j],V=Q.shadow;if(V===void 0){console.warn("THREE.WebGLShadowMap:",Q,"has no shadow.");continue}if(V.autoUpdate===!1&&V.needsUpdate===!1)continue;r.copy(V.mapSize);const r0=V.getFrameExtents();if(r.multiply(r0),s.copy(V.mapSize),(r.x>u||r.y>u)&&(r.x>u&&(s.x=Math.floor(u/r0.x),r.x=s.x*r0.x,V.mapSize.x=s.x),r.y>u&&(s.y=Math.floor(u/r0.y),r.y=s.y*r0.y,V.mapSize.y=s.y)),V.map===null||z===!0||W===!0){const v0=this.type!==$t?{minFilter:Ht,magFilter:Ht}:{};V.map!==null&&V.map.dispose(),V.map=new Ue(r.x,r.y,v0),V.map.texture.name=Q.name+".shadowMap",V.camera.updateProjectionMatrix()}i.setRenderTarget(V.map),i.clear();const h0=V.getViewportCount();for(let v0=0;v0<h0;v0++){const U0=V.getViewport(v0);a.set(s.x*U0.x,s.y*U0.y,s.x*U0.z,s.y*U0.w),Y.viewport(a),V.updateMatrices(Q,v0),n=V.getFrustum(),y(P,I,V.camera,Q,this.type)}V.isPointLightShadow!==!0&&this.type===$t&&A(V,I),V.needsUpdate=!1}h=this.type,p.needsUpdate=!1,i.setRenderTarget(S,x,w)};function A(R,P){const I=t.update(M);f.defines.VSM_SAMPLES!==R.blurSamples&&(f.defines.VSM_SAMPLES=R.blurSamples,m.defines.VSM_SAMPLES=R.blurSamples,f.needsUpdate=!0,m.needsUpdate=!0),R.mapPass===null&&(R.mapPass=new Ue(r.x,r.y)),f.uniforms.shadow_pass.value=R.map.texture,f.uniforms.resolution.value=R.mapSize,f.uniforms.radius.value=R.radius,i.setRenderTarget(R.mapPass),i.clear(),i.renderBufferDirect(P,null,I,f,M,null),m.uniforms.shadow_pass.value=R.mapPass.texture,m.uniforms.resolution.value=R.mapSize,m.uniforms.radius.value=R.radius,i.setRenderTarget(R.map),i.clear(),i.renderBufferDirect(P,null,I,m,M,null)}function T(R,P,I,S){let x=null;const w=I.isPointLight===!0?R.customDistanceMaterial:R.customDepthMaterial;if(w!==void 0)x=w;else if(x=I.isPointLight===!0?l:o,i.localClippingEnabled&&P.clipShadows===!0&&Array.isArray(P.clippingPlanes)&&P.clippingPlanes.length!==0||P.displacementMap&&P.displacementScale!==0||P.alphaMap&&P.alphaTest>0||P.map&&P.alphaTest>0){const Y=x.uuid,z=P.uuid;let W=c[Y];W===void 0&&(W={},c[Y]=W);let j=W[z];j===void 0&&(j=x.clone(),W[z]=j,P.addEventListener("dispose",U)),x=j}if(x.visible=P.visible,x.wireframe=P.wireframe,S===$t?x.side=P.shadowSide!==null?P.shadowSide:P.side:x.side=P.shadowSide!==null?P.shadowSide:d[P.side],x.alphaMap=P.alphaMap,x.alphaTest=P.alphaTest,x.map=P.map,x.clipShadows=P.clipShadows,x.clippingPlanes=P.clippingPlanes,x.clipIntersection=P.clipIntersection,x.displacementMap=P.displacementMap,x.displacementScale=P.displacementScale,x.displacementBias=P.displacementBias,x.wireframeLinewidth=P.wireframeLinewidth,x.linewidth=P.linewidth,I.isPointLight===!0&&x.isMeshDistanceMaterial===!0){const Y=i.properties.get(x);Y.light=I}return x}function y(R,P,I,S,x){if(R.visible===!1)return;if(R.layers.test(P.layers)&&(R.isMesh||R.isLine||R.isPoints)&&(R.castShadow||R.receiveShadow&&x===$t)&&(!R.frustumCulled||n.intersectsObject(R))){R.modelViewMatrix.multiplyMatrices(I.matrixWorldInverse,R.matrixWorld);const z=t.update(R),W=R.material;if(Array.isArray(W)){const j=z.groups;for(let G=0,Q=j.length;G<Q;G++){const V=j[G],r0=W[V.materialIndex];if(r0&&r0.visible){const h0=T(R,r0,S,x);R.onBeforeShadow(i,R,P,I,z,h0,V),i.renderBufferDirect(I,null,z,h0,R,V),R.onAfterShadow(i,R,P,I,z,h0,V)}}}else if(W.visible){const j=T(R,W,S,x);R.onBeforeShadow(i,R,P,I,z,j,null),i.renderBufferDirect(I,null,z,j,R,null),R.onAfterShadow(i,R,P,I,z,j,null)}}const Y=R.children;for(let z=0,W=Y.length;z<W;z++)y(Y[z],P,I,S,x)}function U(R){R.target.removeEventListener("dispose",U);for(const I in c){const S=c[I],x=R.target.uuid;x in S&&(S[x].dispose(),delete S[x])}}}const z4={[K8]:j8,[$8]:tn,[J8]:en,[i1]:Q8,[j8]:K8,[tn]:$8,[en]:J8,[Q8]:i1};function H4(i,t){function e(){let C=!1;const n0=new rt;let H=null;const Z=new rt(0,0,0,0);return{setMask:function(l0){H!==l0&&!C&&(i.colorMask(l0,l0,l0,l0),H=l0)},setLocked:function(l0){C=l0},setClear:function(l0,o0,w0,et,ft){ft===!0&&(l0*=et,o0*=et,w0*=et),n0.set(l0,o0,w0,et),Z.equals(n0)===!1&&(i.clearColor(l0,o0,w0,et),Z.copy(n0))},reset:function(){C=!1,H=null,Z.set(-1,0,0,0)}}}function n(){let C=!1,n0=!1,H=null,Z=null,l0=null;return{setReversed:function(o0){if(n0!==o0){const w0=t.get("EXT_clip_control");n0?w0.clipControlEXT(w0.LOWER_LEFT_EXT,w0.ZERO_TO_ONE_EXT):w0.clipControlEXT(w0.LOWER_LEFT_EXT,w0.NEGATIVE_ONE_TO_ONE_EXT);const et=l0;l0=null,this.setClear(et)}n0=o0},getReversed:function(){return n0},setTest:function(o0){o0?s0(i.DEPTH_TEST):E0(i.DEPTH_TEST)},setMask:function(o0){H!==o0&&!C&&(i.depthMask(o0),H=o0)},setFunc:function(o0){if(n0&&(o0=z4[o0]),Z!==o0){switch(o0){case K8:i.depthFunc(i.NEVER);break;case j8:i.depthFunc(i.ALWAYS);break;case $8:i.depthFunc(i.LESS);break;case i1:i.depthFunc(i.LEQUAL);break;case J8:i.depthFunc(i.EQUAL);break;case Q8:i.depthFunc(i.GEQUAL);break;case tn:i.depthFunc(i.GREATER);break;case en:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}Z=o0}},setLocked:function(o0){C=o0},setClear:function(o0){l0!==o0&&(n0&&(o0=1-o0),i.clearDepth(o0),l0=o0)},reset:function(){C=!1,H=null,Z=null,l0=null,n0=!1}}}function r(){let C=!1,n0=null,H=null,Z=null,l0=null,o0=null,w0=null,et=null,ft=null;return{setTest:function(q0){C||(q0?s0(i.STENCIL_TEST):E0(i.STENCIL_TEST))},setMask:function(q0){n0!==q0&&!C&&(i.stencilMask(q0),n0=q0)},setFunc:function(q0,Ut,Xt){(H!==q0||Z!==Ut||l0!==Xt)&&(i.stencilFunc(q0,Ut,Xt),H=q0,Z=Ut,l0=Xt)},setOp:function(q0,Ut,Xt){(o0!==q0||w0!==Ut||et!==Xt)&&(i.stencilOp(q0,Ut,Xt),o0=q0,w0=Ut,et=Xt)},setLocked:function(q0){C=q0},setClear:function(q0){ft!==q0&&(i.clearStencil(q0),ft=q0)},reset:function(){C=!1,n0=null,H=null,Z=null,l0=null,o0=null,w0=null,et=null,ft=null}}}const s=new e,a=new n,o=new r,l=new WeakMap,c=new WeakMap;let u={},d={},f=new WeakMap,m=[],v=null,M=!1,p=null,h=null,A=null,T=null,y=null,U=null,R=null,P=new Y0(0,0,0),I=0,S=!1,x=null,w=null,Y=null,z=null,W=null;const j=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let G=!1,Q=0;const V=i.getParameter(i.VERSION);V.indexOf("WebGL")!==-1?(Q=parseFloat(/^WebGL (\d)/.exec(V)[1]),G=Q>=1):V.indexOf("OpenGL ES")!==-1&&(Q=parseFloat(/^OpenGL ES (\d)/.exec(V)[1]),G=Q>=2);let r0=null,h0={};const v0=i.getParameter(i.SCISSOR_BOX),U0=i.getParameter(i.VIEWPORT),j0=new rt().fromArray(v0),X=new rt().fromArray(U0);function t0(C,n0,H,Z){const l0=new Uint8Array(4),o0=i.createTexture();i.bindTexture(C,o0),i.texParameteri(C,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(C,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let w0=0;w0<H;w0++)C===i.TEXTURE_3D||C===i.TEXTURE_2D_ARRAY?i.texImage3D(n0,0,i.RGBA,1,1,Z,0,i.RGBA,i.UNSIGNED_BYTE,l0):i.texImage2D(n0+w0,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,l0);return o0}const m0={};m0[i.TEXTURE_2D]=t0(i.TEXTURE_2D,i.TEXTURE_2D,1),m0[i.TEXTURE_CUBE_MAP]=t0(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6),m0[i.TEXTURE_2D_ARRAY]=t0(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1),m0[i.TEXTURE_3D]=t0(i.TEXTURE_3D,i.TEXTURE_3D,1,1),s.setClear(0,0,0,1),a.setClear(1),o.setClear(0),s0(i.DEPTH_TEST),a.setFunc(i1),F0(!1),O0(e7),s0(i.CULL_FACE),b(me);function s0(C){u[C]!==!0&&(i.enable(C),u[C]=!0)}function E0(C){u[C]!==!1&&(i.disable(C),u[C]=!1)}function k0(C,n0){return d[C]!==n0?(i.bindFramebuffer(C,n0),d[C]=n0,C===i.DRAW_FRAMEBUFFER&&(d[i.FRAMEBUFFER]=n0),C===i.FRAMEBUFFER&&(d[i.DRAW_FRAMEBUFFER]=n0),!0):!1}function T0(C,n0){let H=m,Z=!1;if(C){H=f.get(n0),H===void 0&&(H=[],f.set(n0,H));const l0=C.textures;if(H.length!==l0.length||H[0]!==i.COLOR_ATTACHMENT0){for(let o0=0,w0=l0.length;o0<w0;o0++)H[o0]=i.COLOR_ATTACHMENT0+o0;H.length=l0.length,Z=!0}}else H[0]!==i.BACK&&(H[0]=i.BACK,Z=!0);Z&&i.drawBuffers(H)}function it(C){return v!==C?(i.useProgram(C),v=C,!0):!1}const tt={[we]:i.FUNC_ADD,[Wi]:i.FUNC_SUBTRACT,[Xi]:i.FUNC_REVERSE_SUBTRACT};tt[Yi]=i.MIN,tt[qi]=i.MAX;const N0={[Zi]:i.ZERO,[Ki]:i.ONE,[ji]:i.SRC_COLOR,[q8]:i.SRC_ALPHA,[n9]:i.SRC_ALPHA_SATURATE,[t9]:i.DST_COLOR,[Ji]:i.DST_ALPHA,[$i]:i.ONE_MINUS_SRC_COLOR,[Z8]:i.ONE_MINUS_SRC_ALPHA,[e9]:i.ONE_MINUS_DST_COLOR,[Qi]:i.ONE_MINUS_DST_ALPHA,[i9]:i.CONSTANT_COLOR,[r9]:i.ONE_MINUS_CONSTANT_COLOR,[s9]:i.CONSTANT_ALPHA,[a9]:i.ONE_MINUS_CONSTANT_ALPHA};function b(C,n0,H,Z,l0,o0,w0,et,ft,q0){if(C===me){M===!0&&(E0(i.BLEND),M=!1);return}if(M===!1&&(s0(i.BLEND),M=!0),C!==ki){if(C!==p||q0!==S){if((h!==we||y!==we)&&(i.blendEquation(i.FUNC_ADD),h=we,y=we),q0)switch(C){case t1:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Y8:i.blendFunc(i.ONE,i.ONE);break;case n7:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case i7:i.blendFuncSeparate(i.ZERO,i.SRC_COLOR,i.ZERO,i.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",C);break}else switch(C){case t1:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Y8:i.blendFunc(i.SRC_ALPHA,i.ONE);break;case n7:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case i7:i.blendFunc(i.ZERO,i.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",C);break}A=null,T=null,U=null,R=null,P.set(0,0,0),I=0,p=C,S=q0}return}l0=l0||n0,o0=o0||H,w0=w0||Z,(n0!==h||l0!==y)&&(i.blendEquationSeparate(tt[n0],tt[l0]),h=n0,y=l0),(H!==A||Z!==T||o0!==U||w0!==R)&&(i.blendFuncSeparate(N0[H],N0[Z],N0[o0],N0[w0]),A=H,T=Z,U=o0,R=w0),(et.equals(P)===!1||ft!==I)&&(i.blendColor(et.r,et.g,et.b,ft),P.copy(et),I=ft),p=C,S=!1}function Rt(C,n0){C.side===Jt?E0(i.CULL_FACE):s0(i.CULL_FACE);let H=C.side===Et;n0&&(H=!H),F0(H),C.blending===t1&&C.transparent===!1?b(me):b(C.blending,C.blendEquation,C.blendSrc,C.blendDst,C.blendEquationAlpha,C.blendSrcAlpha,C.blendDstAlpha,C.blendColor,C.blendAlpha,C.premultipliedAlpha),a.setFunc(C.depthFunc),a.setTest(C.depthTest),a.setMask(C.depthWrite),s.setMask(C.colorWrite);const Z=C.stencilWrite;o.setTest(Z),Z&&(o.setMask(C.stencilWriteMask),o.setFunc(C.stencilFunc,C.stencilRef,C.stencilFuncMask),o.setOp(C.stencilFail,C.stencilZFail,C.stencilZPass)),J0(C.polygonOffset,C.polygonOffsetFactor,C.polygonOffsetUnits),C.alphaToCoverage===!0?s0(i.SAMPLE_ALPHA_TO_COVERAGE):E0(i.SAMPLE_ALPHA_TO_COVERAGE)}function F0(C){x!==C&&(C?i.frontFace(i.CW):i.frontFace(i.CCW),x=C)}function O0(C){C!==Hi?(s0(i.CULL_FACE),C!==w&&(C===e7?i.cullFace(i.BACK):C===Vi?i.cullFace(i.FRONT):i.cullFace(i.FRONT_AND_BACK))):E0(i.CULL_FACE),w=C}function x0(C){C!==Y&&(G&&i.lineWidth(C),Y=C)}function J0(C,n0,H){C?(s0(i.POLYGON_OFFSET_FILL),(z!==n0||W!==H)&&(i.polygonOffset(n0,H),z=n0,W=H)):E0(i.POLYGON_OFFSET_FILL)}function g0(C){C?s0(i.SCISSOR_TEST):E0(i.SCISSOR_TEST)}function E(C){C===void 0&&(C=i.TEXTURE0+j-1),r0!==C&&(i.activeTexture(C),r0=C)}function _(C,n0,H){H===void 0&&(r0===null?H=i.TEXTURE0+j-1:H=r0);let Z=h0[H];Z===void 0&&(Z={type:void 0,texture:void 0},h0[H]=Z),(Z.type!==C||Z.texture!==n0)&&(r0!==H&&(i.activeTexture(H),r0=H),i.bindTexture(C,n0||m0[C]),Z.type=C,Z.texture=n0)}function F(){const C=h0[r0];C!==void 0&&C.type!==void 0&&(i.bindTexture(C.type,null),C.type=void 0,C.texture=void 0)}function q(){try{i.compressedTexImage2D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function K(){try{i.compressedTexImage3D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function k(){try{i.texSubImage2D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function _0(){try{i.texSubImage3D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function a0(){try{i.compressedTexSubImage2D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function u0(){try{i.compressedTexSubImage3D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function z0(){try{i.texStorage2D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function J(){try{i.texStorage3D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function d0(){try{i.texImage2D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function y0(){try{i.texImage3D(...arguments)}catch(C){console.error("THREE.WebGLState:",C)}}function b0(C){j0.equals(C)===!1&&(i.scissor(C.x,C.y,C.z,C.w),j0.copy(C))}function f0(C){X.equals(C)===!1&&(i.viewport(C.x,C.y,C.z,C.w),X.copy(C))}function B0(C,n0){let H=c.get(n0);H===void 0&&(H=new WeakMap,c.set(n0,H));let Z=H.get(C);Z===void 0&&(Z=i.getUniformBlockIndex(n0,C.name),H.set(C,Z))}function P0(C,n0){const Z=c.get(n0).get(C);l.get(n0)!==Z&&(i.uniformBlockBinding(n0,Z,C.__bindingPointIndex),l.set(n0,Z))}function $0(){i.disable(i.BLEND),i.disable(i.CULL_FACE),i.disable(i.DEPTH_TEST),i.disable(i.POLYGON_OFFSET_FILL),i.disable(i.SCISSOR_TEST),i.disable(i.STENCIL_TEST),i.disable(i.SAMPLE_ALPHA_TO_COVERAGE),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ZERO),i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO),i.blendColor(0,0,0,0),i.colorMask(!0,!0,!0,!0),i.clearColor(0,0,0,0),i.depthMask(!0),i.depthFunc(i.LESS),a.setReversed(!1),i.clearDepth(1),i.stencilMask(4294967295),i.stencilFunc(i.ALWAYS,0,4294967295),i.stencilOp(i.KEEP,i.KEEP,i.KEEP),i.clearStencil(0),i.cullFace(i.BACK),i.frontFace(i.CCW),i.polygonOffset(0,0),i.activeTexture(i.TEXTURE0),i.bindFramebuffer(i.FRAMEBUFFER,null),i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),i.bindFramebuffer(i.READ_FRAMEBUFFER,null),i.useProgram(null),i.lineWidth(1),i.scissor(0,0,i.canvas.width,i.canvas.height),i.viewport(0,0,i.canvas.width,i.canvas.height),u={},r0=null,h0={},d={},f=new WeakMap,m=[],v=null,M=!1,p=null,h=null,A=null,T=null,y=null,U=null,R=null,P=new Y0(0,0,0),I=0,S=!1,x=null,w=null,Y=null,z=null,W=null,j0.set(0,0,i.canvas.width,i.canvas.height),X.set(0,0,i.canvas.width,i.canvas.height),s.reset(),a.reset(),o.reset()}return{buffers:{color:s,depth:a,stencil:o},enable:s0,disable:E0,bindFramebuffer:k0,drawBuffers:T0,useProgram:it,setBlending:b,setMaterial:Rt,setFlipSided:F0,setCullFace:O0,setLineWidth:x0,setPolygonOffset:J0,setScissorTest:g0,activeTexture:E,bindTexture:_,unbindTexture:F,compressedTexImage2D:q,compressedTexImage3D:K,texImage2D:d0,texImage3D:y0,updateUBOMapping:B0,uniformBlockBinding:P0,texStorage2D:z0,texStorage3D:J,texSubImage2D:k,texSubImage3D:_0,compressedTexSubImage2D:a0,compressedTexSubImage3D:u0,scissor:b0,viewport:f0,reset:$0}}function V4(i,t,e,n,r,s,a){const o=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new L0,u=new WeakMap;let d;const f=new WeakMap;let m=!1;try{m=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function v(E,_){return m?new OffscreenCanvas(E,_):o8("canvas")}function M(E,_,F){let q=1;const K=g0(E);if((K.width>F||K.height>F)&&(q=F/Math.max(K.width,K.height)),q<1)if(typeof HTMLImageElement<"u"&&E instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&E instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&E instanceof ImageBitmap||typeof VideoFrame<"u"&&E instanceof VideoFrame){const k=Math.floor(q*K.width),_0=Math.floor(q*K.height);d===void 0&&(d=v(k,_0));const a0=_?v(k,_0):d;return a0.width=k,a0.height=_0,a0.getContext("2d").drawImage(E,0,0,k,_0),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+K.width+"x"+K.height+") to ("+k+"x"+_0+")."),a0}else return"data"in E&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+K.width+"x"+K.height+")."),E;return E}function p(E){return E.generateMipmaps}function h(E){i.generateMipmap(E)}function A(E){return E.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:E.isWebGL3DRenderTarget?i.TEXTURE_3D:E.isWebGLArrayRenderTarget||E.isCompressedArrayTexture?i.TEXTURE_2D_ARRAY:i.TEXTURE_2D}function T(E,_,F,q,K=!1){if(E!==null){if(i[E]!==void 0)return i[E];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+E+"'")}let k=_;if(_===i.RED&&(F===i.FLOAT&&(k=i.R32F),F===i.HALF_FLOAT&&(k=i.R16F),F===i.UNSIGNED_BYTE&&(k=i.R8)),_===i.RED_INTEGER&&(F===i.UNSIGNED_BYTE&&(k=i.R8UI),F===i.UNSIGNED_SHORT&&(k=i.R16UI),F===i.UNSIGNED_INT&&(k=i.R32UI),F===i.BYTE&&(k=i.R8I),F===i.SHORT&&(k=i.R16I),F===i.INT&&(k=i.R32I)),_===i.RG&&(F===i.FLOAT&&(k=i.RG32F),F===i.HALF_FLOAT&&(k=i.RG16F),F===i.UNSIGNED_BYTE&&(k=i.RG8)),_===i.RG_INTEGER&&(F===i.UNSIGNED_BYTE&&(k=i.RG8UI),F===i.UNSIGNED_SHORT&&(k=i.RG16UI),F===i.UNSIGNED_INT&&(k=i.RG32UI),F===i.BYTE&&(k=i.RG8I),F===i.SHORT&&(k=i.RG16I),F===i.INT&&(k=i.RG32I)),_===i.RGB_INTEGER&&(F===i.UNSIGNED_BYTE&&(k=i.RGB8UI),F===i.UNSIGNED_SHORT&&(k=i.RGB16UI),F===i.UNSIGNED_INT&&(k=i.RGB32UI),F===i.BYTE&&(k=i.RGB8I),F===i.SHORT&&(k=i.RGB16I),F===i.INT&&(k=i.RGB32I)),_===i.RGBA_INTEGER&&(F===i.UNSIGNED_BYTE&&(k=i.RGBA8UI),F===i.UNSIGNED_SHORT&&(k=i.RGBA16UI),F===i.UNSIGNED_INT&&(k=i.RGBA32UI),F===i.BYTE&&(k=i.RGBA8I),F===i.SHORT&&(k=i.RGBA16I),F===i.INT&&(k=i.RGBA32I)),_===i.RGB&&F===i.UNSIGNED_INT_5_9_9_9_REV&&(k=i.RGB9_E5),_===i.RGBA){const _0=K?s8:G0.getTransfer(q);F===i.FLOAT&&(k=i.RGBA32F),F===i.HALF_FLOAT&&(k=i.RGBA16F),F===i.UNSIGNED_BYTE&&(k=_0===Z0?i.SRGB8_ALPHA8:i.RGBA8),F===i.UNSIGNED_SHORT_4_4_4_4&&(k=i.RGBA4),F===i.UNSIGNED_SHORT_5_5_5_1&&(k=i.RGB5_A1)}return(k===i.R16F||k===i.R32F||k===i.RG16F||k===i.RG32F||k===i.RGBA16F||k===i.RGBA32F)&&t.get("EXT_color_buffer_float"),k}function y(E,_){let F;return E?_===null||_===Le||_===a1?F=i.DEPTH24_STENCIL8:_===Qt?F=i.DEPTH32F_STENCIL8:_===v1&&(F=i.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):_===null||_===Le||_===a1?F=i.DEPTH_COMPONENT24:_===Qt?F=i.DEPTH_COMPONENT32F:_===v1&&(F=i.DEPTH_COMPONENT16),F}function U(E,_){return p(E)===!0||E.isFramebufferTexture&&E.minFilter!==Ht&&E.minFilter!==Gt?Math.log2(Math.max(_.width,_.height))+1:E.mipmaps!==void 0&&E.mipmaps.length>0?E.mipmaps.length:E.isCompressedTexture&&Array.isArray(E.image)?_.mipmaps.length:1}function R(E){const _=E.target;_.removeEventListener("dispose",R),I(_),_.isVideoTexture&&u.delete(_)}function P(E){const _=E.target;_.removeEventListener("dispose",P),x(_)}function I(E){const _=n.get(E);if(_.__webglInit===void 0)return;const F=E.source,q=f.get(F);if(q){const K=q[_.__cacheKey];K.usedTimes--,K.usedTimes===0&&S(E),Object.keys(q).length===0&&f.delete(F)}n.remove(E)}function S(E){const _=n.get(E);i.deleteTexture(_.__webglTexture);const F=E.source,q=f.get(F);delete q[_.__cacheKey],a.memory.textures--}function x(E){const _=n.get(E);if(E.depthTexture&&(E.depthTexture.dispose(),n.remove(E.depthTexture)),E.isWebGLCubeRenderTarget)for(let q=0;q<6;q++){if(Array.isArray(_.__webglFramebuffer[q]))for(let K=0;K<_.__webglFramebuffer[q].length;K++)i.deleteFramebuffer(_.__webglFramebuffer[q][K]);else i.deleteFramebuffer(_.__webglFramebuffer[q]);_.__webglDepthbuffer&&i.deleteRenderbuffer(_.__webglDepthbuffer[q])}else{if(Array.isArray(_.__webglFramebuffer))for(let q=0;q<_.__webglFramebuffer.length;q++)i.deleteFramebuffer(_.__webglFramebuffer[q]);else i.deleteFramebuffer(_.__webglFramebuffer);if(_.__webglDepthbuffer&&i.deleteRenderbuffer(_.__webglDepthbuffer),_.__webglMultisampledFramebuffer&&i.deleteFramebuffer(_.__webglMultisampledFramebuffer),_.__webglColorRenderbuffer)for(let q=0;q<_.__webglColorRenderbuffer.length;q++)_.__webglColorRenderbuffer[q]&&i.deleteRenderbuffer(_.__webglColorRenderbuffer[q]);_.__webglDepthRenderbuffer&&i.deleteRenderbuffer(_.__webglDepthRenderbuffer)}const F=E.textures;for(let q=0,K=F.length;q<K;q++){const k=n.get(F[q]);k.__webglTexture&&(i.deleteTexture(k.__webglTexture),a.memory.textures--),n.remove(F[q])}n.remove(E)}let w=0;function Y(){w=0}function z(){const E=w;return E>=r.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+E+" texture units while this GPU supports only "+r.maxTextures),w+=1,E}function W(E){const _=[];return _.push(E.wrapS),_.push(E.wrapT),_.push(E.wrapR||0),_.push(E.magFilter),_.push(E.minFilter),_.push(E.anisotropy),_.push(E.internalFormat),_.push(E.format),_.push(E.type),_.push(E.generateMipmaps),_.push(E.premultiplyAlpha),_.push(E.flipY),_.push(E.unpackAlignment),_.push(E.colorSpace),_.join()}function j(E,_){const F=n.get(E);if(E.isVideoTexture&&x0(E),E.isRenderTargetTexture===!1&&E.version>0&&F.__version!==E.version){const q=E.image;if(q===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(q.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{X(F,E,_);return}}e.bindTexture(i.TEXTURE_2D,F.__webglTexture,i.TEXTURE0+_)}function G(E,_){const F=n.get(E);if(E.version>0&&F.__version!==E.version){X(F,E,_);return}e.bindTexture(i.TEXTURE_2D_ARRAY,F.__webglTexture,i.TEXTURE0+_)}function Q(E,_){const F=n.get(E);if(E.version>0&&F.__version!==E.version){X(F,E,_);return}e.bindTexture(i.TEXTURE_3D,F.__webglTexture,i.TEXTURE0+_)}function V(E,_){const F=n.get(E);if(E.version>0&&F.__version!==E.version){t0(F,E,_);return}e.bindTexture(i.TEXTURE_CUBE_MAP,F.__webglTexture,i.TEXTURE0+_)}const r0={[sn]:i.REPEAT,[Pe]:i.CLAMP_TO_EDGE,[an]:i.MIRRORED_REPEAT},h0={[Ht]:i.NEAREST,[_9]:i.NEAREST_MIPMAP_NEAREST,[R1]:i.NEAREST_MIPMAP_LINEAR,[Gt]:i.LINEAR,[m8]:i.LINEAR_MIPMAP_NEAREST,[De]:i.LINEAR_MIPMAP_LINEAR},v0={[S9]:i.NEVER,[R9]:i.ALWAYS,[E9]:i.LESS,[fi]:i.LEQUAL,[y9]:i.EQUAL,[A9]:i.GEQUAL,[T9]:i.GREATER,[b9]:i.NOTEQUAL};function U0(E,_){if(_.type===Qt&&t.has("OES_texture_float_linear")===!1&&(_.magFilter===Gt||_.magFilter===m8||_.magFilter===R1||_.magFilter===De||_.minFilter===Gt||_.minFilter===m8||_.minFilter===R1||_.minFilter===De)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),i.texParameteri(E,i.TEXTURE_WRAP_S,r0[_.wrapS]),i.texParameteri(E,i.TEXTURE_WRAP_T,r0[_.wrapT]),(E===i.TEXTURE_3D||E===i.TEXTURE_2D_ARRAY)&&i.texParameteri(E,i.TEXTURE_WRAP_R,r0[_.wrapR]),i.texParameteri(E,i.TEXTURE_MAG_FILTER,h0[_.magFilter]),i.texParameteri(E,i.TEXTURE_MIN_FILTER,h0[_.minFilter]),_.compareFunction&&(i.texParameteri(E,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE),i.texParameteri(E,i.TEXTURE_COMPARE_FUNC,v0[_.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(_.magFilter===Ht||_.minFilter!==R1&&_.minFilter!==De||_.type===Qt&&t.has("OES_texture_float_linear")===!1)return;if(_.anisotropy>1||n.get(_).__currentAnisotropy){const F=t.get("EXT_texture_filter_anisotropic");i.texParameterf(E,F.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(_.anisotropy,r.getMaxAnisotropy())),n.get(_).__currentAnisotropy=_.anisotropy}}}function j0(E,_){let F=!1;E.__webglInit===void 0&&(E.__webglInit=!0,_.addEventListener("dispose",R));const q=_.source;let K=f.get(q);K===void 0&&(K={},f.set(q,K));const k=W(_);if(k!==E.__cacheKey){K[k]===void 0&&(K[k]={texture:i.createTexture(),usedTimes:0},a.memory.textures++,F=!0),K[k].usedTimes++;const _0=K[E.__cacheKey];_0!==void 0&&(K[E.__cacheKey].usedTimes--,_0.usedTimes===0&&S(_)),E.__cacheKey=k,E.__webglTexture=K[k].texture}return F}function X(E,_,F){let q=i.TEXTURE_2D;(_.isDataArrayTexture||_.isCompressedArrayTexture)&&(q=i.TEXTURE_2D_ARRAY),_.isData3DTexture&&(q=i.TEXTURE_3D);const K=j0(E,_),k=_.source;e.bindTexture(q,E.__webglTexture,i.TEXTURE0+F);const _0=n.get(k);if(k.version!==_0.__version||K===!0){e.activeTexture(i.TEXTURE0+F);const a0=G0.getPrimaries(G0.workingColorSpace),u0=_.colorSpace===pe?null:G0.getPrimaries(_.colorSpace),z0=_.colorSpace===pe||a0===u0?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,_.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,_.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,z0);let J=M(_.image,!1,r.maxTextureSize);J=J0(_,J);const d0=s.convert(_.format,_.colorSpace),y0=s.convert(_.type);let b0=T(_.internalFormat,d0,y0,_.colorSpace,_.isVideoTexture);U0(q,_);let f0;const B0=_.mipmaps,P0=_.isVideoTexture!==!0,$0=_0.__version===void 0||K===!0,C=k.dataReady,n0=U(_,J);if(_.isDepthTexture)b0=y(_.format===o1,_.type),$0&&(P0?e.texStorage2D(i.TEXTURE_2D,1,b0,J.width,J.height):e.texImage2D(i.TEXTURE_2D,0,b0,J.width,J.height,0,d0,y0,null));else if(_.isDataTexture)if(B0.length>0){P0&&$0&&e.texStorage2D(i.TEXTURE_2D,n0,b0,B0[0].width,B0[0].height);for(let H=0,Z=B0.length;H<Z;H++)f0=B0[H],P0?C&&e.texSubImage2D(i.TEXTURE_2D,H,0,0,f0.width,f0.height,d0,y0,f0.data):e.texImage2D(i.TEXTURE_2D,H,b0,f0.width,f0.height,0,d0,y0,f0.data);_.generateMipmaps=!1}else P0?($0&&e.texStorage2D(i.TEXTURE_2D,n0,b0,J.width,J.height),C&&e.texSubImage2D(i.TEXTURE_2D,0,0,0,J.width,J.height,d0,y0,J.data)):e.texImage2D(i.TEXTURE_2D,0,b0,J.width,J.height,0,d0,y0,J.data);else if(_.isCompressedTexture)if(_.isCompressedArrayTexture){P0&&$0&&e.texStorage3D(i.TEXTURE_2D_ARRAY,n0,b0,B0[0].width,B0[0].height,J.depth);for(let H=0,Z=B0.length;H<Z;H++)if(f0=B0[H],_.format!==zt)if(d0!==null)if(P0){if(C)if(_.layerUpdates.size>0){const l0=R7(f0.width,f0.height,_.format,_.type);for(const o0 of _.layerUpdates){const w0=f0.data.subarray(o0*l0/f0.data.BYTES_PER_ELEMENT,(o0+1)*l0/f0.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,H,0,0,o0,f0.width,f0.height,1,d0,w0)}_.clearLayerUpdates()}else e.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,H,0,0,0,f0.width,f0.height,J.depth,d0,f0.data)}else e.compressedTexImage3D(i.TEXTURE_2D_ARRAY,H,b0,f0.width,f0.height,J.depth,0,f0.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else P0?C&&e.texSubImage3D(i.TEXTURE_2D_ARRAY,H,0,0,0,f0.width,f0.height,J.depth,d0,y0,f0.data):e.texImage3D(i.TEXTURE_2D_ARRAY,H,b0,f0.width,f0.height,J.depth,0,d0,y0,f0.data)}else{P0&&$0&&e.texStorage2D(i.TEXTURE_2D,n0,b0,B0[0].width,B0[0].height);for(let H=0,Z=B0.length;H<Z;H++)f0=B0[H],_.format!==zt?d0!==null?P0?C&&e.compressedTexSubImage2D(i.TEXTURE_2D,H,0,0,f0.width,f0.height,d0,f0.data):e.compressedTexImage2D(i.TEXTURE_2D,H,b0,f0.width,f0.height,0,f0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):P0?C&&e.texSubImage2D(i.TEXTURE_2D,H,0,0,f0.width,f0.height,d0,y0,f0.data):e.texImage2D(i.TEXTURE_2D,H,b0,f0.width,f0.height,0,d0,y0,f0.data)}else if(_.isDataArrayTexture)if(P0){if($0&&e.texStorage3D(i.TEXTURE_2D_ARRAY,n0,b0,J.width,J.height,J.depth),C)if(_.layerUpdates.size>0){const H=R7(J.width,J.height,_.format,_.type);for(const Z of _.layerUpdates){const l0=J.data.subarray(Z*H/J.data.BYTES_PER_ELEMENT,(Z+1)*H/J.data.BYTES_PER_ELEMENT);e.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,Z,J.width,J.height,1,d0,y0,l0)}_.clearLayerUpdates()}else e.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,J.width,J.height,J.depth,d0,y0,J.data)}else e.texImage3D(i.TEXTURE_2D_ARRAY,0,b0,J.width,J.height,J.depth,0,d0,y0,J.data);else if(_.isData3DTexture)P0?($0&&e.texStorage3D(i.TEXTURE_3D,n0,b0,J.width,J.height,J.depth),C&&e.texSubImage3D(i.TEXTURE_3D,0,0,0,0,J.width,J.height,J.depth,d0,y0,J.data)):e.texImage3D(i.TEXTURE_3D,0,b0,J.width,J.height,J.depth,0,d0,y0,J.data);else if(_.isFramebufferTexture){if($0)if(P0)e.texStorage2D(i.TEXTURE_2D,n0,b0,J.width,J.height);else{let H=J.width,Z=J.height;for(let l0=0;l0<n0;l0++)e.texImage2D(i.TEXTURE_2D,l0,b0,H,Z,0,d0,y0,null),H>>=1,Z>>=1}}else if(B0.length>0){if(P0&&$0){const H=g0(B0[0]);e.texStorage2D(i.TEXTURE_2D,n0,b0,H.width,H.height)}for(let H=0,Z=B0.length;H<Z;H++)f0=B0[H],P0?C&&e.texSubImage2D(i.TEXTURE_2D,H,0,0,d0,y0,f0):e.texImage2D(i.TEXTURE_2D,H,b0,d0,y0,f0);_.generateMipmaps=!1}else if(P0){if($0){const H=g0(J);e.texStorage2D(i.TEXTURE_2D,n0,b0,H.width,H.height)}C&&e.texSubImage2D(i.TEXTURE_2D,0,0,0,d0,y0,J)}else e.texImage2D(i.TEXTURE_2D,0,b0,d0,y0,J);p(_)&&h(q),_0.__version=k.version,_.onUpdate&&_.onUpdate(_)}E.__version=_.version}function t0(E,_,F){if(_.image.length!==6)return;const q=j0(E,_),K=_.source;e.bindTexture(i.TEXTURE_CUBE_MAP,E.__webglTexture,i.TEXTURE0+F);const k=n.get(K);if(K.version!==k.__version||q===!0){e.activeTexture(i.TEXTURE0+F);const _0=G0.getPrimaries(G0.workingColorSpace),a0=_.colorSpace===pe?null:G0.getPrimaries(_.colorSpace),u0=_.colorSpace===pe||_0===a0?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,_.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,_.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,_.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,u0);const z0=_.isCompressedTexture||_.image[0].isCompressedTexture,J=_.image[0]&&_.image[0].isDataTexture,d0=[];for(let Z=0;Z<6;Z++)!z0&&!J?d0[Z]=M(_.image[Z],!0,r.maxCubemapSize):d0[Z]=J?_.image[Z].image:_.image[Z],d0[Z]=J0(_,d0[Z]);const y0=d0[0],b0=s.convert(_.format,_.colorSpace),f0=s.convert(_.type),B0=T(_.internalFormat,b0,f0,_.colorSpace),P0=_.isVideoTexture!==!0,$0=k.__version===void 0||q===!0,C=K.dataReady;let n0=U(_,y0);U0(i.TEXTURE_CUBE_MAP,_);let H;if(z0){P0&&$0&&e.texStorage2D(i.TEXTURE_CUBE_MAP,n0,B0,y0.width,y0.height);for(let Z=0;Z<6;Z++){H=d0[Z].mipmaps;for(let l0=0;l0<H.length;l0++){const o0=H[l0];_.format!==zt?b0!==null?P0?C&&e.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0,0,0,o0.width,o0.height,b0,o0.data):e.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0,B0,o0.width,o0.height,0,o0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):P0?C&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0,0,0,o0.width,o0.height,b0,f0,o0.data):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0,B0,o0.width,o0.height,0,b0,f0,o0.data)}}}else{if(H=_.mipmaps,P0&&$0){H.length>0&&n0++;const Z=g0(d0[0]);e.texStorage2D(i.TEXTURE_CUBE_MAP,n0,B0,Z.width,Z.height)}for(let Z=0;Z<6;Z++)if(J){P0?C&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,0,0,0,d0[Z].width,d0[Z].height,b0,f0,d0[Z].data):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,0,B0,d0[Z].width,d0[Z].height,0,b0,f0,d0[Z].data);for(let l0=0;l0<H.length;l0++){const w0=H[l0].image[Z].image;P0?C&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0+1,0,0,w0.width,w0.height,b0,f0,w0.data):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0+1,B0,w0.width,w0.height,0,b0,f0,w0.data)}}else{P0?C&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,0,0,0,b0,f0,d0[Z]):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,0,B0,b0,f0,d0[Z]);for(let l0=0;l0<H.length;l0++){const o0=H[l0];P0?C&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0+1,0,0,b0,f0,o0.image[Z]):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+Z,l0+1,B0,b0,f0,o0.image[Z])}}}p(_)&&h(i.TEXTURE_CUBE_MAP),k.__version=K.version,_.onUpdate&&_.onUpdate(_)}E.__version=_.version}function m0(E,_,F,q,K,k){const _0=s.convert(F.format,F.colorSpace),a0=s.convert(F.type),u0=T(F.internalFormat,_0,a0,F.colorSpace),z0=n.get(_),J=n.get(F);if(J.__renderTarget=_,!z0.__hasExternalTextures){const d0=Math.max(1,_.width>>k),y0=Math.max(1,_.height>>k);K===i.TEXTURE_3D||K===i.TEXTURE_2D_ARRAY?e.texImage3D(K,k,u0,d0,y0,_.depth,0,_0,a0,null):e.texImage2D(K,k,u0,d0,y0,0,_0,a0,null)}e.bindFramebuffer(i.FRAMEBUFFER,E),O0(_)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,q,K,J.__webglTexture,0,F0(_)):(K===i.TEXTURE_2D||K>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&K<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&i.framebufferTexture2D(i.FRAMEBUFFER,q,K,J.__webglTexture,k),e.bindFramebuffer(i.FRAMEBUFFER,null)}function s0(E,_,F){if(i.bindRenderbuffer(i.RENDERBUFFER,E),_.depthBuffer){const q=_.depthTexture,K=q&&q.isDepthTexture?q.type:null,k=y(_.stencilBuffer,K),_0=_.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,a0=F0(_);O0(_)?o.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,a0,k,_.width,_.height):F?i.renderbufferStorageMultisample(i.RENDERBUFFER,a0,k,_.width,_.height):i.renderbufferStorage(i.RENDERBUFFER,k,_.width,_.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,_0,i.RENDERBUFFER,E)}else{const q=_.textures;for(let K=0;K<q.length;K++){const k=q[K],_0=s.convert(k.format,k.colorSpace),a0=s.convert(k.type),u0=T(k.internalFormat,_0,a0,k.colorSpace),z0=F0(_);F&&O0(_)===!1?i.renderbufferStorageMultisample(i.RENDERBUFFER,z0,u0,_.width,_.height):O0(_)?o.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,z0,u0,_.width,_.height):i.renderbufferStorage(i.RENDERBUFFER,u0,_.width,_.height)}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function E0(E,_){if(_&&_.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(i.FRAMEBUFFER,E),!(_.depthTexture&&_.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const q=n.get(_.depthTexture);q.__renderTarget=_,(!q.__webglTexture||_.depthTexture.image.width!==_.width||_.depthTexture.image.height!==_.height)&&(_.depthTexture.image.width=_.width,_.depthTexture.image.height=_.height,_.depthTexture.needsUpdate=!0),j(_.depthTexture,0);const K=q.__webglTexture,k=F0(_);if(_.depthTexture.format===e1)O0(_)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,K,0,k):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,K,0);else if(_.depthTexture.format===o1)O0(_)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,K,0,k):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,K,0);else throw new Error("Unknown depthTexture format")}function k0(E){const _=n.get(E),F=E.isWebGLCubeRenderTarget===!0;if(_.__boundDepthTexture!==E.depthTexture){const q=E.depthTexture;if(_.__depthDisposeCallback&&_.__depthDisposeCallback(),q){const K=()=>{delete _.__boundDepthTexture,delete _.__depthDisposeCallback,q.removeEventListener("dispose",K)};q.addEventListener("dispose",K),_.__depthDisposeCallback=K}_.__boundDepthTexture=q}if(E.depthTexture&&!_.__autoAllocateDepthBuffer){if(F)throw new Error("target.depthTexture not supported in Cube render targets");E0(_.__webglFramebuffer,E)}else if(F){_.__webglDepthbuffer=[];for(let q=0;q<6;q++)if(e.bindFramebuffer(i.FRAMEBUFFER,_.__webglFramebuffer[q]),_.__webglDepthbuffer[q]===void 0)_.__webglDepthbuffer[q]=i.createRenderbuffer(),s0(_.__webglDepthbuffer[q],E,!1);else{const K=E.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,k=_.__webglDepthbuffer[q];i.bindRenderbuffer(i.RENDERBUFFER,k),i.framebufferRenderbuffer(i.FRAMEBUFFER,K,i.RENDERBUFFER,k)}}else if(e.bindFramebuffer(i.FRAMEBUFFER,_.__webglFramebuffer),_.__webglDepthbuffer===void 0)_.__webglDepthbuffer=i.createRenderbuffer(),s0(_.__webglDepthbuffer,E,!1);else{const q=E.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,K=_.__webglDepthbuffer;i.bindRenderbuffer(i.RENDERBUFFER,K),i.framebufferRenderbuffer(i.FRAMEBUFFER,q,i.RENDERBUFFER,K)}e.bindFramebuffer(i.FRAMEBUFFER,null)}function T0(E,_,F){const q=n.get(E);_!==void 0&&m0(q.__webglFramebuffer,E,E.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,0),F!==void 0&&k0(E)}function it(E){const _=E.texture,F=n.get(E),q=n.get(_);E.addEventListener("dispose",P);const K=E.textures,k=E.isWebGLCubeRenderTarget===!0,_0=K.length>1;if(_0||(q.__webglTexture===void 0&&(q.__webglTexture=i.createTexture()),q.__version=_.version,a.memory.textures++),k){F.__webglFramebuffer=[];for(let a0=0;a0<6;a0++)if(_.mipmaps&&_.mipmaps.length>0){F.__webglFramebuffer[a0]=[];for(let u0=0;u0<_.mipmaps.length;u0++)F.__webglFramebuffer[a0][u0]=i.createFramebuffer()}else F.__webglFramebuffer[a0]=i.createFramebuffer()}else{if(_.mipmaps&&_.mipmaps.length>0){F.__webglFramebuffer=[];for(let a0=0;a0<_.mipmaps.length;a0++)F.__webglFramebuffer[a0]=i.createFramebuffer()}else F.__webglFramebuffer=i.createFramebuffer();if(_0)for(let a0=0,u0=K.length;a0<u0;a0++){const z0=n.get(K[a0]);z0.__webglTexture===void 0&&(z0.__webglTexture=i.createTexture(),a.memory.textures++)}if(E.samples>0&&O0(E)===!1){F.__webglMultisampledFramebuffer=i.createFramebuffer(),F.__webglColorRenderbuffer=[],e.bindFramebuffer(i.FRAMEBUFFER,F.__webglMultisampledFramebuffer);for(let a0=0;a0<K.length;a0++){const u0=K[a0];F.__webglColorRenderbuffer[a0]=i.createRenderbuffer(),i.bindRenderbuffer(i.RENDERBUFFER,F.__webglColorRenderbuffer[a0]);const z0=s.convert(u0.format,u0.colorSpace),J=s.convert(u0.type),d0=T(u0.internalFormat,z0,J,u0.colorSpace,E.isXRRenderTarget===!0),y0=F0(E);i.renderbufferStorageMultisample(i.RENDERBUFFER,y0,d0,E.width,E.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+a0,i.RENDERBUFFER,F.__webglColorRenderbuffer[a0])}i.bindRenderbuffer(i.RENDERBUFFER,null),E.depthBuffer&&(F.__webglDepthRenderbuffer=i.createRenderbuffer(),s0(F.__webglDepthRenderbuffer,E,!0)),e.bindFramebuffer(i.FRAMEBUFFER,null)}}if(k){e.bindTexture(i.TEXTURE_CUBE_MAP,q.__webglTexture),U0(i.TEXTURE_CUBE_MAP,_);for(let a0=0;a0<6;a0++)if(_.mipmaps&&_.mipmaps.length>0)for(let u0=0;u0<_.mipmaps.length;u0++)m0(F.__webglFramebuffer[a0][u0],E,_,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+a0,u0);else m0(F.__webglFramebuffer[a0],E,_,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+a0,0);p(_)&&h(i.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(_0){for(let a0=0,u0=K.length;a0<u0;a0++){const z0=K[a0],J=n.get(z0);e.bindTexture(i.TEXTURE_2D,J.__webglTexture),U0(i.TEXTURE_2D,z0),m0(F.__webglFramebuffer,E,z0,i.COLOR_ATTACHMENT0+a0,i.TEXTURE_2D,0),p(z0)&&h(i.TEXTURE_2D)}e.unbindTexture()}else{let a0=i.TEXTURE_2D;if((E.isWebGL3DRenderTarget||E.isWebGLArrayRenderTarget)&&(a0=E.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY),e.bindTexture(a0,q.__webglTexture),U0(a0,_),_.mipmaps&&_.mipmaps.length>0)for(let u0=0;u0<_.mipmaps.length;u0++)m0(F.__webglFramebuffer[u0],E,_,i.COLOR_ATTACHMENT0,a0,u0);else m0(F.__webglFramebuffer,E,_,i.COLOR_ATTACHMENT0,a0,0);p(_)&&h(a0),e.unbindTexture()}E.depthBuffer&&k0(E)}function tt(E){const _=E.textures;for(let F=0,q=_.length;F<q;F++){const K=_[F];if(p(K)){const k=A(E),_0=n.get(K).__webglTexture;e.bindTexture(k,_0),h(k),e.unbindTexture()}}}const N0=[],b=[];function Rt(E){if(E.samples>0){if(O0(E)===!1){const _=E.textures,F=E.width,q=E.height;let K=i.COLOR_BUFFER_BIT;const k=E.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,_0=n.get(E),a0=_.length>1;if(a0)for(let u0=0;u0<_.length;u0++)e.bindFramebuffer(i.FRAMEBUFFER,_0.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+u0,i.RENDERBUFFER,null),e.bindFramebuffer(i.FRAMEBUFFER,_0.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+u0,i.TEXTURE_2D,null,0);e.bindFramebuffer(i.READ_FRAMEBUFFER,_0.__webglMultisampledFramebuffer),e.bindFramebuffer(i.DRAW_FRAMEBUFFER,_0.__webglFramebuffer);for(let u0=0;u0<_.length;u0++){if(E.resolveDepthBuffer&&(E.depthBuffer&&(K|=i.DEPTH_BUFFER_BIT),E.stencilBuffer&&E.resolveStencilBuffer&&(K|=i.STENCIL_BUFFER_BIT)),a0){i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,_0.__webglColorRenderbuffer[u0]);const z0=n.get(_[u0]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,z0,0)}i.blitFramebuffer(0,0,F,q,0,0,F,q,K,i.NEAREST),l===!0&&(N0.length=0,b.length=0,N0.push(i.COLOR_ATTACHMENT0+u0),E.depthBuffer&&E.resolveDepthBuffer===!1&&(N0.push(k),b.push(k),i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,b)),i.invalidateFramebuffer(i.READ_FRAMEBUFFER,N0))}if(e.bindFramebuffer(i.READ_FRAMEBUFFER,null),e.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),a0)for(let u0=0;u0<_.length;u0++){e.bindFramebuffer(i.FRAMEBUFFER,_0.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+u0,i.RENDERBUFFER,_0.__webglColorRenderbuffer[u0]);const z0=n.get(_[u0]).__webglTexture;e.bindFramebuffer(i.FRAMEBUFFER,_0.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+u0,i.TEXTURE_2D,z0,0)}e.bindFramebuffer(i.DRAW_FRAMEBUFFER,_0.__webglMultisampledFramebuffer)}else if(E.depthBuffer&&E.resolveDepthBuffer===!1&&l){const _=E.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT;i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[_])}}}function F0(E){return Math.min(r.maxSamples,E.samples)}function O0(E){const _=n.get(E);return E.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&_.__useRenderToTexture!==!1}function x0(E){const _=a.render.frame;u.get(E)!==_&&(u.set(E,_),E.update())}function J0(E,_){const F=E.colorSpace,q=E.format,K=E.type;return E.isCompressedTexture===!0||E.isVideoTexture===!0||F!==l1&&F!==pe&&(G0.getTransfer(F)===Z0?(q!==zt||K!==ie)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",F)),_}function g0(E){return typeof HTMLImageElement<"u"&&E instanceof HTMLImageElement?(c.width=E.naturalWidth||E.width,c.height=E.naturalHeight||E.height):typeof VideoFrame<"u"&&E instanceof VideoFrame?(c.width=E.displayWidth,c.height=E.displayHeight):(c.width=E.width,c.height=E.height),c}this.allocateTextureUnit=z,this.resetTextureUnits=Y,this.setTexture2D=j,this.setTexture2DArray=G,this.setTexture3D=Q,this.setTextureCube=V,this.rebindTextures=T0,this.setupRenderTarget=it,this.updateRenderTargetMipmap=tt,this.updateMultisampleRenderTarget=Rt,this.setupDepthRenderbuffer=k0,this.setupFrameBufferTexture=m0,this.useMultisampledRTT=O0}function G4(i,t){function e(n,r=pe){let s;const a=G0.getTransfer(r);if(n===ie)return i.UNSIGNED_BYTE;if(n===Bn)return i.UNSIGNED_SHORT_4_4_4_4;if(n===zn)return i.UNSIGNED_SHORT_5_5_5_1;if(n===si)return i.UNSIGNED_INT_5_9_9_9_REV;if(n===ii)return i.BYTE;if(n===ri)return i.SHORT;if(n===v1)return i.UNSIGNED_SHORT;if(n===On)return i.INT;if(n===Le)return i.UNSIGNED_INT;if(n===Qt)return i.FLOAT;if(n===x1)return i.HALF_FLOAT;if(n===ai)return i.ALPHA;if(n===oi)return i.RGB;if(n===zt)return i.RGBA;if(n===li)return i.LUMINANCE;if(n===ci)return i.LUMINANCE_ALPHA;if(n===e1)return i.DEPTH_COMPONENT;if(n===o1)return i.DEPTH_STENCIL;if(n===hi)return i.RED;if(n===Hn)return i.RED_INTEGER;if(n===ui)return i.RG;if(n===Vn)return i.RG_INTEGER;if(n===Gn)return i.RGBA_INTEGER;if(n===J1||n===Q1||n===t8||n===e8)if(a===Z0)if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(n===J1)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Q1)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===t8)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===e8)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(n===J1)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Q1)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===t8)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===e8)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===on||n===ln||n===cn||n===hn)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(n===on)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===ln)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===cn)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===hn)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===un||n===dn||n===fn)if(s=t.get("WEBGL_compressed_texture_etc"),s!==null){if(n===un||n===dn)return a===Z0?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(n===fn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===pn||n===mn||n===_n||n===gn||n===vn||n===xn||n===Mn||n===Sn||n===En||n===yn||n===Tn||n===bn||n===An||n===Rn)if(s=t.get("WEBGL_compressed_texture_astc"),s!==null){if(n===pn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===mn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===_n)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===gn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===vn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===xn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Mn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Sn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===En)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===yn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Tn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===bn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===An)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Rn)return a===Z0?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===n8||n===wn||n===Cn)if(s=t.get("EXT_texture_compression_bptc"),s!==null){if(n===n8)return a===Z0?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===wn)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Cn)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===di||n===Pn||n===Dn||n===Ln)if(s=t.get("EXT_texture_compression_rgtc"),s!==null){if(n===n8)return s.COMPRESSED_RED_RGTC1_EXT;if(n===Pn)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Dn)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Ln)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===a1?i.UNSIGNED_INT_24_8:i[n]!==void 0?i[n]:null}return{convert:e}}const k4=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,W4=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class X4{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(this.texture===null){const r=new yt,s=t.properties.get(r);s.__webglTexture=e.texture,(e.depthNear!==n.depthNear||e.depthFar!==n.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=r}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,n=new se({vertexShader:k4,fragmentShader:W4,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new ee(new h8(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class Y4 extends Ne{constructor(t,e){super();const n=this;let r=null,s=1,a=null,o="local-floor",l=1,c=null,u=null,d=null,f=null,m=null,v=null;const M=new X4,p=e.getContextAttributes();let h=null,A=null;const T=[],y=[],U=new L0;let R=null;const P=new Lt;P.viewport=new rt;const I=new Lt;I.viewport=new rt;const S=[P,I],x=new d5;let w=null,Y=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(X){let t0=T[X];return t0===void 0&&(t0=new F8,T[X]=t0),t0.getTargetRaySpace()},this.getControllerGrip=function(X){let t0=T[X];return t0===void 0&&(t0=new F8,T[X]=t0),t0.getGripSpace()},this.getHand=function(X){let t0=T[X];return t0===void 0&&(t0=new F8,T[X]=t0),t0.getHandSpace()};function z(X){const t0=y.indexOf(X.inputSource);if(t0===-1)return;const m0=T[t0];m0!==void 0&&(m0.update(X.inputSource,X.frame,c||a),m0.dispatchEvent({type:X.type,data:X.inputSource}))}function W(){r.removeEventListener("select",z),r.removeEventListener("selectstart",z),r.removeEventListener("selectend",z),r.removeEventListener("squeeze",z),r.removeEventListener("squeezestart",z),r.removeEventListener("squeezeend",z),r.removeEventListener("end",W),r.removeEventListener("inputsourceschange",j);for(let X=0;X<T.length;X++){const t0=y[X];t0!==null&&(y[X]=null,T[X].disconnect(t0))}w=null,Y=null,M.reset(),t.setRenderTarget(h),m=null,f=null,d=null,r=null,A=null,j0.stop(),n.isPresenting=!1,t.setPixelRatio(R),t.setSize(U.width,U.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(X){s=X,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(X){o=X,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||a},this.setReferenceSpace=function(X){c=X},this.getBaseLayer=function(){return f!==null?f:m},this.getBinding=function(){return d},this.getFrame=function(){return v},this.getSession=function(){return r},this.setSession=async function(X){if(r=X,r!==null){if(h=t.getRenderTarget(),r.addEventListener("select",z),r.addEventListener("selectstart",z),r.addEventListener("selectend",z),r.addEventListener("squeeze",z),r.addEventListener("squeezestart",z),r.addEventListener("squeezeend",z),r.addEventListener("end",W),r.addEventListener("inputsourceschange",j),p.xrCompatible!==!0&&await e.makeXRCompatible(),R=t.getPixelRatio(),t.getSize(U),typeof XRWebGLBinding<"u"&&"createProjectionLayer"in XRWebGLBinding.prototype){let m0=null,s0=null,E0=null;p.depth&&(E0=p.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,m0=p.stencil?o1:e1,s0=p.stencil?a1:Le);const k0={colorFormat:e.RGBA8,depthFormat:E0,scaleFactor:s};d=new XRWebGLBinding(r,e),f=d.createProjectionLayer(k0),r.updateRenderState({layers:[f]}),t.setPixelRatio(1),t.setSize(f.textureWidth,f.textureHeight,!1),A=new Ue(f.textureWidth,f.textureHeight,{format:zt,type:ie,depthTexture:new bi(f.textureWidth,f.textureHeight,s0,void 0,void 0,void 0,void 0,void 0,void 0,m0),stencilBuffer:p.stencil,colorSpace:t.outputColorSpace,samples:p.antialias?4:0,resolveDepthBuffer:f.ignoreDepthValues===!1,resolveStencilBuffer:f.ignoreDepthValues===!1})}else{const m0={antialias:p.antialias,alpha:!0,depth:p.depth,stencil:p.stencil,framebufferScaleFactor:s};m=new XRWebGLLayer(r,e,m0),r.updateRenderState({baseLayer:m}),t.setPixelRatio(1),t.setSize(m.framebufferWidth,m.framebufferHeight,!1),A=new Ue(m.framebufferWidth,m.framebufferHeight,{format:zt,type:ie,colorSpace:t.outputColorSpace,stencilBuffer:p.stencil,resolveDepthBuffer:m.ignoreDepthValues===!1,resolveStencilBuffer:m.ignoreDepthValues===!1})}A.isXRRenderTarget=!0,this.setFoveation(l),c=null,a=await r.requestReferenceSpace(o),j0.setContext(r),j0.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(r!==null)return r.environmentBlendMode},this.getDepthTexture=function(){return M.getDepthTexture()};function j(X){for(let t0=0;t0<X.removed.length;t0++){const m0=X.removed[t0],s0=y.indexOf(m0);s0>=0&&(y[s0]=null,T[s0].disconnect(m0))}for(let t0=0;t0<X.added.length;t0++){const m0=X.added[t0];let s0=y.indexOf(m0);if(s0===-1){for(let k0=0;k0<T.length;k0++)if(k0>=y.length){y.push(m0),s0=k0;break}else if(y[k0]===null){y[k0]=m0,s0=k0;break}if(s0===-1)break}const E0=T[s0];E0&&E0.connect(m0)}}const G=new N,Q=new N;function V(X,t0,m0){G.setFromMatrixPosition(t0.matrixWorld),Q.setFromMatrixPosition(m0.matrixWorld);const s0=G.distanceTo(Q),E0=t0.projectionMatrix.elements,k0=m0.projectionMatrix.elements,T0=E0[14]/(E0[10]-1),it=E0[14]/(E0[10]+1),tt=(E0[9]+1)/E0[5],N0=(E0[9]-1)/E0[5],b=(E0[8]-1)/E0[0],Rt=(k0[8]+1)/k0[0],F0=T0*b,O0=T0*Rt,x0=s0/(-b+Rt),J0=x0*-b;if(t0.matrixWorld.decompose(X.position,X.quaternion,X.scale),X.translateX(J0),X.translateZ(x0),X.matrixWorld.compose(X.position,X.quaternion,X.scale),X.matrixWorldInverse.copy(X.matrixWorld).invert(),E0[10]===-1)X.projectionMatrix.copy(t0.projectionMatrix),X.projectionMatrixInverse.copy(t0.projectionMatrixInverse);else{const g0=T0+x0,E=it+x0,_=F0-J0,F=O0+(s0-J0),q=tt*it/E*g0,K=N0*it/E*g0;X.projectionMatrix.makePerspective(_,F,q,K,g0,E),X.projectionMatrixInverse.copy(X.projectionMatrix).invert()}}function r0(X,t0){t0===null?X.matrixWorld.copy(X.matrix):X.matrixWorld.multiplyMatrices(t0.matrixWorld,X.matrix),X.matrixWorldInverse.copy(X.matrixWorld).invert()}this.updateCamera=function(X){if(r===null)return;let t0=X.near,m0=X.far;M.texture!==null&&(M.depthNear>0&&(t0=M.depthNear),M.depthFar>0&&(m0=M.depthFar)),x.near=I.near=P.near=t0,x.far=I.far=P.far=m0,(w!==x.near||Y!==x.far)&&(r.updateRenderState({depthNear:x.near,depthFar:x.far}),w=x.near,Y=x.far),P.layers.mask=X.layers.mask|2,I.layers.mask=X.layers.mask|4,x.layers.mask=P.layers.mask|I.layers.mask;const s0=X.parent,E0=x.cameras;r0(x,s0);for(let k0=0;k0<E0.length;k0++)r0(E0[k0],s0);E0.length===2?V(x,P,I):x.projectionMatrix.copy(P.projectionMatrix),h0(X,x,s0)};function h0(X,t0,m0){m0===null?X.matrix.copy(t0.matrixWorld):(X.matrix.copy(m0.matrixWorld),X.matrix.invert(),X.matrix.multiply(t0.matrixWorld)),X.matrix.decompose(X.position,X.quaternion,X.scale),X.updateMatrixWorld(!0),X.projectionMatrix.copy(t0.projectionMatrix),X.projectionMatrixInverse.copy(t0.projectionMatrixInverse),X.isPerspectiveCamera&&(X.fov=Un*2*Math.atan(1/X.projectionMatrix.elements[5]),X.zoom=1)}this.getCamera=function(){return x},this.getFoveation=function(){if(!(f===null&&m===null))return l},this.setFoveation=function(X){l=X,f!==null&&(f.fixedFoveation=X),m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=X)},this.hasDepthSensing=function(){return M.texture!==null},this.getDepthSensingMesh=function(){return M.getMesh(x)};let v0=null;function U0(X,t0){if(u=t0.getViewerPose(c||a),v=t0,u!==null){const m0=u.views;m!==null&&(t.setRenderTargetFramebuffer(A,m.framebuffer),t.setRenderTarget(A));let s0=!1;m0.length!==x.cameras.length&&(x.cameras.length=0,s0=!0);for(let T0=0;T0<m0.length;T0++){const it=m0[T0];let tt=null;if(m!==null)tt=m.getViewport(it);else{const b=d.getViewSubImage(f,it);tt=b.viewport,T0===0&&(t.setRenderTargetTextures(A,b.colorTexture,f.ignoreDepthValues?void 0:b.depthStencilTexture),t.setRenderTarget(A))}let N0=S[T0];N0===void 0&&(N0=new Lt,N0.layers.enable(T0),N0.viewport=new rt,S[T0]=N0),N0.matrix.fromArray(it.transform.matrix),N0.matrix.decompose(N0.position,N0.quaternion,N0.scale),N0.projectionMatrix.fromArray(it.projectionMatrix),N0.projectionMatrixInverse.copy(N0.projectionMatrix).invert(),N0.viewport.set(tt.x,tt.y,tt.width,tt.height),T0===0&&(x.matrix.copy(N0.matrix),x.matrix.decompose(x.position,x.quaternion,x.scale)),s0===!0&&x.cameras.push(N0)}const E0=r.enabledFeatures;if(E0&&E0.includes("depth-sensing")&&r.depthUsage=="gpu-optimized"&&d){const T0=d.getDepthInformation(m0[0]);T0&&T0.isValid&&T0.texture&&M.init(t,T0,r.renderState)}}for(let m0=0;m0<T.length;m0++){const s0=y[m0],E0=T[m0];s0!==null&&E0!==void 0&&E0.update(s0,t0,c||a)}v0&&v0(X,t0),t0.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:t0}),v=null}const j0=new Ai;j0.setAnimationLoop(U0),this.setAnimationLoop=function(X){v0=X},this.dispose=function(){}}}const be=new re,q4=new st;function Z4(i,t){function e(p,h){p.matrixAutoUpdate===!0&&p.updateMatrix(),h.value.copy(p.matrix)}function n(p,h){h.color.getRGB(p.fogColor.value,Si(i)),h.isFog?(p.fogNear.value=h.near,p.fogFar.value=h.far):h.isFogExp2&&(p.fogDensity.value=h.density)}function r(p,h,A,T,y){h.isMeshBasicMaterial||h.isMeshLambertMaterial?s(p,h):h.isMeshToonMaterial?(s(p,h),d(p,h)):h.isMeshPhongMaterial?(s(p,h),u(p,h)):h.isMeshStandardMaterial?(s(p,h),f(p,h),h.isMeshPhysicalMaterial&&m(p,h,y)):h.isMeshMatcapMaterial?(s(p,h),v(p,h)):h.isMeshDepthMaterial?s(p,h):h.isMeshDistanceMaterial?(s(p,h),M(p,h)):h.isMeshNormalMaterial?s(p,h):h.isLineBasicMaterial?(a(p,h),h.isLineDashedMaterial&&o(p,h)):h.isPointsMaterial?l(p,h,A,T):h.isSpriteMaterial?c(p,h):h.isShadowMaterial?(p.color.value.copy(h.color),p.opacity.value=h.opacity):h.isShaderMaterial&&(h.uniformsNeedUpdate=!1)}function s(p,h){p.opacity.value=h.opacity,h.color&&p.diffuse.value.copy(h.color),h.emissive&&p.emissive.value.copy(h.emissive).multiplyScalar(h.emissiveIntensity),h.map&&(p.map.value=h.map,e(h.map,p.mapTransform)),h.alphaMap&&(p.alphaMap.value=h.alphaMap,e(h.alphaMap,p.alphaMapTransform)),h.bumpMap&&(p.bumpMap.value=h.bumpMap,e(h.bumpMap,p.bumpMapTransform),p.bumpScale.value=h.bumpScale,h.side===Et&&(p.bumpScale.value*=-1)),h.normalMap&&(p.normalMap.value=h.normalMap,e(h.normalMap,p.normalMapTransform),p.normalScale.value.copy(h.normalScale),h.side===Et&&p.normalScale.value.negate()),h.displacementMap&&(p.displacementMap.value=h.displacementMap,e(h.displacementMap,p.displacementMapTransform),p.displacementScale.value=h.displacementScale,p.displacementBias.value=h.displacementBias),h.emissiveMap&&(p.emissiveMap.value=h.emissiveMap,e(h.emissiveMap,p.emissiveMapTransform)),h.specularMap&&(p.specularMap.value=h.specularMap,e(h.specularMap,p.specularMapTransform)),h.alphaTest>0&&(p.alphaTest.value=h.alphaTest);const A=t.get(h),T=A.envMap,y=A.envMapRotation;T&&(p.envMap.value=T,be.copy(y),be.x*=-1,be.y*=-1,be.z*=-1,T.isCubeTexture&&T.isRenderTargetTexture===!1&&(be.y*=-1,be.z*=-1),p.envMapRotation.value.setFromMatrix4(q4.makeRotationFromEuler(be)),p.flipEnvMap.value=T.isCubeTexture&&T.isRenderTargetTexture===!1?-1:1,p.reflectivity.value=h.reflectivity,p.ior.value=h.ior,p.refractionRatio.value=h.refractionRatio),h.lightMap&&(p.lightMap.value=h.lightMap,p.lightMapIntensity.value=h.lightMapIntensity,e(h.lightMap,p.lightMapTransform)),h.aoMap&&(p.aoMap.value=h.aoMap,p.aoMapIntensity.value=h.aoMapIntensity,e(h.aoMap,p.aoMapTransform))}function a(p,h){p.diffuse.value.copy(h.color),p.opacity.value=h.opacity,h.map&&(p.map.value=h.map,e(h.map,p.mapTransform))}function o(p,h){p.dashSize.value=h.dashSize,p.totalSize.value=h.dashSize+h.gapSize,p.scale.value=h.scale}function l(p,h,A,T){p.diffuse.value.copy(h.color),p.opacity.value=h.opacity,p.size.value=h.size*A,p.scale.value=T*.5,h.map&&(p.map.value=h.map,e(h.map,p.uvTransform)),h.alphaMap&&(p.alphaMap.value=h.alphaMap,e(h.alphaMap,p.alphaMapTransform)),h.alphaTest>0&&(p.alphaTest.value=h.alphaTest)}function c(p,h){p.diffuse.value.copy(h.color),p.opacity.value=h.opacity,p.rotation.value=h.rotation,h.map&&(p.map.value=h.map,e(h.map,p.mapTransform)),h.alphaMap&&(p.alphaMap.value=h.alphaMap,e(h.alphaMap,p.alphaMapTransform)),h.alphaTest>0&&(p.alphaTest.value=h.alphaTest)}function u(p,h){p.specular.value.copy(h.specular),p.shininess.value=Math.max(h.shininess,1e-4)}function d(p,h){h.gradientMap&&(p.gradientMap.value=h.gradientMap)}function f(p,h){p.metalness.value=h.metalness,h.metalnessMap&&(p.metalnessMap.value=h.metalnessMap,e(h.metalnessMap,p.metalnessMapTransform)),p.roughness.value=h.roughness,h.roughnessMap&&(p.roughnessMap.value=h.roughnessMap,e(h.roughnessMap,p.roughnessMapTransform)),h.envMap&&(p.envMapIntensity.value=h.envMapIntensity)}function m(p,h,A){p.ior.value=h.ior,h.sheen>0&&(p.sheenColor.value.copy(h.sheenColor).multiplyScalar(h.sheen),p.sheenRoughness.value=h.sheenRoughness,h.sheenColorMap&&(p.sheenColorMap.value=h.sheenColorMap,e(h.sheenColorMap,p.sheenColorMapTransform)),h.sheenRoughnessMap&&(p.sheenRoughnessMap.value=h.sheenRoughnessMap,e(h.sheenRoughnessMap,p.sheenRoughnessMapTransform))),h.clearcoat>0&&(p.clearcoat.value=h.clearcoat,p.clearcoatRoughness.value=h.clearcoatRoughness,h.clearcoatMap&&(p.clearcoatMap.value=h.clearcoatMap,e(h.clearcoatMap,p.clearcoatMapTransform)),h.clearcoatRoughnessMap&&(p.clearcoatRoughnessMap.value=h.clearcoatRoughnessMap,e(h.clearcoatRoughnessMap,p.clearcoatRoughnessMapTransform)),h.clearcoatNormalMap&&(p.clearcoatNormalMap.value=h.clearcoatNormalMap,e(h.clearcoatNormalMap,p.clearcoatNormalMapTransform),p.clearcoatNormalScale.value.copy(h.clearcoatNormalScale),h.side===Et&&p.clearcoatNormalScale.value.negate())),h.dispersion>0&&(p.dispersion.value=h.dispersion),h.iridescence>0&&(p.iridescence.value=h.iridescence,p.iridescenceIOR.value=h.iridescenceIOR,p.iridescenceThicknessMinimum.value=h.iridescenceThicknessRange[0],p.iridescenceThicknessMaximum.value=h.iridescenceThicknessRange[1],h.iridescenceMap&&(p.iridescenceMap.value=h.iridescenceMap,e(h.iridescenceMap,p.iridescenceMapTransform)),h.iridescenceThicknessMap&&(p.iridescenceThicknessMap.value=h.iridescenceThicknessMap,e(h.iridescenceThicknessMap,p.iridescenceThicknessMapTransform))),h.transmission>0&&(p.transmission.value=h.transmission,p.transmissionSamplerMap.value=A.texture,p.transmissionSamplerSize.value.set(A.width,A.height),h.transmissionMap&&(p.transmissionMap.value=h.transmissionMap,e(h.transmissionMap,p.transmissionMapTransform)),p.thickness.value=h.thickness,h.thicknessMap&&(p.thicknessMap.value=h.thicknessMap,e(h.thicknessMap,p.thicknessMapTransform)),p.attenuationDistance.value=h.attenuationDistance,p.attenuationColor.value.copy(h.attenuationColor)),h.anisotropy>0&&(p.anisotropyVector.value.set(h.anisotropy*Math.cos(h.anisotropyRotation),h.anisotropy*Math.sin(h.anisotropyRotation)),h.anisotropyMap&&(p.anisotropyMap.value=h.anisotropyMap,e(h.anisotropyMap,p.anisotropyMapTransform))),p.specularIntensity.value=h.specularIntensity,p.specularColor.value.copy(h.specularColor),h.specularColorMap&&(p.specularColorMap.value=h.specularColorMap,e(h.specularColorMap,p.specularColorMapTransform)),h.specularIntensityMap&&(p.specularIntensityMap.value=h.specularIntensityMap,e(h.specularIntensityMap,p.specularIntensityMapTransform))}function v(p,h){h.matcap&&(p.matcap.value=h.matcap)}function M(p,h){const A=t.get(h).light;p.referencePosition.value.setFromMatrixPosition(A.matrixWorld),p.nearDistance.value=A.shadow.camera.near,p.farDistance.value=A.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:r}}function K4(i,t,e,n){let r={},s={},a=[];const o=i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS);function l(A,T){const y=T.program;n.uniformBlockBinding(A,y)}function c(A,T){let y=r[A.id];y===void 0&&(v(A),y=u(A),r[A.id]=y,A.addEventListener("dispose",p));const U=T.program;n.updateUBOMapping(A,U);const R=t.render.frame;s[A.id]!==R&&(f(A),s[A.id]=R)}function u(A){const T=d();A.__bindingPointIndex=T;const y=i.createBuffer(),U=A.__size,R=A.usage;return i.bindBuffer(i.UNIFORM_BUFFER,y),i.bufferData(i.UNIFORM_BUFFER,U,R),i.bindBuffer(i.UNIFORM_BUFFER,null),i.bindBufferBase(i.UNIFORM_BUFFER,T,y),y}function d(){for(let A=0;A<o;A++)if(a.indexOf(A)===-1)return a.push(A),A;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function f(A){const T=r[A.id],y=A.uniforms,U=A.__cache;i.bindBuffer(i.UNIFORM_BUFFER,T);for(let R=0,P=y.length;R<P;R++){const I=Array.isArray(y[R])?y[R]:[y[R]];for(let S=0,x=I.length;S<x;S++){const w=I[S];if(m(w,R,S,U)===!0){const Y=w.__offset,z=Array.isArray(w.value)?w.value:[w.value];let W=0;for(let j=0;j<z.length;j++){const G=z[j],Q=M(G);typeof G=="number"||typeof G=="boolean"?(w.__data[0]=G,i.bufferSubData(i.UNIFORM_BUFFER,Y+W,w.__data)):G.isMatrix3?(w.__data[0]=G.elements[0],w.__data[1]=G.elements[1],w.__data[2]=G.elements[2],w.__data[3]=0,w.__data[4]=G.elements[3],w.__data[5]=G.elements[4],w.__data[6]=G.elements[5],w.__data[7]=0,w.__data[8]=G.elements[6],w.__data[9]=G.elements[7],w.__data[10]=G.elements[8],w.__data[11]=0):(G.toArray(w.__data,W),W+=Q.storage/Float32Array.BYTES_PER_ELEMENT)}i.bufferSubData(i.UNIFORM_BUFFER,Y,w.__data)}}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function m(A,T,y,U){const R=A.value,P=T+"_"+y;if(U[P]===void 0)return typeof R=="number"||typeof R=="boolean"?U[P]=R:U[P]=R.clone(),!0;{const I=U[P];if(typeof R=="number"||typeof R=="boolean"){if(I!==R)return U[P]=R,!0}else if(I.equals(R)===!1)return I.copy(R),!0}return!1}function v(A){const T=A.uniforms;let y=0;const U=16;for(let P=0,I=T.length;P<I;P++){const S=Array.isArray(T[P])?T[P]:[T[P]];for(let x=0,w=S.length;x<w;x++){const Y=S[x],z=Array.isArray(Y.value)?Y.value:[Y.value];for(let W=0,j=z.length;W<j;W++){const G=z[W],Q=M(G),V=y%U,r0=V%Q.boundary,h0=V+r0;y+=r0,h0!==0&&U-h0<Q.storage&&(y+=U-h0),Y.__data=new Float32Array(Q.storage/Float32Array.BYTES_PER_ELEMENT),Y.__offset=y,y+=Q.storage}}}const R=y%U;return R>0&&(y+=U-R),A.__size=y,A.__cache={},this}function M(A){const T={boundary:0,storage:0};return typeof A=="number"||typeof A=="boolean"?(T.boundary=4,T.storage=4):A.isVector2?(T.boundary=8,T.storage=8):A.isVector3||A.isColor?(T.boundary=16,T.storage=12):A.isVector4?(T.boundary=16,T.storage=16):A.isMatrix3?(T.boundary=48,T.storage=48):A.isMatrix4?(T.boundary=64,T.storage=64):A.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",A),T}function p(A){const T=A.target;T.removeEventListener("dispose",p);const y=a.indexOf(T.__bindingPointIndex);a.splice(y,1),i.deleteBuffer(r[T.id]),delete r[T.id],delete s[T.id]}function h(){for(const A in r)i.deleteBuffer(r[A]);a=[],r={},s={}}return{bind:l,update:c,dispose:h}}class j4{constructor(t={}){const{canvas:e=P9(),context:n=null,depth:r=!0,stencil:s=!1,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:u="default",failIfMajorPerformanceCaveat:d=!1,reverseDepthBuffer:f=!1}=t;this.isWebGLRenderer=!0;let m;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");m=n.getContextAttributes().alpha}else m=a;const v=new Uint32Array(4),M=new Int32Array(4);let p=null,h=null;const A=[],T=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Dt,this.toneMapping=_e,this.toneMappingExposure=1;const y=this;let U=!1,R=0,P=0,I=null,S=-1,x=null;const w=new rt,Y=new rt;let z=null;const W=new Y0(0);let j=0,G=e.width,Q=e.height,V=1,r0=null,h0=null;const v0=new rt(0,0,G,Q),U0=new rt(0,0,G,Q);let j0=!1;const X=new Ti;let t0=!1,m0=!1;this.transmissionResolutionScale=1;const s0=new st,E0=new st,k0=new N,T0=new rt,it={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let tt=!1;function N0(){return I===null?V:1}let b=n;function Rt(g,D){return e.getContext(g,D)}try{const g={alpha:!0,depth:r,stencil:s,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:u,failIfMajorPerformanceCaveat:d};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${Fn}`),e.addEventListener("webglcontextlost",Z,!1),e.addEventListener("webglcontextrestored",l0,!1),e.addEventListener("webglcontextcreationerror",o0,!1),b===null){const D="webgl2";if(b=Rt(D,g),b===null)throw Rt(D)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(g){throw console.error("THREE.WebGLRenderer: "+g.message),g}let F0,O0,x0,J0,g0,E,_,F,q,K,k,_0,a0,u0,z0,J,d0,y0,b0,f0,B0,P0,$0,C;function n0(){F0=new a3(b),F0.init(),P0=new G4(b,F0),O0=new Q2(b,F0,t,P0),x0=new H4(b,F0),O0.reverseDepthBuffer&&f&&x0.buffers.depth.setReversed(!0),J0=new c3(b),g0=new R4,E=new V4(b,F0,x0,g0,O0,P0,J0),_=new e3(y),F=new s3(y),q=new m5(b),$0=new $2(b,q),K=new o3(b,q,J0,$0),k=new u3(b,K,q,J0),b0=new h3(b,O0,E),J=new t3(g0),_0=new A4(y,_,F,F0,O0,$0,J),a0=new Z4(y,g0),u0=new C4,z0=new N4(F0),y0=new j2(y,_,F,x0,k,m,l),d0=new B4(y,k,O0),C=new K4(b,J0,O0,x0),f0=new J2(b,F0,J0),B0=new l3(b,F0,J0),J0.programs=_0.programs,y.capabilities=O0,y.extensions=F0,y.properties=g0,y.renderLists=u0,y.shadowMap=d0,y.state=x0,y.info=J0}n0();const H=new Y4(y,b);this.xr=H,this.getContext=function(){return b},this.getContextAttributes=function(){return b.getContextAttributes()},this.forceContextLoss=function(){const g=F0.get("WEBGL_lose_context");g&&g.loseContext()},this.forceContextRestore=function(){const g=F0.get("WEBGL_lose_context");g&&g.restoreContext()},this.getPixelRatio=function(){return V},this.setPixelRatio=function(g){g!==void 0&&(V=g,this.setSize(G,Q,!1))},this.getSize=function(g){return g.set(G,Q)},this.setSize=function(g,D,O=!0){if(H.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}G=g,Q=D,e.width=Math.floor(g*V),e.height=Math.floor(D*V),O===!0&&(e.style.width=g+"px",e.style.height=D+"px"),this.setViewport(0,0,g,D)},this.getDrawingBufferSize=function(g){return g.set(G*V,Q*V).floor()},this.setDrawingBufferSize=function(g,D,O){G=g,Q=D,V=O,e.width=Math.floor(g*O),e.height=Math.floor(D*O),this.setViewport(0,0,g,D)},this.getCurrentViewport=function(g){return g.copy(w)},this.getViewport=function(g){return g.copy(v0)},this.setViewport=function(g,D,O,B){g.isVector4?v0.set(g.x,g.y,g.z,g.w):v0.set(g,D,O,B),x0.viewport(w.copy(v0).multiplyScalar(V).round())},this.getScissor=function(g){return g.copy(U0)},this.setScissor=function(g,D,O,B){g.isVector4?U0.set(g.x,g.y,g.z,g.w):U0.set(g,D,O,B),x0.scissor(Y.copy(U0).multiplyScalar(V).round())},this.getScissorTest=function(){return j0},this.setScissorTest=function(g){x0.setScissorTest(j0=g)},this.setOpaqueSort=function(g){r0=g},this.setTransparentSort=function(g){h0=g},this.getClearColor=function(g){return g.copy(y0.getClearColor())},this.setClearColor=function(){y0.setClearColor(...arguments)},this.getClearAlpha=function(){return y0.getClearAlpha()},this.setClearAlpha=function(){y0.setClearAlpha(...arguments)},this.clear=function(g=!0,D=!0,O=!0){let B=0;if(g){let L=!1;if(I!==null){const $=I.texture.format;L=$===Gn||$===Vn||$===Hn}if(L){const $=I.texture.type,i0=$===ie||$===Le||$===v1||$===a1||$===Bn||$===zn,c0=y0.getClearColor(),p0=y0.getClearAlpha(),A0=c0.r,R0=c0.g,M0=c0.b;i0?(v[0]=A0,v[1]=R0,v[2]=M0,v[3]=p0,b.clearBufferuiv(b.COLOR,0,v)):(M[0]=A0,M[1]=R0,M[2]=M0,M[3]=p0,b.clearBufferiv(b.COLOR,0,M))}else B|=b.COLOR_BUFFER_BIT}D&&(B|=b.DEPTH_BUFFER_BIT),O&&(B|=b.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),b.clear(B)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",Z,!1),e.removeEventListener("webglcontextrestored",l0,!1),e.removeEventListener("webglcontextcreationerror",o0,!1),y0.dispose(),u0.dispose(),z0.dispose(),g0.dispose(),_.dispose(),F.dispose(),k.dispose(),$0.dispose(),C.dispose(),_0.dispose(),H.dispose(),H.removeEventListener("sessionstart",Zn),H.removeEventListener("sessionend",Kn),ve.stop()};function Z(g){g.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),U=!0}function l0(){console.log("THREE.WebGLRenderer: Context Restored."),U=!1;const g=J0.autoReset,D=d0.enabled,O=d0.autoUpdate,B=d0.needsUpdate,L=d0.type;n0(),J0.autoReset=g,d0.enabled=D,d0.autoUpdate=O,d0.needsUpdate=B,d0.type=L}function o0(g){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",g.statusMessage)}function w0(g){const D=g.target;D.removeEventListener("dispose",w0),et(D)}function et(g){ft(g),g0.remove(g)}function ft(g){const D=g0.get(g).programs;D!==void 0&&(D.forEach(function(O){_0.releaseProgram(O)}),g.isShaderMaterial&&_0.releaseShaderCache(g))}this.renderBufferDirect=function(g,D,O,B,L,$){D===null&&(D=it);const i0=L.isMesh&&L.matrixWorld.determinant()<0,c0=Li(g,D,O,B,L);x0.setMaterial(B,i0);let p0=O.index,A0=1;if(B.wireframe===!0){if(p0=K.getWireframeAttribute(O),p0===void 0)return;A0=2}const R0=O.drawRange,M0=O.attributes.position;let H0=R0.start*A0,W0=(R0.start+R0.count)*A0;$!==null&&(H0=Math.max(H0,$.start*A0),W0=Math.min(W0,($.start+$.count)*A0)),p0!==null?(H0=Math.max(H0,0),W0=Math.min(W0,p0.count)):M0!=null&&(H0=Math.max(H0,0),W0=Math.min(W0,M0.count));const at=W0-H0;if(at<0||at===1/0)return;$0.setup(L,B,c0,O,p0);let nt,V0=f0;if(p0!==null&&(nt=q.get(p0),V0=B0,V0.setIndex(nt)),L.isMesh)B.wireframe===!0?(x0.setLineWidth(B.wireframeLinewidth*N0()),V0.setMode(b.LINES)):V0.setMode(b.TRIANGLES);else if(L.isLine){let S0=B.linewidth;S0===void 0&&(S0=1),x0.setLineWidth(S0*N0()),L.isLineSegments?V0.setMode(b.LINES):L.isLineLoop?V0.setMode(b.LINE_LOOP):V0.setMode(b.LINE_STRIP)}else L.isPoints?V0.setMode(b.POINTS):L.isSprite&&V0.setMode(b.TRIANGLES);if(L.isBatchedMesh)if(L._multiDrawInstances!==null)Ae("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),V0.renderMultiDrawInstances(L._multiDrawStarts,L._multiDrawCounts,L._multiDrawCount,L._multiDrawInstances);else if(F0.get("WEBGL_multi_draw"))V0.renderMultiDraw(L._multiDrawStarts,L._multiDrawCounts,L._multiDrawCount);else{const S0=L._multiDrawStarts,dt=L._multiDrawCounts,X0=L._multiDrawCount,It=p0?q.get(p0).bytesPerElement:1,Fe=g0.get(B).currentProgram.getUniforms();for(let Tt=0;Tt<X0;Tt++)Fe.setValue(b,"_gl_DrawID",Tt),V0.render(S0[Tt]/It,dt[Tt])}else if(L.isInstancedMesh)V0.renderInstances(H0,at,L.count);else if(O.isInstancedBufferGeometry){const S0=O._maxInstanceCount!==void 0?O._maxInstanceCount:1/0,dt=Math.min(O.instanceCount,S0);V0.renderInstances(H0,at,dt)}else V0.render(H0,at)};function q0(g,D,O){g.transparent===!0&&g.side===Jt&&g.forceSinglePass===!1?(g.side=Et,g.needsUpdate=!0,b1(g,D,O),g.side=ge,g.needsUpdate=!0,b1(g,D,O),g.side=Jt):b1(g,D,O)}this.compile=function(g,D,O=null){O===null&&(O=g),h=z0.get(O),h.init(D),T.push(h),O.traverseVisible(function(L){L.isLight&&L.layers.test(D.layers)&&(h.pushLight(L),L.castShadow&&h.pushShadow(L))}),g!==O&&g.traverseVisible(function(L){L.isLight&&L.layers.test(D.layers)&&(h.pushLight(L),L.castShadow&&h.pushShadow(L))}),h.setupLights();const B=new Set;return g.traverse(function(L){if(!(L.isMesh||L.isPoints||L.isLine||L.isSprite))return;const $=L.material;if($)if(Array.isArray($))for(let i0=0;i0<$.length;i0++){const c0=$[i0];q0(c0,O,L),B.add(c0)}else q0($,O,L),B.add($)}),h=T.pop(),B},this.compileAsync=function(g,D,O=null){const B=this.compile(g,D,O);return new Promise(L=>{function $(){if(B.forEach(function(i0){g0.get(i0).currentProgram.isReady()&&B.delete(i0)}),B.size===0){L(g);return}setTimeout($,10)}F0.get("KHR_parallel_shader_compile")!==null?$():setTimeout($,10)})};let Ut=null;function Xt(g){Ut&&Ut(g)}function Zn(){ve.stop()}function Kn(){ve.start()}const ve=new Ai;ve.setAnimationLoop(Xt),typeof self<"u"&&ve.setContext(self),this.setAnimationLoop=function(g){Ut=g,H.setAnimationLoop(g),g===null?ve.stop():ve.start()},H.addEventListener("sessionstart",Zn),H.addEventListener("sessionend",Kn),this.render=function(g,D){if(D!==void 0&&D.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(U===!0)return;if(g.matrixWorldAutoUpdate===!0&&g.updateMatrixWorld(),D.parent===null&&D.matrixWorldAutoUpdate===!0&&D.updateMatrixWorld(),H.enabled===!0&&H.isPresenting===!0&&(H.cameraAutoUpdate===!0&&H.updateCamera(D),D=H.getCamera()),g.isScene===!0&&g.onBeforeRender(y,g,D,I),h=z0.get(g,T.length),h.init(D),T.push(h),E0.multiplyMatrices(D.projectionMatrix,D.matrixWorldInverse),X.setFromProjectionMatrix(E0),m0=this.localClippingEnabled,t0=J.init(this.clippingPlanes,m0),p=u0.get(g,A.length),p.init(),A.push(p),H.enabled===!0&&H.isPresenting===!0){const $=y.xr.getDepthSensingMesh();$!==null&&d8($,D,-1/0,y.sortObjects)}d8(g,D,0,y.sortObjects),p.finish(),y.sortObjects===!0&&p.sort(r0,h0),tt=H.enabled===!1||H.isPresenting===!1||H.hasDepthSensing()===!1,tt&&y0.addToRenderList(p,g),this.info.render.frame++,t0===!0&&J.beginShadows();const O=h.state.shadowsArray;d0.render(O,g,D),t0===!0&&J.endShadows(),this.info.autoReset===!0&&this.info.reset();const B=p.opaque,L=p.transmissive;if(h.setupLights(),D.isArrayCamera){const $=D.cameras;if(L.length>0)for(let i0=0,c0=$.length;i0<c0;i0++){const p0=$[i0];$n(B,L,g,p0)}tt&&y0.render(g);for(let i0=0,c0=$.length;i0<c0;i0++){const p0=$[i0];jn(p,g,p0,p0.viewport)}}else L.length>0&&$n(B,L,g,D),tt&&y0.render(g),jn(p,g,D);I!==null&&P===0&&(E.updateMultisampleRenderTarget(I),E.updateRenderTargetMipmap(I)),g.isScene===!0&&g.onAfterRender(y,g,D),$0.resetDefaultState(),S=-1,x=null,T.pop(),T.length>0?(h=T[T.length-1],t0===!0&&J.setGlobalState(y.clippingPlanes,h.state.camera)):h=null,A.pop(),A.length>0?p=A[A.length-1]:p=null};function d8(g,D,O,B){if(g.visible===!1)return;if(g.layers.test(D.layers)){if(g.isGroup)O=g.renderOrder;else if(g.isLOD)g.autoUpdate===!0&&g.update(D);else if(g.isLight)h.pushLight(g),g.castShadow&&h.pushShadow(g);else if(g.isSprite){if(!g.frustumCulled||X.intersectsSprite(g)){B&&T0.setFromMatrixPosition(g.matrixWorld).applyMatrix4(E0);const i0=k.update(g),c0=g.material;c0.visible&&p.push(g,i0,c0,O,T0.z,null)}}else if((g.isMesh||g.isLine||g.isPoints)&&(!g.frustumCulled||X.intersectsObject(g))){const i0=k.update(g),c0=g.material;if(B&&(g.boundingSphere!==void 0?(g.boundingSphere===null&&g.computeBoundingSphere(),T0.copy(g.boundingSphere.center)):(i0.boundingSphere===null&&i0.computeBoundingSphere(),T0.copy(i0.boundingSphere.center)),T0.applyMatrix4(g.matrixWorld).applyMatrix4(E0)),Array.isArray(c0)){const p0=i0.groups;for(let A0=0,R0=p0.length;A0<R0;A0++){const M0=p0[A0],H0=c0[M0.materialIndex];H0&&H0.visible&&p.push(g,i0,H0,O,T0.z,M0)}}else c0.visible&&p.push(g,i0,c0,O,T0.z,null)}}const $=g.children;for(let i0=0,c0=$.length;i0<c0;i0++)d8($[i0],D,O,B)}function jn(g,D,O,B){const L=g.opaque,$=g.transmissive,i0=g.transparent;h.setupLightsView(O),t0===!0&&J.setGlobalState(y.clippingPlanes,O),B&&x0.viewport(w.copy(B)),L.length>0&&T1(L,D,O),$.length>0&&T1($,D,O),i0.length>0&&T1(i0,D,O),x0.buffers.depth.setTest(!0),x0.buffers.depth.setMask(!0),x0.buffers.color.setMask(!0),x0.setPolygonOffset(!1)}function $n(g,D,O,B){if((O.isScene===!0?O.overrideMaterial:null)!==null)return;h.state.transmissionRenderTarget[B.id]===void 0&&(h.state.transmissionRenderTarget[B.id]=new Ue(1,1,{generateMipmaps:!0,type:F0.has("EXT_color_buffer_half_float")||F0.has("EXT_color_buffer_float")?x1:ie,minFilter:De,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:G0.workingColorSpace}));const $=h.state.transmissionRenderTarget[B.id],i0=B.viewport||w;$.setSize(i0.z*y.transmissionResolutionScale,i0.w*y.transmissionResolutionScale);const c0=y.getRenderTarget();y.setRenderTarget($),y.getClearColor(W),j=y.getClearAlpha(),j<1&&y.setClearColor(16777215,.5),y.clear(),tt&&y0.render(O);const p0=y.toneMapping;y.toneMapping=_e;const A0=B.viewport;if(B.viewport!==void 0&&(B.viewport=void 0),h.setupLightsView(B),t0===!0&&J.setGlobalState(y.clippingPlanes,B),T1(g,O,B),E.updateMultisampleRenderTarget($),E.updateRenderTargetMipmap($),F0.has("WEBGL_multisampled_render_to_texture")===!1){let R0=!1;for(let M0=0,H0=D.length;M0<H0;M0++){const W0=D[M0],at=W0.object,nt=W0.geometry,V0=W0.material,S0=W0.group;if(V0.side===Jt&&at.layers.test(B.layers)){const dt=V0.side;V0.side=Et,V0.needsUpdate=!0,Jn(at,O,B,nt,V0,S0),V0.side=dt,V0.needsUpdate=!0,R0=!0}}R0===!0&&(E.updateMultisampleRenderTarget($),E.updateRenderTargetMipmap($))}y.setRenderTarget(c0),y.setClearColor(W,j),A0!==void 0&&(B.viewport=A0),y.toneMapping=p0}function T1(g,D,O){const B=D.isScene===!0?D.overrideMaterial:null;for(let L=0,$=g.length;L<$;L++){const i0=g[L],c0=i0.object,p0=i0.geometry,A0=B===null?i0.material:B,R0=i0.group;c0.layers.test(O.layers)&&Jn(c0,D,O,p0,A0,R0)}}function Jn(g,D,O,B,L,$){g.onBeforeRender(y,D,O,B,L,$),g.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse,g.matrixWorld),g.normalMatrix.getNormalMatrix(g.modelViewMatrix),L.onBeforeRender(y,D,O,B,g,$),L.transparent===!0&&L.side===Jt&&L.forceSinglePass===!1?(L.side=Et,L.needsUpdate=!0,y.renderBufferDirect(O,D,B,L,g,$),L.side=ge,L.needsUpdate=!0,y.renderBufferDirect(O,D,B,L,g,$),L.side=Jt):y.renderBufferDirect(O,D,B,L,g,$),g.onAfterRender(y,D,O,B,L,$)}function b1(g,D,O){D.isScene!==!0&&(D=it);const B=g0.get(g),L=h.state.lights,$=h.state.shadowsArray,i0=L.state.version,c0=_0.getParameters(g,L.state,$,D,O),p0=_0.getProgramCacheKey(c0);let A0=B.programs;B.environment=g.isMeshStandardMaterial?D.environment:null,B.fog=D.fog,B.envMap=(g.isMeshStandardMaterial?F:_).get(g.envMap||B.environment),B.envMapRotation=B.environment!==null&&g.envMap===null?D.environmentRotation:g.envMapRotation,A0===void 0&&(g.addEventListener("dispose",w0),A0=new Map,B.programs=A0);let R0=A0.get(p0);if(R0!==void 0){if(B.currentProgram===R0&&B.lightsStateVersion===i0)return t7(g,c0),R0}else c0.uniforms=_0.getUniforms(g),g.onBeforeCompile(c0,y),R0=_0.acquireProgram(c0,p0),A0.set(p0,R0),B.uniforms=c0.uniforms;const M0=B.uniforms;return(!g.isShaderMaterial&&!g.isRawShaderMaterial||g.clipping===!0)&&(M0.clippingPlanes=J.uniform),t7(g,c0),B.needsLights=Ii(g),B.lightsStateVersion=i0,B.needsLights&&(M0.ambientLightColor.value=L.state.ambient,M0.lightProbe.value=L.state.probe,M0.directionalLights.value=L.state.directional,M0.directionalLightShadows.value=L.state.directionalShadow,M0.spotLights.value=L.state.spot,M0.spotLightShadows.value=L.state.spotShadow,M0.rectAreaLights.value=L.state.rectArea,M0.ltc_1.value=L.state.rectAreaLTC1,M0.ltc_2.value=L.state.rectAreaLTC2,M0.pointLights.value=L.state.point,M0.pointLightShadows.value=L.state.pointShadow,M0.hemisphereLights.value=L.state.hemi,M0.directionalShadowMap.value=L.state.directionalShadowMap,M0.directionalShadowMatrix.value=L.state.directionalShadowMatrix,M0.spotShadowMap.value=L.state.spotShadowMap,M0.spotLightMatrix.value=L.state.spotLightMatrix,M0.spotLightMap.value=L.state.spotLightMap,M0.pointShadowMap.value=L.state.pointShadowMap,M0.pointShadowMatrix.value=L.state.pointShadowMatrix),B.currentProgram=R0,B.uniformsList=null,R0}function Qn(g){if(g.uniformsList===null){const D=g.currentProgram.getUniforms();g.uniformsList=r8.seqWithValue(D.seq,g.uniforms)}return g.uniformsList}function t7(g,D){const O=g0.get(g);O.outputColorSpace=D.outputColorSpace,O.batching=D.batching,O.batchingColor=D.batchingColor,O.instancing=D.instancing,O.instancingColor=D.instancingColor,O.instancingMorph=D.instancingMorph,O.skinning=D.skinning,O.morphTargets=D.morphTargets,O.morphNormals=D.morphNormals,O.morphColors=D.morphColors,O.morphTargetsCount=D.morphTargetsCount,O.numClippingPlanes=D.numClippingPlanes,O.numIntersection=D.numClipIntersection,O.vertexAlphas=D.vertexAlphas,O.vertexTangents=D.vertexTangents,O.toneMapping=D.toneMapping}function Li(g,D,O,B,L){D.isScene!==!0&&(D=it),E.resetTextureUnits();const $=D.fog,i0=B.isMeshStandardMaterial?D.environment:null,c0=I===null?y.outputColorSpace:I.isXRRenderTarget===!0?I.texture.colorSpace:l1,p0=(B.isMeshStandardMaterial?F:_).get(B.envMap||i0),A0=B.vertexColors===!0&&!!O.attributes.color&&O.attributes.color.itemSize===4,R0=!!O.attributes.tangent&&(!!B.normalMap||B.anisotropy>0),M0=!!O.morphAttributes.position,H0=!!O.morphAttributes.normal,W0=!!O.morphAttributes.color;let at=_e;B.toneMapped&&(I===null||I.isXRRenderTarget===!0)&&(at=y.toneMapping);const nt=O.morphAttributes.position||O.morphAttributes.normal||O.morphAttributes.color,V0=nt!==void 0?nt.length:0,S0=g0.get(B),dt=h.state.lights;if(t0===!0&&(m0===!0||g!==x)){const _t=g===x&&B.id===S;J.setState(B,g,_t)}let X0=!1;B.version===S0.__version?(S0.needsLights&&S0.lightsStateVersion!==dt.state.version||S0.outputColorSpace!==c0||L.isBatchedMesh&&S0.batching===!1||!L.isBatchedMesh&&S0.batching===!0||L.isBatchedMesh&&S0.batchingColor===!0&&L.colorTexture===null||L.isBatchedMesh&&S0.batchingColor===!1&&L.colorTexture!==null||L.isInstancedMesh&&S0.instancing===!1||!L.isInstancedMesh&&S0.instancing===!0||L.isSkinnedMesh&&S0.skinning===!1||!L.isSkinnedMesh&&S0.skinning===!0||L.isInstancedMesh&&S0.instancingColor===!0&&L.instanceColor===null||L.isInstancedMesh&&S0.instancingColor===!1&&L.instanceColor!==null||L.isInstancedMesh&&S0.instancingMorph===!0&&L.morphTexture===null||L.isInstancedMesh&&S0.instancingMorph===!1&&L.morphTexture!==null||S0.envMap!==p0||B.fog===!0&&S0.fog!==$||S0.numClippingPlanes!==void 0&&(S0.numClippingPlanes!==J.numPlanes||S0.numIntersection!==J.numIntersection)||S0.vertexAlphas!==A0||S0.vertexTangents!==R0||S0.morphTargets!==M0||S0.morphNormals!==H0||S0.morphColors!==W0||S0.toneMapping!==at||S0.morphTargetsCount!==V0)&&(X0=!0):(X0=!0,S0.__version=B.version);let It=S0.currentProgram;X0===!0&&(It=b1(B,D,L));let Fe=!1,Tt=!1,u1=!1;const Q0=It.getUniforms(),wt=S0.uniforms;if(x0.useProgram(It.program)&&(Fe=!0,Tt=!0,u1=!0),B.id!==S&&(S=B.id,Tt=!0),Fe||x!==g){x0.buffers.depth.getReversed()?(s0.copy(g.projectionMatrix),L9(s0),U9(s0),Q0.setValue(b,"projectionMatrix",s0)):Q0.setValue(b,"projectionMatrix",g.projectionMatrix),Q0.setValue(b,"viewMatrix",g.matrixWorldInverse);const xt=Q0.map.cameraPosition;xt!==void 0&&xt.setValue(b,k0.setFromMatrixPosition(g.matrixWorld)),O0.logarithmicDepthBuffer&&Q0.setValue(b,"logDepthBufFC",2/(Math.log(g.far+1)/Math.LN2)),(B.isMeshPhongMaterial||B.isMeshToonMaterial||B.isMeshLambertMaterial||B.isMeshBasicMaterial||B.isMeshStandardMaterial||B.isShaderMaterial)&&Q0.setValue(b,"isOrthographic",g.isOrthographicCamera===!0),x!==g&&(x=g,Tt=!0,u1=!0)}if(L.isSkinnedMesh){Q0.setOptional(b,L,"bindMatrix"),Q0.setOptional(b,L,"bindMatrixInverse");const _t=L.skeleton;_t&&(_t.boneTexture===null&&_t.computeBoneTexture(),Q0.setValue(b,"boneTexture",_t.boneTexture,E))}L.isBatchedMesh&&(Q0.setOptional(b,L,"batchingTexture"),Q0.setValue(b,"batchingTexture",L._matricesTexture,E),Q0.setOptional(b,L,"batchingIdTexture"),Q0.setValue(b,"batchingIdTexture",L._indirectTexture,E),Q0.setOptional(b,L,"batchingColorTexture"),L._colorsTexture!==null&&Q0.setValue(b,"batchingColorTexture",L._colorsTexture,E));const Ct=O.morphAttributes;if((Ct.position!==void 0||Ct.normal!==void 0||Ct.color!==void 0)&&b0.update(L,O,It),(Tt||S0.receiveShadow!==L.receiveShadow)&&(S0.receiveShadow=L.receiveShadow,Q0.setValue(b,"receiveShadow",L.receiveShadow)),B.isMeshGouraudMaterial&&B.envMap!==null&&(wt.envMap.value=p0,wt.flipEnvMap.value=p0.isCubeTexture&&p0.isRenderTargetTexture===!1?-1:1),B.isMeshStandardMaterial&&B.envMap===null&&D.environment!==null&&(wt.envMapIntensity.value=D.environmentIntensity),Tt&&(Q0.setValue(b,"toneMappingExposure",y.toneMappingExposure),S0.needsLights&&Ui(wt,u1),$&&B.fog===!0&&a0.refreshFogUniforms(wt,$),a0.refreshMaterialUniforms(wt,B,V,Q,h.state.transmissionRenderTarget[g.id]),r8.upload(b,Qn(S0),wt,E)),B.isShaderMaterial&&B.uniformsNeedUpdate===!0&&(r8.upload(b,Qn(S0),wt,E),B.uniformsNeedUpdate=!1),B.isSpriteMaterial&&Q0.setValue(b,"center",L.center),Q0.setValue(b,"modelViewMatrix",L.modelViewMatrix),Q0.setValue(b,"normalMatrix",L.normalMatrix),Q0.setValue(b,"modelMatrix",L.matrixWorld),B.isShaderMaterial||B.isRawShaderMaterial){const _t=B.uniformsGroups;for(let xt=0,f8=_t.length;xt<f8;xt++){const xe=_t[xt];C.update(xe,It),C.bind(xe,It)}}return It}function Ui(g,D){g.ambientLightColor.needsUpdate=D,g.lightProbe.needsUpdate=D,g.directionalLights.needsUpdate=D,g.directionalLightShadows.needsUpdate=D,g.pointLights.needsUpdate=D,g.pointLightShadows.needsUpdate=D,g.spotLights.needsUpdate=D,g.spotLightShadows.needsUpdate=D,g.rectAreaLights.needsUpdate=D,g.hemisphereLights.needsUpdate=D}function Ii(g){return g.isMeshLambertMaterial||g.isMeshToonMaterial||g.isMeshPhongMaterial||g.isMeshStandardMaterial||g.isShadowMaterial||g.isShaderMaterial&&g.lights===!0}this.getActiveCubeFace=function(){return R},this.getActiveMipmapLevel=function(){return P},this.getRenderTarget=function(){return I},this.setRenderTargetTextures=function(g,D,O){g0.get(g.texture).__webglTexture=D,g0.get(g.depthTexture).__webglTexture=O;const B=g0.get(g);B.__hasExternalTextures=!0,B.__autoAllocateDepthBuffer=O===void 0,B.__autoAllocateDepthBuffer||F0.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),B.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(g,D){const O=g0.get(g);O.__webglFramebuffer=D,O.__useDefaultFramebuffer=D===void 0};const Ni=b.createFramebuffer();this.setRenderTarget=function(g,D=0,O=0){I=g,R=D,P=O;let B=!0,L=null,$=!1,i0=!1;if(g){const p0=g0.get(g);if(p0.__useDefaultFramebuffer!==void 0)x0.bindFramebuffer(b.FRAMEBUFFER,null),B=!1;else if(p0.__webglFramebuffer===void 0)E.setupRenderTarget(g);else if(p0.__hasExternalTextures)E.rebindTextures(g,g0.get(g.texture).__webglTexture,g0.get(g.depthTexture).__webglTexture);else if(g.depthBuffer){const M0=g.depthTexture;if(p0.__boundDepthTexture!==M0){if(M0!==null&&g0.has(M0)&&(g.width!==M0.image.width||g.height!==M0.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");E.setupDepthRenderbuffer(g)}}const A0=g.texture;(A0.isData3DTexture||A0.isDataArrayTexture||A0.isCompressedArrayTexture)&&(i0=!0);const R0=g0.get(g).__webglFramebuffer;g.isWebGLCubeRenderTarget?(Array.isArray(R0[D])?L=R0[D][O]:L=R0[D],$=!0):g.samples>0&&E.useMultisampledRTT(g)===!1?L=g0.get(g).__webglMultisampledFramebuffer:Array.isArray(R0)?L=R0[O]:L=R0,w.copy(g.viewport),Y.copy(g.scissor),z=g.scissorTest}else w.copy(v0).multiplyScalar(V).floor(),Y.copy(U0).multiplyScalar(V).floor(),z=j0;if(O!==0&&(L=Ni),x0.bindFramebuffer(b.FRAMEBUFFER,L)&&B&&x0.drawBuffers(g,L),x0.viewport(w),x0.scissor(Y),x0.setScissorTest(z),$){const p0=g0.get(g.texture);b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_CUBE_MAP_POSITIVE_X+D,p0.__webglTexture,O)}else if(i0){const p0=g0.get(g.texture),A0=D;b.framebufferTextureLayer(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,p0.__webglTexture,O,A0)}else if(g!==null&&O!==0){const p0=g0.get(g.texture);b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,p0.__webglTexture,O)}S=-1},this.readRenderTargetPixels=function(g,D,O,B,L,$,i0){if(!(g&&g.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let c0=g0.get(g).__webglFramebuffer;if(g.isWebGLCubeRenderTarget&&i0!==void 0&&(c0=c0[i0]),c0){x0.bindFramebuffer(b.FRAMEBUFFER,c0);try{const p0=g.texture,A0=p0.format,R0=p0.type;if(!O0.textureFormatReadable(A0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!O0.textureTypeReadable(R0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}D>=0&&D<=g.width-B&&O>=0&&O<=g.height-L&&b.readPixels(D,O,B,L,P0.convert(A0),P0.convert(R0),$)}finally{const p0=I!==null?g0.get(I).__webglFramebuffer:null;x0.bindFramebuffer(b.FRAMEBUFFER,p0)}}},this.readRenderTargetPixelsAsync=async function(g,D,O,B,L,$,i0){if(!(g&&g.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let c0=g0.get(g).__webglFramebuffer;if(g.isWebGLCubeRenderTarget&&i0!==void 0&&(c0=c0[i0]),c0){const p0=g.texture,A0=p0.format,R0=p0.type;if(!O0.textureFormatReadable(A0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!O0.textureTypeReadable(R0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(D>=0&&D<=g.width-B&&O>=0&&O<=g.height-L){x0.bindFramebuffer(b.FRAMEBUFFER,c0);const M0=b.createBuffer();b.bindBuffer(b.PIXEL_PACK_BUFFER,M0),b.bufferData(b.PIXEL_PACK_BUFFER,$.byteLength,b.STREAM_READ),b.readPixels(D,O,B,L,P0.convert(A0),P0.convert(R0),0);const H0=I!==null?g0.get(I).__webglFramebuffer:null;x0.bindFramebuffer(b.FRAMEBUFFER,H0);const W0=b.fenceSync(b.SYNC_GPU_COMMANDS_COMPLETE,0);return b.flush(),await D9(b,W0,4),b.bindBuffer(b.PIXEL_PACK_BUFFER,M0),b.getBufferSubData(b.PIXEL_PACK_BUFFER,0,$),b.deleteBuffer(M0),b.deleteSync(W0),$}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(g,D=null,O=0){g.isTexture!==!0&&(Ae("WebGLRenderer: copyFramebufferToTexture function signature has changed."),D=arguments[0]||null,g=arguments[1]);const B=Math.pow(2,-O),L=Math.floor(g.image.width*B),$=Math.floor(g.image.height*B),i0=D!==null?D.x:0,c0=D!==null?D.y:0;E.setTexture2D(g,0),b.copyTexSubImage2D(b.TEXTURE_2D,O,0,0,i0,c0,L,$),x0.unbindTexture()};const Fi=b.createFramebuffer(),Oi=b.createFramebuffer();this.copyTextureToTexture=function(g,D,O=null,B=null,L=0,$=null){g.isTexture!==!0&&(Ae("WebGLRenderer: copyTextureToTexture function signature has changed."),B=arguments[0]||null,g=arguments[1],D=arguments[2],$=arguments[3]||0,O=null),$===null&&(L!==0?(Ae("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),$=L,L=0):$=0);let i0,c0,p0,A0,R0,M0,H0,W0,at;const nt=g.isCompressedTexture?g.mipmaps[$]:g.image;if(O!==null)i0=O.max.x-O.min.x,c0=O.max.y-O.min.y,p0=O.isBox3?O.max.z-O.min.z:1,A0=O.min.x,R0=O.min.y,M0=O.isBox3?O.min.z:0;else{const Ct=Math.pow(2,-L);i0=Math.floor(nt.width*Ct),c0=Math.floor(nt.height*Ct),g.isDataArrayTexture?p0=nt.depth:g.isData3DTexture?p0=Math.floor(nt.depth*Ct):p0=1,A0=0,R0=0,M0=0}B!==null?(H0=B.x,W0=B.y,at=B.z):(H0=0,W0=0,at=0);const V0=P0.convert(D.format),S0=P0.convert(D.type);let dt;D.isData3DTexture?(E.setTexture3D(D,0),dt=b.TEXTURE_3D):D.isDataArrayTexture||D.isCompressedArrayTexture?(E.setTexture2DArray(D,0),dt=b.TEXTURE_2D_ARRAY):(E.setTexture2D(D,0),dt=b.TEXTURE_2D),b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL,D.flipY),b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL,D.premultiplyAlpha),b.pixelStorei(b.UNPACK_ALIGNMENT,D.unpackAlignment);const X0=b.getParameter(b.UNPACK_ROW_LENGTH),It=b.getParameter(b.UNPACK_IMAGE_HEIGHT),Fe=b.getParameter(b.UNPACK_SKIP_PIXELS),Tt=b.getParameter(b.UNPACK_SKIP_ROWS),u1=b.getParameter(b.UNPACK_SKIP_IMAGES);b.pixelStorei(b.UNPACK_ROW_LENGTH,nt.width),b.pixelStorei(b.UNPACK_IMAGE_HEIGHT,nt.height),b.pixelStorei(b.UNPACK_SKIP_PIXELS,A0),b.pixelStorei(b.UNPACK_SKIP_ROWS,R0),b.pixelStorei(b.UNPACK_SKIP_IMAGES,M0);const Q0=g.isDataArrayTexture||g.isData3DTexture,wt=D.isDataArrayTexture||D.isData3DTexture;if(g.isDepthTexture){const Ct=g0.get(g),_t=g0.get(D),xt=g0.get(Ct.__renderTarget),f8=g0.get(_t.__renderTarget);x0.bindFramebuffer(b.READ_FRAMEBUFFER,xt.__webglFramebuffer),x0.bindFramebuffer(b.DRAW_FRAMEBUFFER,f8.__webglFramebuffer);for(let xe=0;xe<p0;xe++)Q0&&(b.framebufferTextureLayer(b.READ_FRAMEBUFFER,b.COLOR_ATTACHMENT0,g0.get(g).__webglTexture,L,M0+xe),b.framebufferTextureLayer(b.DRAW_FRAMEBUFFER,b.COLOR_ATTACHMENT0,g0.get(D).__webglTexture,$,at+xe)),b.blitFramebuffer(A0,R0,i0,c0,H0,W0,i0,c0,b.DEPTH_BUFFER_BIT,b.NEAREST);x0.bindFramebuffer(b.READ_FRAMEBUFFER,null),x0.bindFramebuffer(b.DRAW_FRAMEBUFFER,null)}else if(L!==0||g.isRenderTargetTexture||g0.has(g)){const Ct=g0.get(g),_t=g0.get(D);x0.bindFramebuffer(b.READ_FRAMEBUFFER,Fi),x0.bindFramebuffer(b.DRAW_FRAMEBUFFER,Oi);for(let xt=0;xt<p0;xt++)Q0?b.framebufferTextureLayer(b.READ_FRAMEBUFFER,b.COLOR_ATTACHMENT0,Ct.__webglTexture,L,M0+xt):b.framebufferTexture2D(b.READ_FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,Ct.__webglTexture,L),wt?b.framebufferTextureLayer(b.DRAW_FRAMEBUFFER,b.COLOR_ATTACHMENT0,_t.__webglTexture,$,at+xt):b.framebufferTexture2D(b.DRAW_FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,_t.__webglTexture,$),L!==0?b.blitFramebuffer(A0,R0,i0,c0,H0,W0,i0,c0,b.COLOR_BUFFER_BIT,b.NEAREST):wt?b.copyTexSubImage3D(dt,$,H0,W0,at+xt,A0,R0,i0,c0):b.copyTexSubImage2D(dt,$,H0,W0,A0,R0,i0,c0);x0.bindFramebuffer(b.READ_FRAMEBUFFER,null),x0.bindFramebuffer(b.DRAW_FRAMEBUFFER,null)}else wt?g.isDataTexture||g.isData3DTexture?b.texSubImage3D(dt,$,H0,W0,at,i0,c0,p0,V0,S0,nt.data):D.isCompressedArrayTexture?b.compressedTexSubImage3D(dt,$,H0,W0,at,i0,c0,p0,V0,nt.data):b.texSubImage3D(dt,$,H0,W0,at,i0,c0,p0,V0,S0,nt):g.isDataTexture?b.texSubImage2D(b.TEXTURE_2D,$,H0,W0,i0,c0,V0,S0,nt.data):g.isCompressedTexture?b.compressedTexSubImage2D(b.TEXTURE_2D,$,H0,W0,nt.width,nt.height,V0,nt.data):b.texSubImage2D(b.TEXTURE_2D,$,H0,W0,i0,c0,V0,S0,nt);b.pixelStorei(b.UNPACK_ROW_LENGTH,X0),b.pixelStorei(b.UNPACK_IMAGE_HEIGHT,It),b.pixelStorei(b.UNPACK_SKIP_PIXELS,Fe),b.pixelStorei(b.UNPACK_SKIP_ROWS,Tt),b.pixelStorei(b.UNPACK_SKIP_IMAGES,u1),$===0&&D.generateMipmaps&&b.generateMipmap(dt),x0.unbindTexture()},this.copyTextureToTexture3D=function(g,D,O=null,B=null,L=0){return g.isTexture!==!0&&(Ae("WebGLRenderer: copyTextureToTexture3D function signature has changed."),O=arguments[0]||null,B=arguments[1]||null,g=arguments[2],D=arguments[3],L=arguments[4]||0),Ae('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(g,D,O,B,L)},this.initRenderTarget=function(g){g0.get(g).__webglFramebuffer===void 0&&E.setupRenderTarget(g)},this.initTexture=function(g){g.isCubeTexture?E.setTextureCube(g,0):g.isData3DTexture?E.setTexture3D(g,0):g.isDataArrayTexture||g.isCompressedArrayTexture?E.setTexture2DArray(g,0):E.setTexture2D(g,0),x0.unbindTexture()},this.resetState=function(){R=0,P=0,I=null,x0.reset(),$0.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return te}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorspace=G0._getDrawingBufferColorSpace(t),e.unpackColorSpace=G0._getUnpackColorSpace()}}const J7={type:"change"},qn={type:"start"},Di={type:"end"},$1=new Wn,Q7=new fe,$4=Math.cos(70*C9.DEG2RAD),lt=new N,St=2*Math.PI,K0={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},W8=1e-6;class J4 extends f5{constructor(t,e=null){super(t,e),this.state=K0.NONE,this.enabled=!0,this.target=new N,this.cursor=new N,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:Qe.ROTATE,MIDDLE:Qe.DOLLY,RIGHT:Qe.PAN},this.touches={ONE:$e.ROTATE,TWO:$e.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new N,this._lastQuaternion=new Ie,this._lastTargetPosition=new N,this._quat=new Ie().setFromUnitVectors(t.up,new N(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new A7,this._sphericalDelta=new A7,this._scale=1,this._panOffset=new N,this._rotateStart=new L0,this._rotateEnd=new L0,this._rotateDelta=new L0,this._panStart=new L0,this._panEnd=new L0,this._panDelta=new L0,this._dollyStart=new L0,this._dollyEnd=new L0,this._dollyDelta=new L0,this._dollyDirection=new N,this._mouse=new L0,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=tr.bind(this),this._onPointerDown=Q4.bind(this),this._onPointerUp=er.bind(this),this._onContextMenu=lr.bind(this),this._onMouseWheel=rr.bind(this),this._onKeyDown=sr.bind(this),this._onTouchStart=ar.bind(this),this._onTouchMove=or.bind(this),this._onMouseDown=nr.bind(this),this._onMouseMove=ir.bind(this),this._interceptControlDown=cr.bind(this),this._interceptControlUp=hr.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(J7),this.update(),this.state=K0.NONE}update(t=null){const e=this.object.position;lt.copy(e).sub(this.target),lt.applyQuaternion(this._quat),this._spherical.setFromVector3(lt),this.autoRotate&&this.state===K0.NONE&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,r=this.maxAzimuthAngle;isFinite(n)&&isFinite(r)&&(n<-Math.PI?n+=St:n>Math.PI&&(n-=St),r<-Math.PI?r+=St:r>Math.PI&&(r-=St),n<=r?this._spherical.theta=Math.max(n,Math.min(r,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+r)/2?Math.max(n,this._spherical.theta):Math.min(r,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let s=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const a=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),s=a!=this._spherical.radius}if(lt.setFromSpherical(this._spherical),lt.applyQuaternion(this._quatInverse),e.copy(this.target).add(lt),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let a=null;if(this.object.isPerspectiveCamera){const o=lt.length();a=this._clampDistance(o*this._scale);const l=o-a;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),s=!!l}else if(this.object.isOrthographicCamera){const o=new N(this._mouse.x,this._mouse.y,0);o.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),s=l!==this.object.zoom;const c=new N(this._mouse.x,this._mouse.y,0);c.unproject(this.object),this.object.position.sub(c).add(o),this.object.updateMatrixWorld(),a=lt.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;a!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(a).add(this.object.position):($1.origin.copy(this.object.position),$1.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot($1.direction))<$4?this.object.lookAt(this.target):(Q7.setFromNormalAndCoplanarPoint(this.object.up,this.target),$1.intersectPlane(Q7,this.target))))}else if(this.object.isOrthographicCamera){const a=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),a!==this.object.zoom&&(this.object.updateProjectionMatrix(),s=!0)}return this._scale=1,this._performCursorZoom=!1,s||this._lastPosition.distanceToSquared(this.object.position)>W8||8*(1-this._lastQuaternion.dot(this.object.quaternion))>W8||this._lastTargetPosition.distanceToSquared(this.target)>W8?(this.dispatchEvent(J7),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(t){return t!==null?St/60*this.autoRotateSpeed*t:St/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(t*.01);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){lt.setFromMatrixColumn(e,0),lt.multiplyScalar(-t),this._panOffset.add(lt)}_panUp(t,e){this.screenSpacePanning===!0?lt.setFromMatrixColumn(e,1):(lt.setFromMatrixColumn(e,0),lt.crossVectors(this.object.up,lt)),lt.multiplyScalar(t),this._panOffset.add(lt)}_pan(t,e){const n=this.domElement;if(this.object.isPerspectiveCamera){const r=this.object.position;lt.copy(r).sub(this.target);let s=lt.length();s*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*s/n.clientHeight,this.object.matrix),this._panUp(2*e*s/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),r=t-n.left,s=e-n.top,a=n.width,o=n.height;this._mouse.x=r/a*2-1,this._mouse.y=-(s/o)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(St*this._rotateDelta.x/e.clientHeight),this._rotateUp(St*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(St*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(-St*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(St*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(-St*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),e=!0;break}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(this._pointers.length===1)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),r=.5*(t.pageY+e.y);this._rotateStart.set(n,r)}}_handleTouchStartPan(t){if(this._pointers.length===1)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),r=.5*(t.pageY+e.y);this._panStart.set(n,r)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,r=t.pageY-e.y,s=Math.sqrt(n*n+r*r);this._dollyStart.set(0,s)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(this._pointers.length==1)this._rotateEnd.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),r=.5*(t.pageX+n.x),s=.5*(t.pageY+n.y);this._rotateEnd.set(r,s)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(St*this._rotateDelta.x/e.clientHeight),this._rotateUp(St*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(this._pointers.length===1)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),r=.5*(t.pageY+e.y);this._panEnd.set(n,r)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,r=t.pageY-e.y,s=Math.sqrt(n*n+r*r);this._dollyEnd.set(0,s),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const a=(t.pageX+e.x)*.5,o=(t.pageY+e.y)*.5;this._updateZoomParameters(a,o)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId){this._pointers.splice(e,1);return}}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new L0,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,n={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return t.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function Q4(i){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(i.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(i)&&(this._addPointer(i),i.pointerType==="touch"?this._onTouchStart(i):this._onMouseDown(i)))}function tr(i){this.enabled!==!1&&(i.pointerType==="touch"?this._onTouchMove(i):this._onMouseMove(i))}function er(i){switch(this._removePointer(i),this._pointers.length){case 0:this.domElement.releasePointerCapture(i.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(Di),this.state=K0.NONE;break;case 1:const t=this._pointers[0],e=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:e.x,pageY:e.y});break}}function nr(i){let t;switch(i.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case Qe.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(i),this.state=K0.DOLLY;break;case Qe.ROTATE:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=K0.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=K0.ROTATE}break;case Qe.PAN:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=K0.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=K0.PAN}break;default:this.state=K0.NONE}this.state!==K0.NONE&&this.dispatchEvent(qn)}function ir(i){switch(this.state){case K0.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(i);break;case K0.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(i);break;case K0.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(i);break}}function rr(i){this.enabled===!1||this.enableZoom===!1||this.state!==K0.NONE||(i.preventDefault(),this.dispatchEvent(qn),this._handleMouseWheel(this._customWheelEvent(i)),this.dispatchEvent(Di))}function sr(i){this.enabled!==!1&&this._handleKeyDown(i)}function ar(i){switch(this._trackPointer(i),this._pointers.length){case 1:switch(this.touches.ONE){case $e.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(i),this.state=K0.TOUCH_ROTATE;break;case $e.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(i),this.state=K0.TOUCH_PAN;break;default:this.state=K0.NONE}break;case 2:switch(this.touches.TWO){case $e.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(i),this.state=K0.TOUCH_DOLLY_PAN;break;case $e.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(i),this.state=K0.TOUCH_DOLLY_ROTATE;break;default:this.state=K0.NONE}break;default:this.state=K0.NONE}this.state!==K0.NONE&&this.dispatchEvent(qn)}function or(i){switch(this._trackPointer(i),this.state){case K0.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(i),this.update();break;case K0.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(i),this.update();break;case K0.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(i),this.update();break;case K0.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(i),this.update();break;default:this.state=K0.NONE}}function lr(i){this.enabled!==!1&&i.preventDefault()}function cr(i){i.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function hr(i){i.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}const ur=JSON.parse("[-0.18748086,0.93922763,-0.28758023,-0.063221726,0.60274124,-0.79542819,-0.78373804,-0.52700985,0.32865682,-0.37374668,-0.31272702,-0.87322118,0.12508927,-0.769422,0.62637246,0.13050096,0.68230249,0.71932803,0.19505209,0.97036261,-0.14265725,-0.41813726,0.90380312,0.091110693,0.4927251,0.22380179,-0.84091304,0.020891012,0.99143526,0.12891738,-0.42393758,-0.25428469,-0.86926188,0.4592023,-0.87485522,0.15414797,-0.44940559,-0.05239353,-0.89179007,0.34390531,0.89497017,0.2841787,0.13053398,0.682198,0.71942113,-0.91407976,-0.35635452,-0.19357078,-0.34481572,-0.82641235,-0.44513453,-0.39153681,0.79114763,0.46987696,0.83733161,-0.23360173,-0.49427322,-0.49379549,-0.10433355,-0.86329632,0.45564902,-0.53618214,0.710558,-0.37373042,-0.31264375,-0.87325796,-0.864507,0.45785691,0.20735162,-0.22135825,0.84638829,-0.48438351,-0.34060606,0.77776499,0.52826995,-0.5379775,-0.07361122,-0.839739,-0.091637156,-0.79226246,-0.60326017,0.15062807,0.98238459,0.11059706,0.12865945,0.86843844,0.4788125,-0.25882588,0.23059732,-0.93799469,0.10357897,0.99440002,-0.020975875,0.60293557,-0.3198065,-0.73088474,0.083809021,0.99590511,-0.033897894,-0.3629561,0.57229931,-0.73534779,-0.5442917,-0.13074124,0.82864545,0.40498035,0.50155041,0.76448551,0.086881518,-0.82068209,-0.5647411,-0.45910845,0.11504195,0.88089998,-0.26335887,0.85617526,-0.44452899,-0.58145682,-0.29480627,0.75828572,-0.29557216,0.41241569,-0.86171364,-0.072263305,-0.72780092,-0.68197055,0.0014530107,0.70775372,0.70645776,-0.1096153,-0.34071911,-0.93375317,-0.15714263,0.94635883,0.28233166,-0.38036486,0.43485741,-0.81622399,0.32558999,-0.44142797,-0.83614144,0.01012774,0.0078973389,0.99991753,-0.094068376,0.94663161,-0.30828516,-0.7779329,0.61004566,-0.15054797,0.77968291,0.48328933,0.39815321,-0.85244989,0.39764266,0.33942524,0.93397882,0.17980161,-0.30879595,0.21409626,-0.87057333,-0.4430179,-0.68529365,-0.42278656,-0.59297903,0.87326512,0.031968269,0.4861955,0.77555357,0.24352681,0.58241854,0.052638463,0.98438635,-0.16796639,-0.20072763,-0.18507471,0.96200612,0.64492745,-0.22627511,-0.72997819,-0.10654322,-0.97023431,0.21747168,0.51464985,0.55271014,0.65547466,0.63385529,0.38047728,0.67339773,-0.96672925,0.046162054,0.25160211,0.47423032,0.11979696,0.8722123,-0.64584179,-0.11830137,-0.75425007,-0.3933326,0.65731176,-0.64283024,-0.38718228,0.33335136,-0.85963175,-0.52917488,-0.71963701,0.44955147,-0.53108884,0.49526445,-0.68750111,-0.53654335,-0.20575468,0.8184047,0.44378637,-0.62085622,0.64621298,0.54280261,0.09694802,0.83424601,-0.009219983,-0.62259728,0.7824881,0.12183883,0.99253617,-0.0052201409,0.51237873,0.020507961,0.85851468,-0.53964316,-0.2513184,-0.80350751,-0.46036872,-0.80006868,-0.38464366,-0.2478473,-0.78811813,-0.56341949,-0.51495147,-0.43953647,-0.73595698,-0.57709925,-0.46527605,-0.67117408,-0.53591618,0.13899697,0.83275068,-0.66948372,-0.58705694,0.4551436,0.81720079,-0.55024616,0.17149938,-0.059299273,-0.77455057,-0.62972615,0.73471361,0.08462309,-0.67307863,-0.59187264,0.015940601,0.80587386,-0.20678985,-0.94009814,-0.27102295,0.85585128,-0.21429139,0.47074173,-0.31284986,0.8139922,-0.48942994,0.35086091,-0.2981408,0.88769853,-0.44264877,0.36452242,-0.8192591,0.55009573,-0.62063854,0.55875083,0.93709683,-0.23034527,0.26227959,0.69825567,0.71228659,0.071322058,-0.34764531,-0.91951708,-0.18338779,-0.59392145,-0.32766138,-0.7347757,-0.91781115,0.18628514,0.35060026,-0.4509632,-0.82572926,-0.33882648,0.11300958,0.94527911,-0.30606573,-0.63265711,-0.023085318,-0.77408788,-0.95122913,-0.065714826,-0.30140456,0.23394485,-0.83491298,-0.49818683,-0.64400081,-0.74745159,-0.16303094,-0.55472146,-0.82447554,0.11191155,0.82024848,0.44832498,0.35524237,0.073456013,0.82505066,-0.56026389,0.0009707707,0.79639462,0.60477655,-0.90746653,-0.13718971,-0.3970938,0.46204497,0.18156213,0.86807237,-0.83253779,-0.45525958,0.31562564,-0.51931042,-0.51270247,-0.68370525,0.22724198,0.8056532,0.54706856,-0.61758048,0.20433878,-0.75949985,-0.35148094,-0.057533163,-0.93442554,-0.10120627,-0.78905452,-0.60592926,-0.26343361,0.75285129,-0.603173,0.079355908,-0.86388501,-0.49739856,0.4395603,-0.87912732,0.18417898,-0.4439216,-0.89374646,-0.064427382,-0.19400576,-0.43570202,0.87893431,-0.40798277,0.14255963,-0.90179089,-0.98320416,-0.18074754,-0.025296238,0.10641987,0.9889758,-0.1029644,-0.75258253,-0.27615511,-0.59779419,-0.70607148,-0.65199833,-0.27633539,-0.071821623,-0.99423427,0.079623361,0.22469805,0.97038703,-0.088655484,-0.35525149,-0.85999792,0.36633312,-0.19042956,-0.94972199,0.24852511,-0.51765716,-0.034260128,-0.85490193,-0.078672392,-0.60642644,0.79123804,-0.44476292,-0.60736337,-0.65825198,0.12914599,0.92611683,-0.35444171,-0.28678789,-0.80197387,0.52401396,0.21923112,0.024642404,-0.97536171,-0.31620488,-0.82248293,-0.47279626,0.10995667,-0.89645787,-0.42927009,0.96348243,0.055705189,0.26191322,-0.48141801,0.773844,-0.41158493,-0.23179957,-0.38254615,-0.89438661,0.44324824,0.72425121,0.52819616,-0.085366167,-0.55950227,-0.82442091,-0.078978874,-0.63958635,-0.76465132,0.49886576,0.76441545,0.40841397,-0.94585126,-0.26310502,0.19010825,0.80346621,-0.52658463,-0.2777601,-0.34065715,0.77770993,0.52831805,0.41357971,0.23581687,-0.87939879,0.31195946,-0.63277192,0.70871785,-0.092391414,0.91915518,0.38290675,-0.23502821,-0.27740919,-0.93156099,0.44821546,-0.21258162,-0.86828103,0.54332416,0.53514513,-0.6468528,0.27977151,-0.89051976,-0.35875124,-0.36729233,0.91886365,0.14417329,-0.76124819,-0.18990874,0.62002892,-0.45284935,-0.77536268,-0.44015926,0.38915968,0.6596986,0.64292495,-0.37690932,-0.8193533,-0.43197167,0.7937082,-0.60050179,-0.097081866,0.41164644,0.42924783,0.80392382,-0.35257994,0.23093659,-0.90683829,0.81577834,-0.28487399,0.50334134,-0.13716474,0.6195338,-0.77289307,-0.95061548,-0.12458713,-0.28426793,0.87835281,-0.47798031,-0.0055819975,0.49339257,0.83785541,-0.23358528,0.090832975,0.92825207,0.36069025,-0.7627959,0.5055937,0.4031345,0.021853139,-0.86202777,-0.50638974,-0.8653602,-0.31035889,-0.39348326,-0.041400652,-0.76349633,-0.64448378,0.27334503,-0.93159435,0.23961316,0.69185054,0.4388162,0.57339617,-0.69613398,0.15539925,0.70089126,-0.19964205,-0.23946727,0.95015708,-0.2306683,-0.75296178,-0.61631217,0.67753636,-0.41548941,-0.60688799,0.37831994,0.55524503,0.74065983,-0.076608709,0.86207457,-0.50095763,-0.2483877,0.88035522,-0.40407702,-0.92217667,-0.04076878,-0.38461421,0.18073858,0.69847322,0.6924368,-0.36528003,-0.07478385,-0.92788894,-0.61817783,-0.48331799,0.61988701,0.34058277,-0.81497408,0.46885033,0.55808241,-0.7895896,-0.2551319,-0.17248358,0.88875549,0.42469177,-0.68197324,0.30960778,0.66261264,0.11832262,-0.36119401,0.92495332,0.06156282,-0.79876711,-0.59848235,-0.68902978,0.71729251,0.1035829,-0.91540045,0.2902772,-0.27889276,-0.45115157,0.047851589,-0.89116356,0.43043988,-0.52418231,-0.7348159,0.031998806,0.81074599,-0.5845229,-0.47113408,0.47437687,0.7436392,-0.14801639,-0.5393967,-0.8289405,-0.17691747,-0.8900751,0.42007919,-0.52653742,-0.52269931,-0.67048026,-0.63457113,0.52749728,0.56485936,-0.43345261,0.32894119,-0.83899733,-0.15603327,-0.78528406,0.59915154,-0.11957329,0.71914427,-0.68449524,-0.49662797,0.37128161,0.78454485,-0.091141405,-0.40105577,0.91150837,0.1763414,-0.87345665,-0.4538471,0.1739128,0.73163051,0.65914425,-0.32105344,-0.27544693,-0.90612012,0.29916796,0.94647217,0.121198,0.21799086,0.8986788,-0.38060006,-0.26503276,-0.95038013,0.16289644,-0.035311848,-0.79739824,-0.60241939,0.64446135,-0.57552534,0.5034284,0.2133215,-0.019273291,0.97679193,-0.48421464,-0.5841322,-0.65140292,-0.42780889,-0.90015926,-0.081809929,0.092753002,-0.99440551,-0.050542774,0.26284497,-0.20414152,0.94299457,-0.098180451,0.46000461,-0.88247173,0.54203539,-0.84023335,-0.014336964,-0.27624123,0.67328376,-0.68584238,-0.76108747,-0.46809207,-0.44903861,-0.62792087,-0.65063452,-0.42707154,0.21407557,-0.8139274,0.54008688,0.14869287,0.22730702,-0.96240426,0.84580535,0.14657724,0.51296045,-0.14954659,-0.8938884,-0.42261016,0.92327101,-0.27063655,-0.27262887,0.19583265,0.94008657,-0.2790821,-0.30535456,0.1526803,-0.93991878,-0.32281578,-0.4019676,0.85686173,0.2099915,0.53306246,-0.81960233,-0.43979468,0.17763338,-0.88035619,-0.059932014,0.92188791,0.38279346,-0.083291377,-0.54741556,-0.83270568,0.65727859,0.19496032,-0.72799405,0.53818605,0.5630563,0.62715498,-0.5429299,-0.036594752,0.8389803,-0.15098992,-0.71268985,-0.68503666,-0.0041854937,-0.98547807,-0.16975113,0.25501826,-0.84812798,-0.46437552,0.20544569,0.41397583,-0.88680104,-0.9448069,0.19119008,0.26605689,-0.41648253,0.80610603,-0.42039905,0.3894239,0.21230918,0.89625545,0.15424357,0.98714717,-0.041825754,-0.1913814,0.95580464,0.223183,-0.29819851,0.38768326,0.87222665,0.36391541,-0.92984596,0.054332894,-0.45057235,-0.54991128,-0.70326534,-0.66098703,0.74202265,0.11179686,-0.91579551,-0.40151015,-0.010400896,0.10664515,0.97921647,0.17251645,-0.43216657,0.20825854,-0.87741691,-0.96900184,-0.23983985,0.059264535,0.46830284,-0.24156846,0.84990419,0.3732803,0.886496,0.27347151,-0.20683913,-0.94007246,-0.27107444,0.67414661,0.27362501,-0.68604352,0.48565403,0.84697404,0.21627562,-0.66314652,-0.34339368,-0.66506953,-0.41047412,-0.45702622,-0.78907416,0.31164653,-0.35446581,0.88160673,0.92507453,-0.33003544,0.18791946,0.76593972,0.41190604,0.49362918,-0.39150257,-0.67893907,-0.62110183,-0.052259673,-0.88366706,0.46518969,0.26598788,-0.30340982,-0.91498247,-0.38155891,0.34667967,-0.85686989,-0.82597188,0.39977928,0.39742544,0.28402329,-0.95503252,-0.085109726,-0.65978233,0.31789075,0.68090583,0.52046247,0.11320565,0.84634703,0.94050325,0.29018008,-0.1767743,-0.29367285,0.52557861,-0.79845061,-0.54961389,-0.62948915,0.5492431,0.75549726,0.65271516,0.056451823,-0.65481669,-0.33948562,-0.67525152,-0.84411634,0.45198281,0.28840794,-0.25683273,-0.73438147,0.6282681,0.86407993,0.42183885,-0.27462312,-0.23505672,0.85163776,-0.46846715,-0.82406249,0.15094921,0.54601772,-0.53397016,-0.54311856,0.64799544,0.081616265,-0.6902474,-0.71895571,0.59488923,-0.19170469,-0.78061265,-0.18195518,0.82344835,-0.53742454,-0.31762323,0.87120573,0.37432078,0.38468835,-0.1218791,0.91496467,0.46690715,-0.81893683,0.33367677,0.86714421,-0.27340256,0.41630753,0.55376417,0.81521615,-0.16961093,-0.80980294,0.56098529,0.17179841,-0.49805378,0.29671534,-0.81480209,0.18105598,-0.81534547,0.54993681,0.23251694,-0.90347136,-0.36010467,0.88222062,-0.4582916,0.10796099,-0.98319267,-0.18081052,-0.025292885,0.36670448,0.87039396,0.32854556,-0.55386247,0.81716173,0.15963417,-0.84347769,0.099816053,-0.52780881,-0.53772817,-0.84099263,-0.059831501,-0.094134007,-0.9594962,-0.26552934,0.35810305,0.74988287,-0.55627142,0.05499238,0.96516008,-0.25581608,-0.56946653,-0.39654132,-0.72004364,0.027209171,-0.29556352,0.95493553,0.21506305,-0.34185274,-0.91481396,0.98461627,0.083667279,-0.15339683,0.51517769,0.34915679,-0.78273973,-0.95174116,0.17063636,-0.25509212,-0.2292327,-0.75373557,-0.61590183,-0.40082194,0.81774756,0.4130747,-0.48837674,0.47316265,0.7332157,-0.68026237,-0.53067168,0.50559932,-0.51341156,-0.62175202,-0.59146682,-0.32036197,0.90350336,0.28469261,0.55307226,-0.80432178,-0.21720392,0.60143867,0.27406511,0.75043977,0.1826121,0.97593574,-0.11917317,0.062595215,0.92210776,-0.38183651,-0.99870043,0.040600362,0.030806767,-0.49177674,-0.045974673,-0.86950674,0.92403831,0.35481697,-0.142331,-0.18935875,0.80750946,0.55863382,-0.3881291,0.46135313,-0.7978152,-0.60498381,0.46128361,-0.64900849,-0.51513787,-0.71573174,-0.47155175,-0.061579921,-0.48574413,-0.87192922,0.65543274,0.60050484,0.45804133,0.61879259,0.76971877,0.15693548,-0.86763028,0.44882489,-0.21394839,-0.30488876,-0.084929983,-0.94859356,-0.026562507,-0.42615629,-0.9042595,0.88853257,0.37479748,0.26464452,0.49345539,0.76835687,0.40758987,-0.34946411,0.70665939,-0.61522951,-0.20805437,-0.70902164,-0.67379647,0.71571256,-0.18535984,0.6733478,-0.39430451,0.024791205,-0.91864539,0.61407769,-0.74793748,0.25198834,0.40778618,0.87243448,0.26938544,-0.36124079,0.27338727,0.89149565,-0.531408,-0.80429435,0.26592504,0.018560784,-0.6412955,-0.76706947,0.92191383,-0.38739485,-0.0003501661,-0.53842716,-0.68810801,0.48641913,-0.5020004,-0.7080595,-0.49663602,-0.37031614,-0.22336789,0.90165001,0.36147286,-0.37822782,-0.85222127,0.29426888,0.95071873,0.097671512,-0.54792794,0.63258738,-0.54736476,0.42818538,-0.84594025,0.31787164,0.90990293,-0.20402931,-0.36117681,0.5815893,0.094642594,0.80795833,0.54322273,0.30094972,-0.78379738,0.18722386,0.73022045,0.65705808,-0.38410427,0.25605161,-0.88707468,-0.67074365,0.040870995,0.7405623,0.78497058,-0.54918796,-0.28672944,0.59849494,0.71020812,-0.37068618,-0.008513044,-0.87247217,0.48858965,0.98096712,-0.18554085,0.057254659,0.28270591,0.95826087,0.042584872,0.015207094,0.96946278,-0.24476655,-0.35722137,0.67030083,-0.65045345,-0.53266687,-0.84271658,0.07806899,0.031620759,-0.98559452,0.16614323,0.47917234,-0.87059626,0.11160653,0.5903963,0.79020751,-0.16432984,0.50750279,0.75863835,0.40854471,0.0012077392,0.5837528,0.81193054,0.52010649,-0.49819413,0.693752,0.60961344,0.77446271,0.16905316,-0.74782455,-0.66307415,0.033031996,-0.015432935,-0.54628672,0.83745605,0.17964149,-0.12407154,-0.97587662,0.94872248,-0.28727472,-0.13190483,0.86970793,0.45980751,-0.17940226,-0.39203549,-0.85945545,0.32809222,0.59162156,-0.51980205,0.61627085,-0.49001105,0.47255673,-0.73251574,-0.052743678,-0.99749026,0.047236486,0.053039522,0.45885034,-0.88692907,0.035381774,0.93367425,-0.35637133,-0.1244671,0.98464,-0.12244186,0.25868681,-0.89211668,-0.37041728,0.23628956,-0.57253214,0.78509502,0.59172885,-0.24121026,0.76920386,0.41224086,0.38006052,0.82801659,0.40857586,0.61259924,0.67660027,0.39186877,0.86924573,0.30141455,0.092509478,0.99467788,-0.045364172,-0.24026804,0.32548281,-0.91451201,-0.44268907,0.52465805,-0.72715907,-0.1551488,-0.49046571,-0.85753848,0.61699258,-0.73766904,0.27416152,0.72517017,-0.57338785,-0.38125397,0.79611649,-0.42773342,0.42806852,-0.098639651,0.31891392,-0.9426368,-0.32322786,0.82342695,0.46636017,-0.43508101,0.27452931,0.85751861,-0.49560553,0.14799895,-0.85584547,-0.74102104,-0.62814628,0.23731852,0.65892386,-0.73389585,-0.16497341,0.48005094,0.52156628,0.70535077,-0.79216473,0.23724393,0.56230806,0.58509413,0.65021974,-0.48464332,-0.37308036,0.81084265,-0.45093818,-0.5820156,-0.7923412,0.18290235,0.19696709,-0.56322299,0.80248603,0.37731991,-0.57206342,0.72826721,0.31015593,0.80327851,-0.5084751,-0.47757172,0.2030146,-0.85481596,-0.50539405,-0.74049103,0.443001,0.68557231,-0.06733634,0.72488373,0.86052368,0.50712328,0.048218016,-0.6107698,0.51776681,0.59906409,-0.35022283,0.043925499,0.93563589,-0.3787686,-0.92484358,0.034622167,-0.062152004,-0.69179268,0.71941645,-0.87790505,0.38130615,-0.28963484,-0.64534258,-0.36612683,-0.67043575,-0.14130588,-0.12707852,-0.98177579,0.23773349,0.35309404,-0.90487976,0.47175029,0.70150131,0.53417934,0.37344857,0.88595107,0.27500341,-0.3390698,0.3540494,-0.87159663,-0.91628226,0.36643458,0.1617174,-0.62329906,0.23520105,-0.74577392,-0.30373512,-0.043320556,-0.95177114,0.028844791,-0.87614736,0.48117957,0.056009899,-0.93152964,-0.35932634,0.15350136,-0.30071101,0.94128116,0.33004997,0.66198764,-0.67293342,0.03484713,0.62744816,-0.77787819,-0.080396688,0.83061741,-0.55100915,-0.66485071,0.32881389,-0.67071228,-0.34181049,-0.05029748,0.93842195,-0.65314003,-0.10843545,-0.74943302,-0.49428745,-0.82630241,0.27000784,0.095848549,-0.92371844,0.37088718,0.15143635,-0.97801332,-0.14337704,0.75874419,0.19182141,0.62250446,0.3386334,0.90790359,-0.24705968,0.10203006,0.8079986,-0.5802828,-0.1953049,-0.39795363,-0.89637543,-0.071002366,-0.17900678,-0.98128244,-0.013013548,-0.79589011,0.60530123,0.90906942,-0.41594062,-0.024211514,0.50334255,0.7592186,0.41259349,-0.46001143,0.51982228,-0.71984324,-0.61650249,-0.35121742,-0.70467794,-0.75370665,-0.64977549,-0.098580394,-0.44663506,-0.74986782,-0.48807313,0.4712192,-0.88184149,0.017551496,0.69724011,0.028640935,-0.71626526,0.83038134,0.44865508,0.33041708,-0.76376207,0.47370961,0.43848228,-0.44143325,-0.48998612,-0.75169827,0.68760396,-0.15131437,-0.71014418,0.7094044,0.68762115,-0.15466917,-0.21346966,0.88690455,-0.40967186,-0.74939281,0.6608924,0.040393802,-0.99616271,-0.086743545,-0.011636669,0.39768429,-0.71518336,0.57476949,-0.81862758,0.5739784,-0.019941809,-0.57244431,0.09834497,-0.81402443,-0.71248328,-0.29893162,-0.63482869,0.48536223,0.86806455,0.10434289,-0.59225456,0.80286572,-0.06812612,-0.63491732,-0.078071075,-0.76862533,-0.47090431,-0.4924222,-0.73196278,-0.56992964,-0.7810363,-0.25526948,-0.29261656,-0.62566978,0.72312715,-0.22097339,-0.82887931,0.51393566,0.33208156,-0.89207152,-0.30648042,0.75104185,-0.65388815,0.091468143,0.71848805,0.082502725,-0.69062886,0.60385373,0.25399081,-0.75554573,0.43847021,0.41703074,0.79613393,0.35645707,0.93247986,-0.058477875,-0.12848436,0.26991862,-0.95427234,-0.50249822,0.11464927,-0.85694287,-0.44354729,-0.82381877,-0.35297087,0.0028117835,-0.99868735,0.051143534,0.5448675,0.16758236,-0.82160547,-0.42162035,0.89146203,-0.16592688,-0.38291602,0.78676751,-0.48412003,-0.62554015,0.71527156,0.31158646,0.52569916,-0.53882844,0.65825854,0.25926036,0.15491303,0.95330269,-0.15046233,0.9319888,-0.32978472,-0.53659447,-0.2058018,0.81835933,0.31416857,0.59500011,0.739779,0.0027317802,0.7335456,-0.67963475,-0.52875112,0.52577929,0.66631703,-0.3442705,0.31194798,-0.88553164,0.251822,-0.66785396,-0.70039757,0.27168182,-0.70881029,-0.65098153,0.37495512,-0.55866598,0.73979793,0.92686192,-0.15106657,-0.34366535,0.33701327,0.7572651,-0.55943866,0.028790035,0.77497792,0.63133221,-0.12347069,0.35440758,-0.92690358,-0.52482823,0.62489938,-0.57797586,-0.60979279,-0.03103088,-0.79195318,-0.444445,-0.70412374,-0.55378552,0.14758978,-0.25412022,-0.95584527,0.6693193,-0.27974478,-0.68829829,0.86990687,-0.28882859,0.39980005,0.40874601,0.70064243,0.58483065,0.56247459,-0.41628065,0.71437578,0.80807472,0.46655977,-0.35963484,-0.064386388,0.99192177,-0.10929587,-0.25151655,0.11146247,-0.96141331,-0.53453452,-0.2084697,0.81903189,0.51736765,-0.097219518,-0.85022296,-0.28614296,0.28009782,-0.91633369,-0.97100413,0.15412719,0.18274514,-0.42807012,-0.84009572,-0.33315933,0.5698264,0.27687799,0.773716,0.318848,0.94610398,-0.056773373,-0.25849091,0.89985063,0.35135637,-0.28628418,0.84565619,-0.45045198,-0.60098116,-0.51310599,-0.61281636,-0.25702606,-0.45380708,0.85322725,-0.27117308,-0.58049262,-0.76778479,0.059456571,-0.31290181,-0.94792266,0.5234268,-0.68588127,0.50556035,-0.59962599,0.65132636,-0.46499748,-0.90768632,-0.033333095,-0.41832337,0.24838576,-0.93312293,0.25997329,0.26456279,-0.95916999,-0.099997358,0.68586233,0.46836333,0.55698174,0.12055461,0.47834252,0.8698592,-0.58287583,0.65479637,0.48114186,-0.52672623,-0.12790126,-0.84035751,0.023770652,-0.99876353,0.04366192,0.60780014,-0.76952047,0.19600317,0.99282898,-0.0029889407,0.11950601,0.45128027,0.88440441,-0.11905867,-0.99162235,0.06126039,0.1137202,-0.49782046,-0.36568656,0.78641473,0.93256696,-0.36099122,-0.0020483384,0.43972269,0.47588947,0.761691,-0.12860806,0.18621738,-0.97405496,-0.48350741,0.55425771,-0.67750939,-0.98020502,0.16782478,0.10503795,-0.85451622,-0.4423636,0.2722434,-0.64540514,-0.45426332,-0.61408228,-0.50209294,-0.41347977,-0.75956379,0.92648286,-0.29393403,-0.23501552,0.26648759,0.93507864,0.23369275,-0.36246536,0.81484844,0.4523725,-0.94158365,0.14541547,-0.30376731,-0.37413985,-0.02875117,-0.9269265,-0.43690561,-0.035225909,-0.89881735,-0.61770974,-0.53535092,-0.5760504,-0.15623229,-0.57886302,-0.80031811,-0.82446095,-0.55618313,-0.10452024,-0.47798696,-0.51637701,-0.71055137,-0.33725421,-0.3931895,-0.85537221,0.48316287,-0.20218374,0.85186582,0.89225824,0.1869707,0.41099536,0.29649554,0.21100136,-0.93143374,0.76748138,0.6410456,0.0057336684,0.64104575,0.65457561,-0.40073822,-0.22910518,0.95079397,-0.20857049,-0.41183965,0.30351129,-0.85922581,-0.91684214,0.24661431,-0.3139775,0.1721541,-0.69911119,0.69397875,0.69265787,-0.65761616,-0.29625338,0.72621024,-0.5981863,0.33880945,0.099278408,0.98187361,0.1614559,-0.51498792,-0.79864667,0.31136945,0.68412469,0.30745645,0.66139545,0.49249255,0.42885272,0.75732188,-0.31655136,0.61305552,-0.72384954,0.082192376,-0.64995976,-0.7555109,0.23265686,-0.73756553,-0.6339305,0.5866303,0.49515132,-0.64085104,-0.26446378,0.92598059,-0.26947887,-0.46440339,0.56515258,-0.68185926,-0.81856775,0.51409379,-0.25623117,-0.18424012,0.071212157,-0.98029812,-0.48125025,0.028350997,-0.87612466,-0.23507841,-0.32570391,-0.91578115,0.2355319,-0.75306486,-0.61434359,0.585212,-0.15439778,-0.79604537,0.28408138,0.23750166,-0.92891912,0.29385884,0.5952164,0.74790669,-0.010251308,0.98580453,0.16758383,-0.98815151,-0.022472436,0.15182746,0.35892671,-0.6524717,-0.66742212,0.60759363,-0.65258208,-0.45273238,0.66709292,-0.27714652,-0.69150332,0.15520928,0.97849579,-0.13585314,-0.11827801,0.93093598,0.34549749,-0.50100791,-0.81616799,-0.28785568,0.59949281,-0.67703109,-0.42689259,0.1421216,-0.047510437,-0.98870835,0.99137365,-0.086964954,0.098058023,0.590361,0.77547035,0.22387413,0.50333669,0.76281414,0.40591474,-0.63177846,0.76875123,0.099385721,-0.42852687,-0.012869746,-0.90343737,-0.5111317,-0.68405202,0.52040102,-0.45408915,-0.76773386,0.45209266,0.74878738,-0.50200283,0.43279396,0.7106331,-0.34671599,0.61219982,-0.30844257,0.95120408,-0.0086005372,-0.12578318,-0.78711327,0.60384708,0.71266626,-0.061073987,0.69883959,-0.016515536,0.9185488,0.39496245,-0.32224425,0.7865908,0.52671962,-0.13338836,-0.9024946,-0.40952538,0.45034186,0.065296012,0.8904654,0.43519699,0.67954886,-0.59060725,0.89208624,-0.43109397,-0.13542571,-0.82312257,-0.53912726,-0.17835648,-0.57432763,-0.38879887,0.72040489,-0.29139321,-0.76282718,-0.57722152,0.48793053,-0.24054665,0.8390835,0.83781502,-0.30222912,-0.45466862,-0.73236001,-0.37899466,-0.56569591,0.1853322,-0.91785983,0.35097764,0.1264488,0.98654529,0.1036296,-0.44968304,0.80412438,-0.38880476,-0.73780912,0.31361888,0.59772979,-0.2701765,-0.68678935,0.67477778,0.92792771,-0.30737381,0.21088267,0.81030927,-0.23255066,-0.53788389,0.3065415,0.39614983,0.86550426,0.37127971,0.84748932,0.37935896,-0.04397354,-0.13136469,0.99035834,0.27576747,-0.36075264,0.89096007,0.32667957,-0.25882665,-0.90900452,0.57709933,0.53151601,0.62003798,0.50427631,0.76805108,-0.39471881,-0.31685687,0.58783577,-0.74434591,-0.38024416,-0.70466166,-0.59905453,-0.37434943,-0.87157323,-0.31657956,0.028942148,-0.31867766,0.94742119,0.20368633,-0.9755311,-0.082770441,0.10538832,-0.45452059,-0.8844797,0.18839843,-0.77719043,0.60040076,0.56869091,-0.64469784,0.51083788,0.58635486,-0.5033846,0.6346589,0.97474724,-0.19688785,-0.10537074,0.42293235,0.037061111,-0.90540306,-0.38147106,0.78813271,0.48303898,-0.84083759,-0.27272632,0.46756016,-0.7506867,-0.37302296,-0.54527365,-0.86209788,-0.50602439,0.0269548,-0.33024211,-0.62616114,0.7063019,-0.07118458,-0.20409974,-0.97635857,0.22803023,-0.76470104,-0.60268942,0.42908696,-0.29076613,0.85518386,0.54491249,-0.35796296,0.7582433,0.06236516,0.019286156,0.99786704,0.53924046,0.40261529,-0.73967605,0.73239883,0.63735262,-0.23952786,-0.18486212,-0.014832303,-0.98265253,-0.74248489,-0.11014233,0.66074569,-0.31001759,-0.76140615,-0.56934152,-0.078965745,-0.97165437,-0.22282771,0.96921332,-0.1888878,-0.15794601,0.34087306,0.11696997,-0.93280415,0.30303399,0.56152821,0.76997173,0.35413473,0.91840455,0.17641335,0.26725835,0.70255179,0.65954072,0.21751071,0.96411938,-0.1521937,-0.42555601,0.59203031,0.68439915,-0.74336112,-0.17653076,-0.64517528,-0.19762453,-0.1482801,0.96899822,0.4020949,-0.2675337,0.87564,0.64792575,0.20274351,0.73422564,0.88469104,0.43816962,0.15915135,0.46983295,0.55936517,-0.68291112,0.55361945,0.74672452,-0.36865702,0.27290901,0.55970046,-0.78246793,0.11388143,0.3847666,0.91596161,-0.6874329,0.69657215,0.20548295,-0.07979553,-0.77705434,-0.62435505,0.0061127539,-0.92978409,0.36805458,0.37457825,-0.20808952,0.90354296,0.95340929,0.26863894,0.13727292,0.7403271,0.64890411,0.17561106,0.43490641,0.88710856,0.15457951,0.34126639,0.91466437,0.2166249,0.30644041,0.86831056,0.39003979,-0.61678687,-0.18537074,-0.76499128,-0.43442596,-0.51105452,-0.74168549,0.25202621,-0.66330956,-0.70462985,0.63861708,-0.71765886,0.27773004,0.98411841,-0.13844254,0.11110638,0.36642402,0.84580985,0.3877359,-0.12242368,0.088060118,0.98856353,-0.7872222,0.33759661,-0.51605206,-0.12310758,-0.85840355,-0.49798381,0.30288133,-0.46023154,0.83453569,0.73921045,-0.60802506,-0.28960911,0.74238218,-0.38651099,0.5472458,0.70573914,-0.16657128,-0.68861184,0.58467666,0.81123596,0.0070307071,0.17085232,0.95856426,-0.22795624,-0.53026418,0.19481853,-0.82514583,-0.82953596,0.025673021,-0.55786288,-0.11817965,-0.17530377,0.9773956,-0.36230212,-0.88712935,-0.28589978,0.85407563,-0.46161997,-0.23971195,0.78262925,-0.31817144,-0.53503121,0.72484387,-0.069359415,0.68541275,0.84323645,0.22045527,-0.49025684,0.78953302,0.59581305,0.14712044,0.50499131,0.75726004,0.41417509,0.42966308,0.66541177,-0.61042347,0.3813334,0.87168274,0.30782144,0.00019717152,0.69545197,0.71857256,-0.65235305,0.75559315,0.059283121,-0.87254228,0.2517881,0.41865585,-0.99484327,0.10039983,-0.014378474,-0.4412388,0.019872939,-0.89716965,-0.95092447,-0.13395999,-0.27892181,-0.45302086,-0.31816956,-0.83279063,0.55172479,-0.80541483,-0.21657958,-0.32475077,0.38491279,-0.86393234,-0.088392301,-0.065963026,-0.99389923,-0.49876734,-0.61863861,0.60705635,-0.44081442,-0.82388414,-0.35622685,0.63709664,-0.77054261,-0.01928608,0.39068138,0.54014831,0.74539108,0.32035425,0.88547059,-0.33662292,0.11463543,0.94084239,0.31886411,-0.058360657,0.86840793,0.492404,-0.64537475,0.72705988,-0.23425489,-0.73464579,0.55500042,0.39021801,-0.44907794,-0.0059342518,-0.89347288,-0.90943956,-0.28671243,0.30119041,-0.74084925,-0.39319984,-0.54455144,-0.53062141,-0.49325093,-0.68930721,-0.1658345,-0.96076065,-0.22234633,-0.37072509,0.91569173,0.15515014,-0.63924506,-0.15086458,-0.75405944,-0.56430932,-0.41825331,-0.71177184,-0.17308295,-0.87724193,-0.44775985,0.016601934,-0.44326026,-0.89623921,0.069967976,-0.80532157,0.58869487,-0.83817446,0.15454949,0.52304687,0.8210202,0.13327277,0.5551254,0.859652,0.14601016,0.4895707,0.544153,0.17444352,0.82065033,0.027282332,0.41004231,-0.91165837,-0.12713853,0.90877649,-0.3974432,-0.12479691,0.17716001,-0.97623771,-0.40535444,0.35174338,-0.84377981,-0.52834745,0.38095942,-0.75876142,-0.60323997,-0.35436072,-0.71451383,-0.42753187,-0.599684,-0.67645813,-0.14520812,-0.98676329,0.072199732,0.15378537,-0.77716647,0.610215,0.19355748,-0.93014876,0.31202369,0.79250624,-0.53198257,0.29820867,0.62117127,-0.25879007,0.73971208,0.63099673,0.6985084,0.33753391,0.29456775,0.94302343,0.15471474,-0.091540655,0.59515583,-0.79837951,-0.129509,0.50737509,0.85193775,-0.19311413,0.30925532,-0.9311649,-0.66705589,0.73803163,0.10171411,-0.87465962,-0.10328593,0.47360591,-0.56207951,-0.65712726,-0.50224534,-0.0072012212,-0.059107496,0.99822565,0.0482853,-0.47480336,-0.87876635,0.25727738,-0.74330568,0.61749901,0.69701823,-0.46596824,-0.54501302,0.45034301,0.062375457,-0.89067417,0.52824816,0.10113681,-0.84304521,0.82633661,0.54177096,0.15379216,0.40604643,0.53192656,0.74308844,0.44678975,0.81182039,0.37593427,0.2873302,0.9531063,-0.095024951,0.19750569,0.9543777,-0.22395249,0.0087730434,0.81625877,-0.57761982,-0.23183889,0.92749088,-0.29327699,-0.53139517,0.84552329,-0.052053189,-0.6416596,-0.39338835,-0.65842127,0.40950644,-0.9120309,-0.022452655,0.99446001,0.0085043337,-0.10477098,-0.059008229,0.81560894,-0.57558673,-0.3052832,0.85370103,-0.42189658,-0.71539797,0.19117485,-0.672055,0.035712125,-0.93405288,0.35534471,0.40737461,-0.70747262,-0.57751919,-0.94932891,-0.29909548,-0.096522057,0.11348521,-0.18005704,0.9770878,0.92555157,-0.13813075,-0.35252545,0.78447071,-0.092953041,-0.61316021,0.60763918,0.32871032,-0.72299664,0.2233217,0.34893478,0.91014941,0.10814441,0.98036892,0.16486832,0.022980629,0.93775013,0.34654955,-0.10319052,0.99143321,0.08007434,-0.50811565,0.86032525,0.0407302,-0.8693488,0.46270177,0.17360802,-0.69763434,-0.71552408,0.036491466,-0.27952239,-0.94377864,0.17649111,-0.15796792,-0.9194034,-0.36019928,0.40226447,-0.86171269,0.30924835,0.4070633,-0.86262064,0.30030834,0.45597978,-0.38307131,-0.80332983,0.88919229,0.22668173,0.39743235,-0.40856342,0.80110543,-0.43738544,-0.50389038,0.79840646,-0.32960827,0.095174685,-0.37508955,-0.92208981,0.4941965,-0.29134458,-0.81907762,-0.12800526,0.57912492,-0.80512669,-0.26386729,0.82259195,0.50370282,-0.62605041,-0.45084785,-0.63623666,-0.11433695,-0.89063703,0.44010537,-0.0056478302,-0.86435055,0.50285807,0.62348097,-0.53288992,0.57210123,0.24578775,-0.056860594,0.96765451,0.97057866,-0.18030933,-0.1595795,0.829522,-0.15066079,-0.53776815,-0.031941907,0.96643586,0.25491457,-0.15630902,0.936817,-0.3129559,-0.22440843,0.67521451,-0.70265655,-0.2852705,0.84945866,-0.44389271,-0.42078075,0.63544045,-0.6474249,-0.90905505,0.23370298,0.34496642,-0.65045891,-0.59755752,-0.46885841,-0.54578821,-0.82809103,0.12798623,0.0076475384,-0.99971133,0.022776486,0.55906807,-0.25019857,0.79047047,0.9072747,-0.13811272,0.39721216,0.53916698,0.81568781,-0.20964818,0.43721726,0.88946322,-0.13302721,0.15978461,0.5692814,0.8064661,0.24530624,-0.73572235,0.63129824,0.45151762,-0.76151937,-0.46499471,0.49701498,-0.68496237,0.53273133,0.63176081,-0.73023133,0.26007786,0.6657072,-0.7410492,-0.087635663,0.94397104,0.06038438,-0.32445709,0.96897128,0.20897503,0.13200038,0.22282481,0.45932166,-0.85986785,0.25299261,0.70044734,-0.66735917,-0.044030915,0.51298875,0.85726531,-0.36913441,0.84841005,-0.37939449,-0.41772876,0.64720572,-0.63767346,-0.4559738,0.66000665,-0.59705872,-0.50063252,-0.39331579,-0.77114834,0.34302537,-0.84153556,0.41731463,0.89950836,0.42630921,0.095630403,0.62472204,0.56790208,-0.5359194,0.20222117,0.95749856,-0.20567717,-0.050481201,0.96809232,0.24545652,-0.63753932,0.76820978,0.058286683,-0.53181088,0.53139026,-0.65939486,-0.50047418,0.19314557,-0.8439315,-0.15581337,0.052296559,-0.98640117,-0.9801809,0.187588,-0.063687811,-0.34810706,-0.86307421,-0.3659568,0.092728713,-0.27101244,0.95809897,0.39579219,-0.9093142,0.12843765,0.3058018,0.2326771,0.92322621,0.52072069,0.85216951,-0.051546973,0.20214475,0.97808268,0.04991754,-0.4558418,0.42184416,0.7837447,-0.90126186,0.19297482,-0.38792754,-0.63350937,-0.02236509,-0.77341172,-0.26590866,-0.62029276,-0.73792241,0.80371637,-0.24370526,-0.54281464,0.71241247,0.6253174,-0.31850687,0.56093826,0.67051449,0.48554977,0.26481333,0.96383568,0.029911093,-0.1033133,0.83628176,-0.53847858,-0.1419071,0.9816168,0.12763552,-0.32206394,0.56785355,-0.7575072,-0.21611661,0.20662085,-0.95425439,-0.69901618,0.56275369,0.44123085,-0.49564678,0.36400581,0.78856454,-0.70443692,0.027228393,-0.70924414,-0.67789232,-0.54250278,0.49613782,-0.71368253,-0.69635804,-0.075780797,0.73892446,-0.65099222,0.17378084,0.67788134,-0.367619,-0.6366578,0.652803,0.12903659,0.74645683,0.2319226,0.4053564,-0.88425002,0.38269769,0.88377523,0.26922821,-0.20713447,0.97740672,0.042088207,-0.88280252,0.46969953,-0.0064860843,-0.32217518,-0.3956515,-0.86003665,-0.38173016,-0.85842094,-0.34263036,0.96800999,-0.2419049,0.066623413,0.8906986,-0.21104422,-0.40263673,0.28186993,0.16596643,0.94498915,0.31987001,0.80697846,-0.49645638,-0.18569713,0.95559083,0.22882906,-0.21329364,0.6510107,-0.72848534,-0.36748535,0.68647728,-0.62745794,-0.72014099,0.38521126,0.57706953,-0.73285111,-0.61890179,0.28264786,0.26137221,-0.58401518,0.76851209,0.66044435,-0.6205886,-0.42270918,0.72718611,-0.48984684,0.48088505,0.99645247,-0.078212396,0.031069142,0.96520223,-0.072906763,-0.25113596,0.4134687,-0.00015304557,-0.91051832,0.090459895,0.99330335,0.071871145,0.024708101,0.55623305,-0.83065896,-0.36438713,0.4093051,-0.83647556,-0.50717088,0.2340409,-0.82945919,-0.93709004,0.049163674,0.34560843,-0.85135018,-0.43036165,0.2999862,0.49384823,-0.73375233,0.4666063,0.721627,-0.66360948,-0.19717236,0.73341714,-0.56929689,-0.37148397,0.74125579,-0.39254699,-0.5444692,0.68823125,-0.34359566,0.63896774,0.67334931,-0.24337348,0.69811894,0.79832502,0.063980767,0.59881852,0.82328939,0.26615239,0.50135565,0.036601429,0.77428795,0.63177409,-0.6406065,0.49491329,-0.58709807,-0.3922423,0.27631046,-0.87738162,-0.53487051,-0.7749883,0.33661057,0.19232248,-0.32385179,0.92635419,0.40469816,-0.46540248,-0.78715941,0.76537702,-0.55058516,-0.33324765,0.3890275,-0.16647381,-0.90605964,0.53714727,-0.013165224,0.84338573,0.64864317,0.58356633,0.48858201,-0.45380333,-0.17110019,-0.87452116,-0.40138788,-0.15409322,-0.90285273,-0.79910772,-0.55492922,-0.23125833,-0.6179794,-0.64244272,0.45317637,0.034051598,-0.69439716,-0.71878583,0.33564377,-0.90098999,-0.27488234,0.35410747,-0.40252881,0.84414362,0.72665745,-0.5578459,0.40096996,0.67491707,-0.27787867,0.68357179,0.450226,0.062385761,-0.8907326,0.73606891,0.16255535,0.65709841,-0.00024293224,0.99856101,-0.053627025,-0.33777181,0.74661613,-0.573127,-0.51656604,-0.34023268,0.78574885,-0.14450911,-0.98552352,-0.088659467,-0.047975922,-0.88302811,-0.46686151,0.53640655,-0.59883927,0.59469281,0.63679787,-0.13376286,0.75933917,0.15155802,0.82124913,0.55007275,-0.14029045,0.90999397,-0.39016607,-0.79841819,0.60174824,-0.020674646,-0.64750473,0.47815421,0.59338536,-0.27760469,0.20451307,0.93867462,-0.69280749,-0.6426036,0.32722834,-0.62892799,-0.69985662,-0.33860049,-0.50581817,-0.61995161,-0.59983996,0.43452591,-0.77632226,-0.45663003,0.96028665,-0.22609863,0.16348993,0.96648173,-0.13086954,0.22087604,0.95444685,0.015574917,-0.29797421,0.3147955,0.40992509,0.85607547,0.19559715,0.79044828,-0.58045954,-0.058381808,0.21764024,0.97428142,-0.37350863,0.9040006,0.20802455,-0.49784385,0.31076729,0.80967598,-0.4162094,-0.57227345,-0.70659242,-0.38327395,-0.82792807,-0.409434,0.030999874,-0.87862813,-0.47649933,0.26400814,-0.18158699,0.94727286,0.62473599,-0.28792305,0.72581352,0.59418059,-0.26294303,0.7601384,0.59983388,0.55697999,0.57443242,0.24161015,0.41324112,-0.87798423,0.025795053,0.88572868,0.46348604,-0.56930467,0.53775422,0.6218622,-0.90233685,0.17865093,0.39226528,-0.56596105,-0.4193139,-0.70983374,-0.072960101,-0.68440588,-0.72544154,0.60750494,-0.65073593,0.45550028,0.48988428,-0.46244546,0.73902476,0.44550106,0.61937924,-0.64645043,-0.38911599,-0.88870042,0.24248773,-0.36734503,-0.84067309,-0.39790248,-0.02413248,-0.30558299,0.95185958,0.21837635,-0.89669963,0.38502148,0.22343911,-0.72687699,-0.64940342,0.43374946,-0.80336414,0.40800424,0.10681041,0.99069547,-0.084344645,-0.58273365,0.36527133,-0.72594652,-0.46431521,0.1609232,-0.87092773,-0.47647115,-0.15549049,-0.86533112,-0.37750558,-0.19952537,0.90425614,-0.40008061,-0.78777992,-0.46833567,-0.095550161,-0.98535565,-0.14122471,0.90191092,-0.15644753,0.40259267,0.68234472,0.12439144,-0.72036967,0.44808908,0.65709183,-0.60617366,0.17155589,0.27021917,0.94739125,0.14398544,0.98810517,0.054003476,-0.27878007,0.33160496,0.90128787,-0.7901593,0.61099473,-0.048308594,-0.51904686,0.24310409,-0.8194454,-0.48463826,0.10168693,-0.86878393,-0.48397768,-0.75673819,0.43944616,-0.47357984,-0.76988442,-0.42778512,0.14824644,-0.75597467,0.63759336,0.37153006,-0.82759487,-0.42077564,0.88085046,-0.0426005,-0.47147392,0.27441052,0.57688647,0.76935094,-0.85428831,0.46807322,-0.22605076,-0.7669909,0.21733802,-0.60372936,-0.71845914,-0.63141298,0.29177751,-0.48736369,-0.60907806,-0.62570006,-0.38917907,-0.62688676,0.6749464,0.14179334,-0.38606973,0.91150689,0.99477232,0.023164134,-0.099455777,0.77846035,0.058164716,0.62499307,0.87837967,0.47471826,0.055603302,0.51725892,0.5709076,0.63757958,-0.2413164,0.60706163,0.75712784,-0.47396551,0.8220288,-0.31563483,-0.58506475,-0.79193597,-0.17474742,0.50809574,-0.63931833,0.57715752,0.49674421,0.12538856,0.85879153,0.45697523,0.7909033,-0.40699583,0.2285094,0.90132485,0.36796327,0.12117749,0.98446122,-0.12709103,-0.65825342,0.61357559,-0.43615069,-0.96341188,0.23565406,0.12768993,-0.45038604,0.10700382,-0.88639867,-0.5805117,0.064186862,-0.81171806,-0.54083386,-0.11096599,-0.83377772,-0.49832886,-0.12114244,-0.85848288,-0.3873472,-0.91036499,-0.14559439,0.0020987902,-0.99792448,-0.064360944,0.10771548,-0.7315976,-0.67317333,0.24219713,-0.96745424,0.073299634,0.66088369,0.65635594,0.36390882,-0.38398493,0.79131356,-0.47579242,-0.30683678,0.57068841,-0.76168624,-0.64976839,0.7496305,-0.12591723,-0.59888115,0.52174214,-0.60755782,-0.7546193,-0.13263888,-0.64261702,-0.52316389,-0.24600997,0.81595259,-0.2913906,-0.28531419,0.9130648,-0.4806897,-0.76169407,-0.43446467,-0.25946507,-0.4658654,-0.8459594,0.063481473,-0.46082711,-0.88521663,0.11281657,-0.4965629,0.86063796,0.90521819,-0.0088510626,0.4248549,0.47600402,0.77457672,-0.41647459,0.27588129,0.94489526,0.17624547,-0.016056625,0.93872605,0.34428997,-0.55713337,-0.27977085,-0.78187638,-0.46204534,-0.65607261,0.59672677,-0.40493973,-0.58476323,-0.70290524,-0.29607944,-0.93666196,-0.18708644,-0.14610153,-0.78203456,0.60586821,0.031503048,-0.98790233,0.15184382,0.36859744,-0.92957034,0.0059092256,0.60652199,-0.75363054,0.25332211,0.5819148,-0.2193813,0.7831009,0.6231455,-0.15484636,0.76662396,0.66955846,0.57923252,0.46495285,0.35486719,0.89912885,0.25619637,0.23090805,0.93601499,0.26562646,0.0116529,0.45242442,-0.89172662,-0.26853057,0.75509423,-0.59810036,-0.3306067,0.79121174,-0.5144737,-0.35572114,0.80479351,-0.47515247,-0.49216265,0.21041274,-0.84469072,-0.99333665,-0.0037845586,0.11518672,-0.31855028,-0.57006235,-0.7573339,-0.60501556,0.46124779,-0.64900435,0.88836689,0.28630657,0.35893289,0.87244509,0.45216747,-0.18542961,-0.17520172,0.96941725,0.1718562,-0.22563672,0.91135807,-0.3442594,-0.28990211,0.83502618,-0.46764093,-0.6083522,0.70424288,0.36599121,-0.24131433,0.22972084,-0.9428657,-0.69904439,0.20713794,0.68442006,-0.97579424,-0.16875447,-0.1390954,-0.64717881,-0.12167948,-0.75256474,-0.47388741,-0.67531435,-0.56513826,0.019048976,-0.86945799,-0.49363948,0.07008689,-0.8879066,-0.45465338,0.10179925,-0.98260732,-0.15530543,0.44615323,-0.7642638,0.46566957,0.86267753,0.28759734,0.41602314,0.39670698,0.51405337,0.76050819,0.33673237,0.68198908,0.64923201,0.33176557,0.90261404,0.27426175,-0.025948253,0.96586905,-0.2577279,-0.51974471,0.79871961,0.30317062,-0.33001381,0.29998553,0.89504166,0.00023820096,-0.95756658,0.28821206,0.12297034,-0.96001572,-0.25149177,0.14798954,-0.75537394,0.63836456,0.13625856,-0.31967359,0.93767927,0.60132768,-0.59459079,-0.53372915,0.46919314,0.20384571,0.8592466,0.33347575,0.18282535,-0.92486151,0.74656939,0.45076163,-0.48933435,0.54727577,0.54138946,0.63826851,-0.42133851,0.43508647,-0.79572207,-0.8125876,0.57717494,0.081058557,-0.85796525,0.49428018,0.13993832,-0.79547863,0.29457136,0.52956725,-0.9150817,-0.38826783,-0.10896595,-0.60093159,-0.26271614,0.75489168,-0.082572566,-0.17778021,-0.9805998,0.36329918,-0.78466172,0.50231433,0.8058522,-0.5761324,-0.13665173,0.89435715,-0.30975337,-0.32276639,0.38332486,0.88800348,0.25399188,0.13566927,0.75278624,0.64413254,-0.37579511,0.82174735,-0.42837989,-0.31006432,0.60632674,-0.7322759,-0.50446001,0.86309305,-0.024299994,-0.48043973,0.17783873,-0.85880792,-0.47551341,-0.095949282,-0.87446025,0.51666295,-0.3547796,0.77922451,0.47834313,-0.26708867,-0.83657127,0.73157097,-0.079876138,-0.67706995,0.160056,0.91822748,-0.36227113,-0.98030545,0.10008371,-0.17024826,-0.8186397,0.070852675,-0.56992011,-0.2098736,-0.70846981,-0.67381273,0.18112518,-0.9707923,-0.15734034,0.43406894,-0.78439557,-0.4430663,0.72676893,-0.66397334,0.17591567,0.094511217,-0.027813294,0.99513519,0.92777122,-0.10867172,-0.35697482,0.69944735,0.69770954,0.154838,0.27794606,0.36017128,-0.89051819,0.28121946,0.92753312,0.24616646,0.12663703,0.5225718,-0.84313806,0.13165711,0.99111205,-0.019060905,0.10046575,0.84028265,0.53275858,-0.69246962,0.57340386,-0.43782856,-0.67888142,0.55365452,-0.48227242,-0.94705073,0.063058068,-0.31483105,-0.635564,-0.18910406,-0.7485306,-0.38614569,-0.21769058,-0.89638291,0.47290135,-0.86874159,0.1471474,0.64349477,-0.5499003,-0.53246986,0.9021816,-0.20036151,-0.38199952,0.34662377,0.13641948,0.92803108,0.16606606,0.98609204,-0.0066752976,0.031088472,0.79480561,0.60606728,-0.025785629,0.57344496,-0.81883819,-0.52823649,0.81909716,-0.22370975,-0.72711812,0.57164654,-0.38015716,-0.7619722,0.3316532,0.55624142,-0.28577852,0.11788484,-0.95101724,-0.70734241,0.28136674,0.6484593,-0.45133142,-0.0085096433,-0.89231583,-0.94828057,-0.085959119,0.30557321,-0.71651744,-0.25212868,0.65041055,-0.33973367,-0.60538291,0.71978647,-0.18818238,-0.98210337,-0.007769114,0.78138377,-0.53373882,-0.32336091,0.51433217,0.37927927,0.76916166,-0.22995423,0.9461223,0.2279773,-0.39688345,0.61447788,-0.68183609,-0.96704936,0.25087126,-0.043349066,-0.33505386,-0.62025375,-0.70924199,-0.37442171,-0.71144874,0.59468401,0.67568987,-0.72045942,-0.1561455,0.57481751,0.080202179,0.81434172,0.83600276,0.30207727,0.45809248,0.76005532,0.59429017,-0.26293557,0.56165007,0.47044014,-0.68061389,0.26502076,0.31580477,0.91106056,0.6042434,0.79187391,-0.088462523,-0.25626564,0.40610029,-0.87716046,-0.43852738,0.51700684,-0.73511745,-0.27209229,0.26611443,0.92474261,-0.89434637,-0.31853365,-0.31413514,-0.50251056,-0.31987549,-0.80322028,-0.49732998,-0.79024906,0.35800742,-0.00082784639,-0.91484649,-0.40380097,0.20177299,-0.71407473,-0.67036179,0.32143806,-0.75935993,0.56572968,0.47716078,-0.47788655,0.73752426,0.87254654,-0.48708121,-0.037608836,0.69773312,-0.0676483,-0.71315651,-0.21294684,0.63061224,-0.74631217,-0.39318528,0.020190552,-0.91923755,-0.7472602,-0.40239659,-0.52884703,-0.51733676,-0.34949951,0.78116117,-0.53350567,-0.77587095,-0.33674318,-0.46358552,-0.67885231,-0.56942779,0.30841374,-0.3822914,-0.87105353,0.36674371,-0.066940522,0.92791057,0.65246496,0.089998111,-0.75245585,0.18962829,0.17448765,-0.96622729,0.68542273,0.63381514,-0.35843278,0.03296035,0.99893223,0.032372956,-0.029007548,0.35195437,0.93556757,-0.42391935,0.75180993,-0.50504873,-0.75362149,0.52142485,-0.40021343,-0.40646348,0.14346593,-0.90233307,-0.77354745,0.13941875,0.61821255,-0.61825172,-0.065048257,0.78328381,-0.92282703,-0.24263473,0.29919669,-0.89223936,-0.3580177,-0.27519492,-0.72849785,-0.38649943,0.56560505,-0.42504728,-0.30491788,-0.8522675,-0.062452613,-0.37312455,-0.92567691,-0.055582594,-0.64819463,-0.75944341,0.30397664,-0.88010025,0.36472147,0.38108121,-0.27202222,0.88361815,0.87889053,-0.20649669,0.43001228,0.96469093,0.18834743,-0.18411044,0.37866437,0.39742985,0.83586052,0.091273857,0.98787927,-0.12555329,-0.20304023,0.9691366,0.13981745,-0.74875197,0.62954059,-0.20748286,-0.99026104,0.12898727,-0.052396242,-0.95856951,-0.23169386,-0.16571799,-0.036376538,-0.36049039,0.93205334,0.013309866,-0.98973583,-0.14228788,0.077058277,-0.5384855,0.83910392,0.40487679,-0.67678892,-0.61484269,0.44552939,-0.64954328,0.61611451,0.56172379,-0.79730236,-0.22085139,0.5758123,-0.75818973,-0.30592243,0.11328823,-0.037092622,0.99286954,0.22383508,0.0015602636,-0.97462579,0.97317699,0.2291894,-0.019969089,0.66866391,0.41980085,0.61372291,0.24754438,0.37413665,0.89372454,0.36533253,0.88811683,0.27889181,0.25294151,0.94281476,-0.21707352,0.10807733,0.98862821,-0.10456368,-0.33088926,0.52718426,0.78268068,-0.44559629,0.67647542,-0.58636589,-0.73399235,0.49414259,-0.46591666,-0.85401886,0.39942248,0.33333688,-0.89563203,-0.088233044,0.43595664,-0.9389208,-0.33066823,0.095321859,-0.57608194,-0.40603932,-0.70940938,-0.71798612,-0.51734451,-0.46567219,-0.11367697,-0.90671269,-0.40613992,-0.032752575,-0.76432757,-0.64399583,0.083660207,-0.41633703,-0.90535322,0.79988725,-0.36739074,0.47455709,0.91717273,-0.3899878,0.081876074,0.93654858,0.059750608,0.3454079,0.79772386,0.45100697,0.40028659,0.23228716,0.7673548,0.59766987,-0.38610105,0.53866284,-0.74884466,-0.35607799,0.29628582,-0.88624104,-0.3562092,-0.12135016,-0.92649293,-0.43286977,-0.68760036,0.58294898,-0.34574399,-0.83684684,-0.424439,-0.04017167,-0.84983297,-0.52551894,0.0011454926,-0.99709393,0.076173412,0.50193121,-0.74931715,0.43195934,0.26895433,-0.14029808,0.95287985,0.67419332,-0.33023011,-0.66061444,0.62522818,0.11606188,0.7717638,0.47003217,0.11083228,0.87566316,0.64884208,0.74531501,-0.15332803,0.28668403,0.62582934,0.72536191,0.38766964,0.87169145,0.29977703,0.25077012,0.95995764,-0.12488263,-0.12592724,0.72657501,0.6754488,-0.28693507,0.26202586,0.92141777,-0.44369173,0.38505687,0.80923968,-0.7567518,0.6322729,-0.16600513,-0.41513698,0.14270891,-0.89849622,-0.91236233,-0.13982277,0.38476561,-0.84821114,-0.25600308,0.46368123,-0.18244058,-0.11494473,0.97647486,-0.67086097,-0.46105676,0.58083752,-0.67672756,-0.5852849,0.4466334,-0.63489065,-0.64668173,0.42274886,-0.37689891,-0.79284247,-0.47890294,-0.15508299,-0.82323757,0.54610363,0.37597379,-0.57181771,0.72915582,0.49020893,-0.51998905,0.69950454,0.58141836,-0.48459264,-0.65354622,0.91553275,-0.40152456,0.024037718,0.82167745,-0.29195277,0.48949948,-0.83817446,0.15454949,0.52304687,0.20970281,0.94006996,0.26887395,0.077707816,0.37988493,-0.92176404,0.15128737,0.80613468,-0.57206556,0.0078688147,0.89911191,0.43764809,-0.22313117,0.38518164,-0.89545943,-0.6213114,0.45529677,0.63771231,-0.97040686,0.15105042,-0.18839928,-0.79749706,-0.60206906,-0.038875266,0.10336871,-0.93069483,-0.35088752,0.59466168,-0.71804684,0.36164377,0.46596245,-0.51326257,0.72072222,0.59049578,0.33125746,-0.73592339,0.15797125,0.76666892,0.62230527,-0.16537599,0.9554709,-0.24438931,-0.2172548,0.91284988,-0.3456956,-0.38522935,0.8880911,-0.25078385,-0.6803798,0.30889615,-0.66457994,-0.51747199,0.21268084,0.82884836,-0.61901832,-0.071978175,-0.78207126,-0.73419517,-0.3325113,0.59194061,-0.76295143,-0.48792376,0.42407018,-0.45290002,-0.80290624,0.38758631,-0.41433259,-0.90994838,0.017957115,-0.21115641,-0.662006,0.71913909,-0.2536566,-0.964488,-0.07362904,0.046800078,-0.41102798,0.91042064,0.075395632,-0.31167137,0.94719399,0.67773376,-0.65216696,-0.33963982,0.88853858,-0.40719002,0.21141304,0.90893987,-0.37349285,-0.18528735,0.64474118,-0.12024194,0.75488455,0.94902866,-0.075676522,-0.30597004,0.50067168,0.12252103,0.85692267,0.65134412,0.26200842,0.71211125,0.7508599,0.62760591,-0.20571882,0.28570616,0.25175585,-0.92465722,-0.22782824,0.73541165,-0.63817239,-0.30130681,0.8675022,-0.39579558,-0.48488205,0.68365958,-0.54543466,-0.3906572,0.45569298,-0.79983177,-0.62428759,-0.17770283,-0.7607146,-0.46835987,-0.48413219,0.73909069,-0.4753396,-0.53176329,-0.70091374,-0.28898787,-0.68615113,0.66759467,-0.19738759,-0.80395929,-0.56097023,0.17845341,-0.87567004,0.44872749,0.24512782,-0.96412507,-0.10185873,0.2021204,-0.77147159,-0.60330666,0.91826985,0.38121624,0.10702648,0.59883844,0.39344692,0.6975615,0.68337309,0.46546804,0.56244175,0.64381247,0.76292204,0.058783175,0.44061002,0.88314643,0.16098198,0.078153244,0.95545911,0.28458733,-0.32993466,0.71195521,-0.61988943,-0.33219281,0.41269428,-0.84813405,-0.9646302,0.2559443,0.06309593,-0.98759131,0.063503729,0.14363382,-0.78678638,-0.549663,0.28078064,-0.36469526,-0.90957682,0.1991667,-0.14514583,-0.40381392,0.90325357,-0.17542312,-0.51898472,0.83658926,0.44509039,-0.77911798,-0.44144051,0.70855493,-0.24570724,-0.66149668,0.56377763,-0.1896476,-0.80385855,0.49500396,-0.11743939,0.86091757,-0.47390372,-0.8582083,-0.19721506,0.18006613,0.19987372,0.96313378,0.53499484,0.63045602,0.56241064,-0.35166754,0.85050216,-0.39112148,-0.54706863,0.28801706,-0.78597843,-0.75138859,-0.2443504,-0.6129503,-0.28917954,-0.33753499,-0.89579313,-0.010015316,-0.71510802,-0.69894221,0.090768862,-0.99412818,0.05890817,0.15207401,-0.58316818,-0.79799021,0.8323846,0.10194055,-0.54474215,0.59883386,0.70343,-0.38286321,-0.10187435,0.4981038,0.8611122,-0.55826842,0.66704146,-0.49334781,-0.23003669,0.089348768,0.96907168,-0.37204391,-0.13031936,-0.91902132,-0.80181412,-0.57923911,0.14688828,-0.75369623,-0.64170633,0.14196824,-0.35552992,-0.7810256,0.51341746,-0.26319333,-0.66887121,-0.695227,-0.2280773,-0.61614448,0.75388774,-0.068945363,-0.56692631,0.82087825,-0.0671222,-0.92681428,-0.36947245,0.15618859,-0.7975244,-0.58271773,0.21595521,-0.89659492,-0.38662759,0.29272865,-0.85572196,-0.42667303,0.30255724,-0.36838073,-0.8790647,0.87472634,-0.47652917,0.088169083,0.65582226,0.24631107,0.71360214,0.77378781,0.62590151,0.097466548,0.61566837,0.70142941,0.35909502,0.43755065,0.88139067,-0.17804468,-0.22138449,0.66918104,-0.70935579,-0.62358024,0.73191305,-0.27468341,-0.61382877,0.63827895,-0.46455809,-0.76721256,0.46919439,-0.43731169,-0.8304473,0.31367575,-0.46039636,-0.41051184,0.13565638,-0.90170803,0.42125788,-0.84156587,-0.33809568,0.63037846,-0.46316648,0.62297657,0.78555957,0.58101941,-0.21286756,0.13056014,0.9183611,0.37358659,0.043571366,0.90842738,0.41576585,0.024960774,0.83059552,-0.55631649,-0.30612572,0.85647099,-0.41562541,-0.20412301,0.00033115656,-0.97894519,-0.96769711,-0.17884312,0.1777004,-0.82955353,-0.22334446,0.51181852,-0.11586192,-0.40420936,0.90729863,-0.0071757917,-0.74641489,-0.6654422,0.18679023,-0.97179934,-0.14392862,0.31428864,-0.89203912,-0.32479049,0.26954951,-0.61103095,-0.74430118,0.51940751,-0.029365763,0.85402195,0.99805814,-0.0057767332,-0.062020716,0.56272839,-0.002433703,0.82663828,0.96261866,0.047354151,-0.26668875,0.2388972,0.75666167,0.60859777,0.15313435,0.98767995,0.032220986,0.044478267,0.9747065,0.21901807,-0.34521906,0.7474142,0.56762295,-0.42357721,0.84840631,0.31747296,-0.54808556,0.22319384,-0.8060935,-0.91056644,0.34246746,-0.2314839,-0.75907933,0.044640783,-0.64946576,-0.41909386,0.014901391,-0.90782063,-0.90695096,-0.21479605,0.36235704,-0.12872374,-0.08866206,-0.98770909,-0.23027191,-0.94780598,0.22054175,-0.069150888,-0.56673811,0.82099091,0.34932056,-0.71403067,0.60674159,0.56145267,-0.6128899,-0.55600077,0.72889917,-0.26796129,0.63000218,0.51731621,-0.068032511,0.85308588,0.61551006,0.13317138,0.77679647,0.9009653,0.35317584,-0.25204832,0.076355525,0.99674849,0.025734918,-0.17561719,0.68375157,0.70826717,-0.80885197,-0.1818616,-0.55918231,-0.48677959,-0.16348169,-0.85809053,-0.38065367,-0.68252104,-0.6239133,-0.45095282,-0.82575885,-0.33876817,-0.13246098,-0.31382104,-0.94019702,0.43007177,-0.81684175,0.38445785,0.46622256,-0.5111064,-0.72208501,0.58030422,0.49671721,0.64538286,0.3751007,0.92698375,-0.00076779033,0.23747979,0.90886902,-0.34287089,0.2153818,0.92271351,0.3197037,-0.087012054,0.994882,-0.051368432,-0.3008299,0.95081079,-0.073893284,-0.23795135,0.7361089,0.6336583,-0.89718203,0.33284132,-0.29031202,-0.49631223,-0.09185899,-0.86327058,-0.72952821,-0.32022444,0.60435495,-0.69632965,-0.70226823,-0.14813625,-0.56312575,-0.63998998,-0.52278315,-0.31960129,-0.89721356,-0.30473405,-0.13729803,-0.5646792,0.81380996,0.29468227,-0.53364886,0.79270502,0.60677647,-0.79327689,-0.050339777,0.63115726,-0.77437792,-0.044489777,0.4363064,-0.17406814,-0.88280066,0.94898073,-0.27558283,0.15326344,0.80657585,0.4501766,-0.38311411,-0.0078933224,0.98291027,-0.183916,-0.020857751,0.95867002,-0.28375473,-0.070721806,0.64841313,0.75799659,-0.17841618,0.62329632,-0.7613602,-0.051107274,0.12176576,0.99124222,-0.58920044,0.51393483,-0.62346919,-0.86350789,0.20996622,-0.45855022,-0.88297985,-0.10216905,0.45815726,-0.91496174,-0.39846229,0.063818635,-0.82715911,-0.42927916,0.3626668,-0.61445547,-0.53879935,-0.57631566,-0.61847231,-0.76510599,-0.17917818,0.021645348,-0.72595264,-0.68740399,0.082034195,-0.92380055,0.37398253,0.096096878,-0.68905937,-0.71830535,0.14575242,-0.6162676,0.77393183,0.59587559,-0.68021161,0.42690097,0.34075971,0.66049655,-0.66904942,0.40576116,0.84368812,0.3514943,0.34667297,0.7469363,0.56736585,0.20672911,0.76162839,0.61415411,-0.24659451,0.55606812,-0.79371241,-0.22565023,0.46778157,0.85455391,-0.49797497,0.86481344,-0.064176622,-0.35694953,0.36650281,-0.85922216,-0.75391815,0.51697011,-0.40540021,-0.86602258,0.10528481,-0.48879443,-0.46645688,0.038976386,-0.8836848,-0.91160987,-0.065115467,0.40586627,-0.86421812,-0.1983245,0.46237911,-0.5345508,-0.14504999,0.83259591,-0.80758458,-0.51866608,-0.28070027,-0.73368121,-0.67830888,-0.040111737,-0.62078114,-0.66163796,0.42055438,-0.44700467,-0.87729631,-0.17475129,0.40720219,-0.90510664,-0.12234521,0.31842116,-0.51263062,-0.79738185,0.42832108,-0.67605383,0.59957674,0.44346953,-0.66663541,0.59910934,0.550078,-0.61534364,0.56459401,0.97340908,-0.18547126,-0.13444393,0.86941751,-0.060831299,0.49031903,0.72331636,0.47139838,0.50457607,0.58028973,0.57555819,0.57619147,-0.16034592,0.63994148,-0.75150788,-0.33196573,0.88522645,-0.32584182,-0.45402159,0.75922874,0.46630046,-0.47467432,0.5189512,-0.71089657,-0.80801299,0.49093865,-0.32572113,-0.37797251,0.16802544,0.91044178,-0.26719448,0.1092651,-0.95742793,-0.87826516,-0.2729385,-0.39262563,-0.72512893,-0.24162725,0.64482889,-0.14152402,-0.33334587,0.93212203,0.21919087,-0.81783606,0.53207099,0.53360491,-0.80408022,0.26214653,0.39990559,-0.52089005,0.75415454,0.74793414,-0.38876358,-0.53801246,0.6694594,0.12851827,0.73164689,0.49467128,0.18024599,0.85018334,0.23082725,0.38962408,0.89157829,0.083464838,0.99631598,-0.019699752,-0.050504127,0.95930314,0.27782517,-0.98899967,0.13927136,0.049831031,-0.33774658,-0.051583587,0.93982253,-0.4911669,-0.83541561,-0.24664921,-0.25945808,-0.51744275,-0.81543517,-0.10641368,-0.22187475,0.96925112,0.37907574,-0.68483809,0.62233301,0.25805452,-0.43920475,-0.8605272,0.69586111,-0.21263835,0.6859754,0.98937091,-0.14375277,0.021916746,0.99638985,-0.05923014,0.060819832,0.68755447,0.32273304,0.65047078,0.66455352,0.31617622,0.67705333,0.6898767,0.54799234,-0.47304813,0.46405626,0.56016815,0.6861949,0.37321733,0.88395328,0.28166545,0.16377355,0.91196151,0.37617075,0.012668528,0.56328405,0.8261662,-0.84319788,-0.43834456,-0.31124169,-0.29337549,-0.49702672,0.81663655,-0.43849233,-0.78575216,-0.43625454,0.024361656,-0.92542535,0.37814605,0.046812973,-0.91445696,-0.40196644,0.044307318,-0.85235188,0.52108841,0.45964377,-0.071079708,0.88525436,0.6631604,0.22568114,-0.71364299,0.31791618,0.17622393,0.93159778,0.46863906,0.68428528,0.55868693,0.23941954,0.42017806,-0.87528777,0.37412985,0.80556953,0.45943943,0.015661614,0.79721308,-0.60349484,-0.42431106,0.7855883,0.45034559,-0.35767443,0.16117755,-0.91983194,-0.99439504,-0.088539845,0.057785783,-0.89980825,-0.36552292,0.23819764,-0.69475672,-0.52436447,-0.49229565,-0.52380464,-0.75003138,-0.40383365,-0.27882087,-0.578156,-0.76680804,-0.23820836,-0.94019872,0.24348129,0.848718,-0.096877186,0.51989669,0.96558216,-0.0853948,-0.24568033,0.68808347,-0.041982583,0.72441604,0.89934989,0.43246681,-0.064360175,0.75963946,0.48125204,0.43742926,0.31080399,0.30755572,-0.89933885,0.14322346,0.60443623,0.78367333,0.10724713,0.98978943,-0.093887905,0.10673266,0.98979753,-0.094387423,-0.40918518,0.87364714,-0.26326446,-0.62769335,0.74788797,-0.21601998,-0.96128795,0.25422015,0.10629016,-0.33798881,0.014839974,-0.94103312,-0.88620303,-0.10484356,0.4512782,-0.45545914,-0.60322661,0.65473249,-0.42892261,-0.75383882,0.49774736,0.053947172,-0.51520155,0.85536955,0.24229978,-0.96743048,0.073273997,0.34272637,-0.93468191,-0.094384149,0.25065956,-0.45255969,0.85578006,0.983035,0.019313076,-0.18239846,0.50011508,0.29547641,0.81398931,0.40328514,0.51641751,0.75542971,0.47990413,0.69988819,-0.52900714,0.24677883,0.41536778,0.87553973,0.3388255,0.91711072,-0.21001239,0.16115134,0.98499146,0.06182284,-0.16382945,0.72747103,0.66629258,-0.18172356,0.80518351,-0.5644963,-0.2703334,0.95992474,-0.073921175,-0.36029898,0.91880446,0.16119247,-0.52877673,0.80396914,-0.27208232,-0.72243038,0.68572283,0.088761176,-0.52477107,0.47636193,-0.70547476,-0.78301592,0.59033124,0.19594667,-0.71605824,0.11717275,0.68813599,-0.83591081,-0.060296135,0.5455433,-0.52364766,-0.24905767,-0.81471676,-0.83730208,-0.54512179,0.042041247,-0.42590175,-0.51730319,-0.74229718,-0.54574571,-0.66917283,0.50435042,-0.37445618,-0.64535366,-0.66580869,0.026172569,-0.43133651,0.9018114,0.31198008,-0.81140021,0.49426524,0.43754189,-0.72585092,-0.53075187,0.73235195,-0.38762893,-0.55982536,0.62164056,-0.17698129,0.76304694,0.97019949,-0.17561181,-0.16695341,0.2476803,0.44891617,0.85856202,0.14755432,0.94284998,0.29876685,-0.026137868,0.79554187,-0.60533457,-0.066700821,0.96918054,-0.23714992,-0.2351463,0.94118198,-0.24265759,-0.2183705,0.61213142,0.76000622,-0.80634059,0.5793515,0.11902395,-0.79694473,0.12903511,-0.59010934,-0.46071904,0.033186409,-0.88692538,-0.13224521,-0.1745705,0.9757235,-0.44856603,-0.84430332,0.29315596,-0.003437406,-0.86380224,-0.50381928,0.023681946,-0.72544391,0.68787375,0.21978121,-0.8961751,-0.38544313,0.18086741,-0.65843766,0.73057979,0.16934972,-0.50672503,0.84531084,0.3774263,-0.86203353,0.33830103,0.37247623,-0.74360391,0.55526092,0.43366512,-0.0045739286,-0.90106251,-0.3803642,0.4348876,-0.81620821,-0.47390372,-0.8582083,-0.19721506,0.22799661,-0.76472963,-0.60266586,0.69304714,0.031230794,0.72021545,0.94451422,0.1161701,0.3072416,0.64853921,0.30018353,0.69949034,0.22389437,0.86827871,-0.44267753,0.16272781,0.82574651,0.54005775,-0.020278554,0.41277023,-0.91060942,-0.037240347,0.47546802,0.87894443,-0.33748567,0.81664633,0.46817966,-0.38677908,0.72541325,-0.56936592,-0.40220371,0.50236098,-0.76541859,-0.50333325,0.3719487,-0.77994218,-0.33719264,0.11764182,0.93405649,-0.41465117,0.037200161,-0.90921975,-0.56956822,-0.047320317,-0.82058079,-0.77200367,-0.087446747,0.62957398,-0.35202575,-0.046521169,0.93483349,-0.16381085,-0.93652909,0.30996657,0.43247504,-0.83990492,0.32791013,0.47435265,-0.83883952,-0.26709142,0.37737376,0.8981208,0.22576112,0.12206368,0.78513779,0.60717304,-0.74795916,0.5574716,-0.3602534,-0.63334931,0.2528473,-0.7313938,-0.80125751,0.23073701,0.5520388,-0.77478131,-0.43198804,0.46162783,-0.5758524,-0.54100487,-0.61295003,-0.20352012,-0.23640112,0.95010214,-0.030137159,-0.63157378,0.77472983,-0.010382081,-0.22535348,0.97422175,0.06143281,-0.65156786,0.75609876,0.19424662,-0.98029385,0.035947343,0.23167918,-0.9065781,-0.35276183,0.3307967,-0.84763893,-0.41482742,0.71910815,-0.46817188,-0.51351588,0.78569742,0.48414535,0.38507512,0.28796866,0.91601108,-0.27928077,-0.01275072,0.89651365,-0.44283257,-0.26412311,0.75820691,-0.59612186,-0.4316639,0.86627653,-0.25145824,-0.43118779,0.56469432,-0.70370264,-0.73480294,0.19871136,0.64852018,-0.93787604,-0.14489495,0.31526813,-0.89290845,-0.42405021,-0.151314,-0.45186495,-0.30179172,-0.83948783,-0.2666467,-0.86882897,0.41717592,-0.21243972,-0.8196357,-0.53204012,-0.17637108,-0.96610792,0.18849064,0.10465135,-0.5560776,0.82451549,0.20577265,-0.54418083,-0.81334178,0.38490104,-0.92167447,-0.048655595,0.27942759,-0.53319798,0.7985112,0.60901968,-0.63863684,0.47035945,0.86840968,0.0088362377,-0.49576864,0.6885664,0.21055522,0.69393286,0.53193034,0.26550725,-0.80408707,0.4130031,0.47595823,0.77646133,0.26589326,0.75145787,-0.60383097,0.0039938273,0.98610953,-0.16604833,-0.014378418,0.46686897,-0.8842096,-0.070045932,0.97463682,0.21254795,-0.13323748,0.70038991,0.70121448,-0.32272284,0.84650266,0.4234185,-0.4006958,0.86444448,0.3036093,-0.30614572,0.6350408,-0.70922351,-0.36950182,0.59902017,-0.71038247,-0.23306928,-0.0048594459,-0.97244799,-0.91322805,-0.29698165,-0.27895597,-0.24293799,-0.094623148,-0.96541576,-0.5799492,-0.23850785,-0.77895631,-0.3169731,-0.36769763,-0.87425769,-0.6447855,-0.76374159,0.03082908,-0.4581623,-0.60212774,0.65385739,-0.49278767,-0.7989384,-0.34475751,0.54841141,-0.46651594,0.69397968,0.617823,-0.44497516,0.64829919,0.25012044,-0.145498,0.95721998,0.93375257,-0.3502446,-0.073721441,0.41422767,0.48985557,0.76710948,0.49305239,0.76791026,0.40891708,0.15421276,0.62980935,-0.76128747,0.14397719,0.81685514,0.55858594,-0.1117641,0.65682831,-0.74571131,-0.022076129,0.04706429,0.99864788,-0.59048273,0.70913141,-0.3853087,0.026396739,-0.86067592,0.50846846,0.45286974,-0.23197026,0.86087095,0.96467516,-0.21596526,0.15086696,0.9807242,-0.17141829,0.093786014,0.37720545,-0.019912976,0.9259155,0.25497948,0.37153821,0.89271766,0.17236461,0.87463201,-0.45311067,0.1507534,0.89537297,-0.41902346,-0.013758941,0.36065497,-0.93259781,-0.051403854,0.99214138,-0.11407513,-0.12127399,0.98914124,-0.083019479,-0.36689186,0.84066972,-0.39832749,-0.23433012,0.339957,-0.91077914,-0.59545385,0.32267619,-0.73574098,-0.74914074,0.19778698,0.63219338,-0.13967694,-0.099986533,-0.98513605,-0.15207998,-0.69612755,-0.70162534,0.2983994,-0.6338781,0.71355192,0.41553561,-0.86614296,-0.27771664,0.32398189,-0.55354582,0.76721754,0.58219415,-0.70292835,0.408585,0.48568168,-0.5296548,0.69539851,0.42255532,-0.45511844,-0.78378199,0.25395783,-0.22598877,-0.94044378,0.94432505,-0.030962665,0.32755383,0.44888572,0.064545283,-0.89125502,0.93484285,0.20288243,0.29138903,0.66647813,0.74523237,-0.020871452,0.26843267,0.65479098,-0.70653568,0.20567138,0.56439889,0.79947056,0.15433884,0.98789541,-0.015561932,-0.20876414,0.80119375,-0.56080845,-0.30226826,0.91169086,0.278305,-0.33517321,0.8158062,0.4712952,-0.35346591,0.6981029,-0.62266701,-0.78707637,0.59332155,0.16876116,-0.12652011,0.093712466,-0.98752754,-0.79439928,0.5546635,-0.24754432,-0.84073788,0.52276449,-0.14098617,-0.9248401,0.36057439,0.1210657,-0.50455675,0.062470557,-0.86111551,-0.74389319,-0.48663811,-0.45804614,-0.21548673,-0.56304207,0.79784027,-0.16533662,-0.73898725,0.65311687,-0.045444004,-0.36964279,0.92806199,0.097198556,-0.69089483,-0.7163915,0.28273718,-0.93977868,0.19203049,0.62997467,-0.75661207,0.17512877,0.72879743,-0.46498976,0.5026319,0.40795577,-0.22347301,0.88522986,-0.17303831,-0.87735019,-0.44756495,0.57814155,0.091925839,0.81074163,0.53339788,0.82348982,0.19326464,0.33243613,0.90296698,0.27228083,0.27918057,0.90431041,0.32292553,0.030387026,0.18436659,0.9823877,0.11598246,0.81616374,0.56606078,-0.011742778,0.26272635,-0.96479893,-0.20375231,0.96644779,-0.15640863,-0.35167248,0.62598688,-0.69603656,-0.36062321,0.48025768,-0.79956455,-0.5833317,0.37670151,0.71959718,-0.92430876,0.38148358,-0.011117031,-0.8516749,0.33541991,-0.40267026,-0.47319587,0.18083141,-0.86219816,-0.86837116,0.30147652,0.39375557,-0.93469397,0.15068486,-0.32193363,-0.52684626,-0.12798168,-0.84027002,-0.32800261,-0.31878312,-0.88926465,0.22777786,-0.93582693,-0.26897062,0.48177564,-0.77937676,0.40057971,0.56941585,-0.76032318,-0.31252881,0.82733059,-0.51050581,-0.23432439,0.26280973,-0.10119522,0.95952622,0.25428797,0.054729712,-0.96557873,0.82993466,0.46645478,0.30598759,0.34522034,0.44991551,0.82364977,0.039399512,0.14793211,0.98821241,-0.14618806,0.98902763,-0.021293337,-0.32795192,0.87775057,0.34928709,-0.23148471,0.58493012,-0.77734908,-0.45604438,0.79714198,-0.39571225,-0.44461224,0.67191437,-0.5923268,-0.46602884,0.50610304,-0.72572504,-0.46732648,0.37073177,-0.80259823,-0.45329201,0.29852865,0.83988511,-0.58861482,0.37515984,-0.71609195,-0.41793486,0.06739654,-0.9059736,-0.96402471,-0.067427724,0.25711837,-0.53187717,-0.84510365,-0.053912021,-0.39872348,-0.77446374,-0.49114712,-0.043970593,-0.90058651,0.43244714,0.075897646,-0.77720425,-0.62465439,0.48806909,-0.80306483,0.34187052,0.59674909,-0.41713326,0.68548549,0.76490738,-0.47304966,0.43719643,0.62130957,-0.33722892,0.7072843,0.15053304,-0.070174982,-0.98611119,0.71132637,-0.18195748,0.67890079,0.9643412,-0.15672489,0.2132683,0.98119857,-0.07131179,0.17934325,0.60714874,0.59294698,0.52894639,0.59247122,0.72356548,0.35416218,0.074601841,0.14337971,0.98685198,0.40173894,0.90088089,0.16437594,0.017296386,0.39193589,-0.91982993,-0.89190558,0.043809658,-0.4500946,-0.80505661,-0.28068594,-0.52258899,-0.804362,-0.5854218,0.10140556,-0.471552,-0.82704647,0.30599484,-0.12234768,-0.36922577,-0.92125099,-0.11154622,-0.70864128,-0.69669576,0.03639401,-0.93871678,0.34276272,0.3359728,-0.94168129,0.018937182,0.81740898,-0.57472581,0.039151043,0.82105473,-0.54858991,-0.15785517,0.52690527,-0.14097425,0.838151,0.13876648,-0.0047782013,-0.9903136,0.85944414,0.35424464,-0.36860073,0.43047483,0.70006037,-0.56974284,0.2211851,0.97213178,-0.07769778,-0.083631703,0.35034374,0.93287995,-0.26958625,0.75462061,-0.5982232,-0.64920456,0.38361076,0.65679237,-0.45849218,0.10465767,-0.88251442,-0.71513576,-0.28215848,-0.63950562,-0.18859102,-0.31230287,-0.93107483,0.081418428,-0.76723616,0.63617585,0.14896285,-0.77025204,-0.62009826,0.069077603,-0.22191062,0.97261707,0.31612184,-0.37661325,-0.87076371,0.48255393,-0.53366284,-0.6945111,0.38143386,-0.22771329,0.89591008,0.67246494,-0.32637622,-0.66428117,0.51347211,-0.19036936,0.83672331,0.70474661,-0.2423493,0.6667826,0.64739902,0.35285494,-0.67555007,0.35068886,0.36193042,-0.86372663,0.22945684,0.9699293,-0.081158565,-0.1997107,0.62585508,-0.75393704,-0.2807128,0.75035323,0.59847336,-0.33027971,0.67945123,-0.65518039,-0.46809252,0.8831414,0.030832945,-0.54124152,0.46890443,-0.69798729,-0.52688516,0.3907908,-0.7547679,-0.38763152,0.1373696,0.91152147,-0.5553228,0.16561405,0.81497765,-0.50347116,0.062234506,-0.86176775,-0.74529265,-0.11724365,-0.65634808,-0.93865087,-0.19372709,0.28531451,-0.04271506,-0.61646951,-0.78621929,0.080194221,-0.87203921,0.48282141,0.12975287,-0.93994799,-0.31569285,0.14950676,-0.97025183,-0.19041825,0.34069027,-0.81487961,0.46893641,0.39639959,-0.89959909,-0.18327258,0.45803655,-0.87035383,0.18079473,0.4436869,-0.55820212,-0.70110793,0.84538594,-0.38707948,-0.36809249,0.79680519,-0.20052788,-0.56999127,0.9985727,0.0079473188,-0.05281489,0.98882249,0.062470781,-0.13537903,0.94105712,0.33232065,0.063043446,0.66350653,0.5001159,-0.5564559,0.26909161,0.33431197,0.90323043,0.10720042,0.98979056,-0.093929275,-0.51026815,0.72830185,0.45738697,-0.58934406,0.79708455,0.13164272,-0.85040319,0.10101872,-0.51634255,-0.6116467,-0.38193626,0.69282971,-0.52059991,-0.54534398,-0.65694419,-0.52304172,-0.71087602,-0.47019426,-0.29885607,-0.60772913,-0.73576515,-0.15447923,-0.89675697,0.41468435,0.16820286,-0.52018127,0.83732864,0.1620238,-0.15548773,-0.97445978,0.60534355,-0.0028295905,-0.79595928,0.7042268,0.1139795,0.70076621,0.93872083,0.31591195,-0.1378508,0.5954988,0.77893596,0.19657048,0.45155187,0.70569907,0.54597594,0.075604688,0.51077992,-0.85638064,-0.014197353,0.94141873,0.33694097,-0.14840796,0.67066739,-0.72676016,-0.084122433,0.37213373,0.92435918,-0.16371851,0.60197772,-0.78154915,-0.26911201,0.94418475,0.18998392,-0.15183318,0.52685525,-0.83628358,-0.41076824,0.90891699,-0.07168933,-0.377339,0.74453561,0.55071045,-0.34430106,0.60940456,-0.71420086,-0.50550799,0.8324357,0.22696358,-0.37549237,0.56944936,-0.73125434,-0.52058264,0.17176757,-0.83635496,-0.72832344,0.10046367,-0.6778289,-0.47806219,0.048110179,-0.87700738,-0.21415559,-0.011409471,0.97673293,-0.96805102,-0.088647252,-0.23456104,-0.60968779,-0.21662758,0.76246527,-0.81965435,-0.57149307,-0.039527403,-0.45878938,-0.62713367,0.62945665,-0.42438849,-0.71256397,-0.55870117,-0.16606051,-0.89624301,-0.41130569,0.12570993,-0.48080211,-0.86777091,0.31585802,-0.94796199,0.040022164,0.34283363,-0.87620658,0.33871393,0.25474829,-0.47267654,0.84361141,0.46598703,-0.6739054,0.57333028,0.25619088,-0.30009074,-0.9188644,0.8125754,0.26054876,0.52137852,0.61276496,0.35989068,-0.7035608,0.63609987,0.49743294,0.58986222,-0.073836334,0.95438727,-0.28929767,-0.35593533,0.70882072,0.60900182,-0.42255998,0.48751017,-0.76405294,-0.49272311,0.52862418,0.69121662,-0.28770826,0.26737322,0.9196388,-0.25192635,0.17160461,0.95241009,-0.35829274,0.17959296,-0.91617284,-0.71626044,0.16773603,-0.67737405,-0.4699928,0.045000874,-0.88152237,-0.73796371,-0.011770794,-0.67473774,-0.38054727,-0.036848859,-0.92402702,-0.93968127,-0.28682639,-0.18635917,-0.72021652,-0.36278005,-0.59133646,-0.67630959,-0.59836376,-0.42961163,-0.7067748,-0.65155224,-0.27558857,-0.25440217,-0.2891557,0.92285888,-0.49126059,-0.56546541,-0.66250427,-0.613148,-0.78931372,0.032146263,-0.31444055,-0.93747328,0.14923469,0.39885085,-0.69138775,0.60241263,0.64080323,-0.76765821,0.0084907834,0.61100165,-0.72784533,-0.31131682,0.63858362,-0.7176896,0.27772754,0.96660404,-0.20661951,0.15160807,0.78500178,0.072547537,0.6152309,0.45655537,0.3267327,0.82752821,0.7159402,0.69515301,-0.064745048,0.41418819,0.48765449,0.76853188,0.024414673,0.61368009,-0.78917721,-0.13332917,0.96755945,-0.21459741,-0.45487789,0.85755435,-0.24018044,-0.25339143,0.37827625,-0.89033694,-0.681618,0.62810456,0.37534192,-0.50661891,0.19660531,0.83945436,-0.87704688,-0.47968815,-0.026230536,-0.30307378,-0.31604469,-0.89903395,-0.60077321,-0.75385713,0.26602815,-0.58566651,-0.79468509,-0.15959432,0.10825402,-0.76170183,-0.63882031,0.76863407,-0.62859885,0.11859657,0.79839968,-0.55104192,-0.24271539,0.94274555,-0.28644548,0.170821,0.90701968,0.12093306,-0.4033491,0.95937874,0.21325462,-0.1847022,0.54939125,0.16853041,0.81839279,0.22791272,0.18793488,0.95537232,0.73428803,0.64371789,0.21551882,0.40713506,0.91102914,-0.065321839,-0.43987072,0.8478166,-0.2961769,-0.47775698,0.4824757,-0.73414268,-0.36235147,0.36423354,-0.85792502,-0.95538755,0.016607999,-0.29488779,-0.25247797,-0.0086345196,-0.96756412,-0.8929913,-0.095074611,0.43991743,-0.95856332,-0.17449022,-0.22518777,-0.60729154,-0.15443836,-0.77932392,-0.022387772,-0.76562926,0.64289239,0.17437229,-0.58555403,-0.79165699,0.35444502,-0.91189157,0.20693595,0.29580339,-0.74948195,0.59226444,0.29092827,-0.64859896,0.70333501,0.41755928,-0.3988986,-0.81640931,0.70522528,-0.6150365,-0.35268599,0.94536069,-0.035675305,-0.32406858,-0.90943218,-0.2867735,0.30115457,0.87092446,0.082018371,-0.48452406,0.70912752,0.087781133,0.69959462,0.29888719,0.14405165,0.94335337,0.42079676,0.77992724,0.46329642,0.27517912,0.94076149,0.1981017,0.20107213,0.9397719,0.27640328,0.028902272,0.23435613,-0.97172108,0.07943364,0.89606562,0.43675703,0.051604938,0.84362545,-0.53444647,-0.097053956,0.36320558,-0.9266403,-0.34675476,0.89549527,-0.27901497,-0.46504135,0.6558858,-0.594601,-0.36739637,0.4986781,-0.78507329,-0.38626862,0.46049869,-0.79921055,-0.35872377,0.31641748,0.87817836,-0.65394439,0.22660208,0.721809,-0.98208003,0.1851689,0.035089676,-0.43390765,0.065378238,-0.89858213,-0.29457516,-0.19142282,0.93626,-0.35906691,-0.34547282,-0.86701758,0.13988508,-0.5980449,-0.7891606,0.41756842,-0.90376296,0.094069781,0.36196027,-0.69114316,0.62554448,0.51113212,-0.76133385,0.39889187,0.15937476,-0.20489802,0.96572071,0.25108448,-0.17084711,0.95276852,0.63876838,-0.035526889,-0.76857843,0.74353467,0.53300756,-0.40380582,0.51926961,0.37870962,0.76611885,0.10154978,0.43609844,-0.89415088,-0.018308021,0.99298365,-0.11682588,-0.11852942,0.9929368,0.0052231589,-0.24485523,0.42570552,-0.87110317,-0.21473738,0.25799786,-0.94197928,-0.56762045,0.62021818,-0.54142075,-0.92195244,0.38434371,-0.047787182,-0.35116779,0.036841683,0.93558745,-0.93166193,-0.32434127,0.16373392,-0.65892445,-0.69817682,-0.2799423,-0.25288778,-0.38449443,0.88781293,-0.18023955,-0.43959448,-0.87992636,-0.093750951,-0.62731137,-0.77310491,0.48492534,-0.73096397,0.48014486,0.67364664,-0.69995326,0.23720378,0.32454519,-0.27384903,0.90536022,0.41714486,-0.15461514,0.89559161,0.95295244,-0.15668528,-0.25948288,0.86069612,0.11377994,0.4962422,0.98625683,0.15287458,-0.062664369,0.2583923,0.53402492,0.80501603,0.36194582,0.92113918,-0.14317064,0.011023545,0.50156457,0.86504997,-0.061159994,0.94264156,0.32815599,-0.070130114,0.54227523,-0.83726898,-0.17531844,0.9366843,0.30312698,-0.24530757,0.87839948,0.41016892,-0.20389374,0.71051437,-0.67349586,-0.16438864,0.47798155,0.86284994,-0.34769127,0.86338584,0.36561683,-0.38463964,0.60610259,-0.69619825,-0.49131209,0.58386391,-0.64630903,-0.45580552,0.53392232,-0.71215748,-0.84072009,0.06715341,-0.53728963,-0.92204274,-0.082946476,-0.37809664,-0.77793503,-0.22947904,0.58494142,-0.78797453,-0.44817606,-0.42217811,-0.3434287,-0.75670716,0.55628321,0.1184401,-0.9929553,0.0034231044,0.15748405,-0.74500597,-0.64820126,0.20675837,-0.81374852,0.54319824,0.2445547,-0.80714055,0.53732405,0.61389228,-0.58047147,-0.53496648,0.56775657,-0.53480577,0.62580769,0.95709975,-0.17260401,-0.23274003,0.71656802,0.21838329,-0.66244925,0.94041656,0.31342771,0.13183234,0.44322578,0.37408985,-0.8146212,0.41394056,0.77045038,0.48482928,0.0051207551,0.99994032,0.00965106,-0.10315274,0.9743752,-0.19988116,-0.061136875,0.5201464,0.85188615,-0.17965131,0.97074331,-0.15931993,-0.79922317,0.12125576,-0.58867594,-0.88885065,-0.30595332,-0.34108222,-0.90442368,-0.38842237,-0.17648191,-0.53583001,-0.84345545,0.038328946,-0.10788162,-0.66733606,-0.73690172,0.87133907,-0.34019557,-0.35360316,0.90953179,0.17984727,-0.37470907,0.20486852,0.12496186,0.9707798,0.71026302,0.70226026,-0.048548602,0.43707955,0.88246215,0.17384479,0.35150661,0.9351902,-0.04315543,0.12002129,0.50128304,0.85691902,0.12364995,0.73509474,0.66659314,-0.13553126,0.97035084,0.20012628,-0.13602093,0.64463357,0.75229374,-0.26565527,0.95889861,-0.099703229,-0.37199929,0.92033036,0.12086587,-0.31061335,0.61274816,-0.72667671,-0.38539767,0.67108227,-0.63333816,-0.67373472,0.6901091,0.26425547,-0.42648056,0.089184781,-0.90008911,-0.47792706,0.070168099,-0.87559246,-0.7307811,-0.0067528199,0.68257849,-0.97147734,-0.19596669,0.13352463,-0.39388391,-0.27544648,-0.87691773,-0.45533664,-0.40648147,-0.79211196,-0.30865658,-0.94676746,0.0914467,0.20163926,-0.91580354,-0.3473406,0.18201611,-0.8230254,0.53805142,0.31716402,-0.83881795,0.44248325,0.2150915,-0.3670712,0.90498308,0.54469406,-0.4200446,0.72585874,0.76847192,-0.096785495,0.63252152,0.82246645,0.30392371,0.4808111,0.78007787,0.51046734,0.36180328,0.6827131,0.72294743,-0.10606523,-0.16517449,0.8404555,-0.51609296,-0.27223955,0.70790455,0.65173366,-0.35926869,0.56546589,-0.74241116,-0.61281931,0.63647167,0.4683549,-0.59571979,0.59809122,0.5361015,-0.43678485,0.43019156,-0.79003431,-0.71797264,0.67100322,0.18512148,-0.69959542,0.40851441,-0.58624416,-0.41209272,0.13689827,-0.90079879,-0.89960849,0.26864934,-0.34428491,-0.40355074,-0.099636875,0.90951597,-0.66810067,-0.600223,-0.43974293,-0.44798474,-0.65573233,-0.60772097,-0.36830874,-0.74426759,0.55714847,-0.22125615,-0.71878067,-0.65909033,-0.27990203,-0.95402465,-0.10719993,-0.051343628,-0.46857939,0.88192811,0.29487144,-0.94966136,0.10580238,0.46029635,-0.78124961,0.4216353,0.81674323,0.041844156,-0.57548203,0.61416587,0.13808578,-0.77700232,0.84580618,0.40569248,0.346447,0.43026678,0.4335449,0.79177605,0.29951756,0.35126568,-0.88707478,0.55970583,0.77242157,-0.30015713,0.55723739,0.8301051,-0.020298154,0.49917146,0.76616832,-0.40473937,0.48358984,0.76139314,0.43176539,0.18596908,0.40753895,-0.89405118,0.36123075,0.9193488,-0.15591703,0.085189518,0.5298391,0.84380879,0.10563153,0.99079554,-0.084653259,-0.14672005,0.70943542,0.6893291,-0.26042348,0.72975499,-0.6321687,-0.39091107,0.91982197,0.033407802,-0.57006259,0.69234423,-0.44236649,-0.54657841,0.48183803,-0.68489719,-0.75204957,0.64975119,-0.11065639,-0.98557021,0.092902798,0.14149359,-0.69196963,-0.22279497,-0.68668802,-0.39866861,-0.42113028,0.8146856,-0.43728733,-0.87561246,-0.20514047,-0.38839838,-0.91195731,-0.13221411,-0.3563811,-0.86636234,0.3498697,0.075998838,-0.7139689,-0.69604065,0.25258545,-0.45054075,-0.85627894,0.6186622,-0.74206768,-0.25805548,0.70230421,-0.70792662,0.074891281,0.75715237,-0.52032461,-0.39494631,0.48716668,-0.24873656,0.83713724,0.89530888,-0.29283475,-0.33566324,0.94729651,-0.065406457,-0.31361012,0.013262682,-0.98973402,-0.14230488,0.76246586,0.36426618,-0.53474851,0.69257265,0.4668747,0.54988284,0.33824588,0.30730229,-0.88946896,0.15391579,0.95832019,-0.24069138,-0.11133768,0.78338846,-0.6114789,-0.1386921,0.83342842,-0.53494071,-0.43937727,0.8786576,0.18683801,-0.43438158,0.72100771,-0.53987084,-0.89296333,0.42768492,-0.1403642,-0.1198876,0.04899622,0.9915777,-0.44300555,-0.62007367,0.64749882,-0.055423829,-0.578051,-0.81411623,0.0097225195,-0.9345664,0.3556559,0.09461975,-0.94727361,0.30613693,0.054408889,-0.26875284,0.96167125,0.23387903,-0.77339865,0.58919872,0.57640934,-0.51424458,-0.63506282,0.71913247,-0.25650467,0.64579707,0.37567555,-0.094454719,0.92192526,0.70527746,0.64227436,0.30011224,0.68769986,0.71384385,-0.13227195,0.40572718,0.87610634,0.26042874,0.17654755,0.38152742,0.90734105,0.051987521,0.99230111,0.11240913,-0.13505438,0.87237227,0.46981586,-0.42395272,0.37409214,-0.82481462,-0.4781887,0.40805761,-0.77770467,-0.8418665,0.49479362,0.2154996,-0.36231962,0.19120332,-0.91223121,-0.51782467,0.15704533,-0.8409485,-0.67005332,0.070644398,-0.73894379,-0.92808435,0.077994215,0.36411033,-0.90073039,0.020800379,-0.43388029,-0.53358746,-0.28395742,-0.79665087,-0.55080032,-0.34514565,0.75992992,-0.41865816,-0.54268096,-0.72816394,-0.57712333,-0.79794268,0.17382788,-0.14813878,-0.32435686,0.9342631,0.23124854,-0.86670393,0.44198236,0.39532628,-0.21939872,0.89195366,0.62988146,0.26123297,0.73144151,0.18816043,0.11431065,0.97546334,0.71909465,0.47104498,-0.51090068,0.78873047,0.61346497,0.039559899,0.14905233,0.11610582,-0.98198923,0.59566723,0.71765569,0.36076428,0.37135309,0.84813433,0.3778426,-0.085110163,0.98703083,-0.13611172,-0.16182764,0.77198665,-0.61469377,-0.38212447,0.88294964,0.27272849,-0.33006914,0.41030444,-0.85012036,-0.5526279,0.33298258,0.76401898,-0.55961204,0.2809009,-0.77969805,-0.40168136,0.16869331,-0.90010813,-0.5636416,0.032186473,0.82539213,-0.44518698,-0.084195498,-0.89147051,-0.90649845,-0.36037646,-0.21997582,-0.65839743,-0.62663073,-0.41694933,-0.082697977,-0.17825474,-0.98050308,-0.21001007,-0.80632746,0.55293019,-0.14695817,-0.58018914,-0.80111413,0.24783111,-0.93973821,0.23552461,0.42860373,-0.62995319,0.64765564,0.10715817,-0.067674449,-0.99193613,0.40095458,-0.21995302,0.8893009,0.060636644,-0.030507142,0.9976936,0.9610524,-0.073680871,-0.2663633,0.26516539,0.12156414,0.956509,0.32480541,0.54382579,0.77379258,0.49401189,0.86903449,-0.027042783,0.16336486,0.47682371,-0.86368459,0.21158565,0.91297234,0.34887393,0.08505405,0.87309865,-0.48006724,0.052008556,0.96932378,0.2402218,-0.031703958,0.94403912,-0.32830625,-0.082981441,0.63418121,-0.76871859,-0.19660682,0.94830393,-0.24912932,-0.20714638,0.90534115,0.3707395,-0.16597598,0.23252796,-0.95832287,-0.6663301,0.74492169,-0.033103889,-0.41362926,0.36010099,0.83620459,-0.19773225,0.16974632,-0.96544712,-0.62215488,0.44229318,0.64598766,-0.69718538,0.043455805,-0.7155726,-0.94170501,-0.0035042773,-0.33642144,-0.65381741,-0.056661364,0.75452786,-0.57722707,-0.65523542,0.48731453,-0.17100945,-0.40265108,-0.89923738,-0.19573801,-0.52357839,0.82918773,-0.10036278,-0.68935982,-0.71743317,0.12380536,-0.82932317,-0.54488101,0.32625545,-0.92366484,0.20099913,0.42355583,-0.8823807,0.20495062,0.47609227,-0.85680057,0.19806297,0.53988908,-0.77540209,-0.3275231,0.27875927,-0.12327718,-0.95241588,0.94556783,-0.057775277,-0.32025537,0.13517085,0.0059240337,-0.9908046,0.95004906,0.050479239,-0.30799129,0.81136601,0.40296082,-0.42344749,0.37151578,0.21370258,0.90349722,0.72120841,0.50008617,0.47934565,0.81423818,0.58048987,0.0069060739,0.69355016,0.52341796,0.49499678,0.44389139,0.88596487,0.1342635,0.33985426,0.78258496,0.52159358,0.1693897,0.52135586,0.8363583,0.16971992,0.96213292,-0.21329648,0.063623838,0.8199979,-0.56881936,0.01367536,0.60672147,-0.79479686,-0.22193735,0.89376024,-0.38979026,-0.30165312,0.8418519,-0.44753857,-0.77208435,0.4829966,0.41303757,-0.89231182,-0.1131681,0.43700412,-0.81894518,-0.54641488,0.17538408,0.062045409,-0.93320923,-0.3539363,0.0098939379,-0.040591075,-0.99912686,0.51666793,-0.407822,0.75281835,0.60128796,-0.45270128,-0.65841806,0.76804737,-0.50800945,0.38990978,0.87617723,-0.48172949,-0.015816211,0.7596893,0.13778476,0.63552147,0.47027849,0.38561945,-0.79381093,0.68046875,0.57444999,0.45493899,0.41656373,0.55500446,0.72003104,0.21038312,0.60054377,-0.77141825,0.2399667,0.68624487,0.6866469,0.079245358,0.31042076,-0.94729041,-0.1927158,0.94743962,-0.25537968,-0.23581456,0.72293138,-0.64943184,-0.39513376,0.80911008,0.43498298,-0.49336412,0.86895639,0.03881554,-0.49195556,0.78910029,0.3678321,-0.67232042,0.7378202,-0.060055016,-0.54539139,0.4833544,0.68477497,-0.43522364,0.30274173,-0.84789612,-0.86510935,0.449871,-0.22181498,-0.7663986,0.10406599,0.63387969,-0.14037212,-0.8705303,-0.47167009,0.076088799,-0.90716598,0.41383617,0.40838525,-0.86862658,-0.28055188,0.41063219,-0.71227855,-0.56924553,0.51072511,-0.75161774,0.41740944,0.58234022,-0.80759438,0.093119191,0.64915185,-0.65901224,0.37987464,0.70227261,-0.70796004,0.074871634,0.68344063,-0.63420246,-0.36151921,0.62698354,-0.4926964,0.60344171,0.8207122,-0.56270367,0.098975034,0.67186639,-0.1561794,0.72401903,0.84434975,-0.071507311,-0.53099925,0.98129301,-0.031615735,0.18990651,0.52463593,0.34593474,0.77787293,0.55589098,0.386645,0.73586062,0.040582857,0.68592326,-0.72654133,-0.27940296,0.57241845,0.77088982,-0.46452711,0.49018002,-0.7375216,-0.58527725,0.50452235,-0.63475013,-0.95515931,0.18624835,0.2301787,-0.82422998,0.068305656,0.56212033,-0.98828628,0.052159154,0.1434212,-0.69680572,-0.042757161,-0.71598437,-0.89128256,-0.29900979,-0.34089374,-0.28010128,-0.69063768,-0.66675548,-0.12878271,-0.99149945,-0.018543124,0.11039021,-0.35076911,-0.92993281,0.7277064,-0.63399654,-0.26170934,0.48773415,-0.21476937,-0.84616164,0.34490599,0.1098322,0.93218922,0.69243758,0.70897477,-0.13373475,0.41282634,0.50626352,0.75714706,0.4836041,0.87014583,0.094727527,0.35330717,0.93534511,0.017423213,0.11174802,0.99156248,0.06569804,-0.41537006,0.80624643,-0.42122963,-0.54019511,0.73631113,-0.40747413,-0.93664622,0.29866434,0.1830122,-0.39367319,0.030163988,0.91875544,-0.81068594,-0.083743437,-0.57946126,-0.40129789,-0.15653132,-0.90247324,-0.71685657,-0.65296534,-0.24444413,-0.59801205,-0.57620858,-0.55710435,-0.65627788,-0.7495905,0.086101219,-0.26772125,-0.59064555,-0.76122478,-0.20242894,-0.9619135,0.18369794,0.35983328,-0.67786662,-0.64110597,0.19858283,-0.33755299,-0.9201211,0.43768997,-0.67920439,-0.58915947,0.55948104,-0.54518293,-0.62430484,0.16366627,-0.051306293,-0.9851807,0.89263262,0.26306368,0.36606625,0.30467517,0.64803582,-0.69801334,0.28633668,0.95712907,0.0437635,0.27809802,0.95096816,0.13535526,0.22298041,0.9635556,0.14778479,-0.49375942,0.79557115,-0.35109567,-0.1816482,0.25986288,-0.94840667,-0.40576284,0.53322218,-0.74231437,-0.58389316,0.75007002,0.31058614,-0.57917438,0.73660268,0.34924709,-0.40821025,0.13603822,-0.90269485,-0.91695926,-0.32138584,0.23642517,0.079958475,-0.79809837,-0.59719815,0.23996455,-0.92378588,0.29839013,0.25152295,-0.49354383,-0.83255672,0.47701367,-0.82575319,0.30098112,0.83561918,-0.41525817,-0.35958482,0.91770336,-0.10671705,0.38266436,0.74762182,0.43707889,-0.50002367,0.56964449,0.53920245,0.62029499,0.5500424,0.82845933,0.10539681,0.39389371,0.84098239,0.37093985,0.1769581,0.9831757,0.045292131,0.11883795,0.99252499,-0.027779152,0.051120033,0.43178311,-0.90052767,-0.064575638,0.95839671,0.27803908,-0.05647638,0.59280631,0.80336237,-0.12931955,0.75615764,0.64148428,-0.11000065,0.53088246,0.84027595,-0.11668704,0.49473578,0.86117399,-0.34586593,0.78467491,0.51445315,-0.20093088,0.30701615,0.93025151,-0.26694859,0.28985223,-0.91908875,-0.12449359,0.10066716,-0.98710054,-0.71907372,0.32207064,-0.615795,-0.36920213,-0.007490508,-0.92931893,-0.65967322,-0.023743809,-0.75117739,-0.5308183,-0.1322306,-0.83710632,-0.73247762,-0.53614661,-0.41955136,-0.55296286,-0.80298768,0.22235751,-0.24530742,-0.81466376,0.52549712,0.29642941,-0.67618574,0.67446457,0.52797261,-0.55797779,-0.6402388,0.80562087,-0.51252543,0.29714086,0.73467306,-0.37112274,0.56791145,0.877837,-0.42435956,-0.22208369,0.63548146,-0.17900013,0.75108073,0.42388419,0.095383024,0.9006799,0.9515712,0.23736404,-0.19537288,0.87842691,0.34714951,0.32841039,0.3105908,0.92863975,0.20288314,-0.02248797,0.78247222,0.62227929,-0.022469935,0.515511,0.8565883,-0.30707431,0.79239094,-0.5270882,-0.2474748,0.59796656,0.76235964,-0.4502224,0.53174199,0.71732158,-0.6065727,0.45575397,-0.65142757,-0.89885899,-0.43387112,0.061711902,-0.63927615,-0.76887582,0.012489074,-0.37955412,-0.62322287,0.68376306,-0.42034514,-0.79159841,-0.44348836,-0.26548412,-0.63861312,-0.72228212,-0.26399858,-0.91122074,0.31619854,-0.067345418,-0.65806492,0.74994344,0.17864143,-0.71274277,-0.67829564,0.30884175,-0.94103007,-0.13812739,0.89823933,-0.41790931,-0.13608052,0.83807188,-0.14056305,0.52714092,0.63382401,-0.057852263,0.77131073,0.91672113,0.16133707,0.36550337,0.94393319,0.19440386,0.26682818,0.4526809,0.13690855,-0.88109934,0.39954565,0.29269077,-0.86873206,0.78745963,0.61610159,-0.018059991,0.48359761,0.87389954,0.049324844,0.20364976,0.55927425,0.80357892,0.1152426,0.99313246,-0.020175887,0.037338571,0.99070042,-0.1308377,-0.023046072,0.41057378,0.9115361,-0.081025108,0.98326801,-0.16315314,-0.31821834,0.94646236,0.054277859,-0.27767723,0.8139094,-0.51033992,-0.36780707,0.74105378,-0.56174484,-0.35433,0.63293826,-0.68835994,-0.53800456,0.83202244,-0.13523962,-0.72706217,0.63631956,0.2578333,-0.80369987,0.54347247,0.24228948,-0.48295204,0.16942026,-0.85910075,-0.81540627,0.27336451,0.5102788,-0.99796573,0.00022326295,0.06375231,-0.89066433,-0.33752736,-0.30461834,-0.34240621,-0.30104276,-0.89001755,-0.48216746,-0.59943006,-0.63890386,-0.54501231,-0.77052139,-0.33054255,-0.1560481,-0.88870598,0.43110401,0.041721414,-0.5572959,-0.8292651,0.19460251,-0.77083146,-0.60658777,0.10960057,-0.12219551,0.98643599,0.53556889,-0.25472778,-0.8051582,0.94784007,-0.076364508,-0.3094635,0.89048143,0.4439183,-0.099896785,0.16151911,0.63380441,-0.75644137,0.097633502,0.90803005,0.40736855,-0.028915515,0.9969031,-0.073130709,-0.034172168,0.49884553,0.86601698,-0.038505013,0.34494402,-0.93783313,-0.31504195,0.82627971,-0.46691585,-0.35482639,0.91279038,0.20226702,-0.13871136,0.23978148,0.96086628,-0.73690949,0.42110594,0.52880449,-0.6407455,0.13458124,-0.75586579,-0.5194346,-0.06828491,0.85177747,-0.38369236,-0.10266879,0.91773596,-0.16461637,-0.16160712,-0.97302857,-0.21832352,-0.45392477,0.86387912,-0.31516618,-0.70804598,-0.63193447,0.011341492,-0.9114589,-0.41123477,0.11340244,-0.83107374,-0.54447803,0.18569153,-0.90575942,-0.38094426,0.050539688,-0.24636808,0.96785769,0.73511572,-0.38296846,-0.55941044,0.4352741,-0.22170292,0.87257336,0.90252595,-0.41865424,0.10087385,0.57121695,-0.14067567,-0.80865416,0.98580566,0.088838196,0.14246047,0.46931361,0.050966113,0.88155952,0.92845571,0.13292427,0.34684453,0.40809021,0.076504008,-0.90973046,0.63951755,0.51685524,0.56910277,0.49009629,0.87165572,-0.0046828849,0.39308613,0.84925565,-0.35248851,0.37180672,0.82137822,0.43254778,0.34244377,0.92950465,0.13694297,0.14795615,0.81821478,0.55554797,-0.21179325,0.57682587,-0.78893316,-0.45470414,0.82314267,0.34011805,-0.27561483,0.23687789,-0.9316251,-0.78300841,0.61295381,-0.10576128,-0.53205538,-0.053163722,-0.84503887,-0.51146206,-0.061624881,-0.85709331,-0.11207782,-0.024452289,0.99339853,-0.46771984,-0.22313776,-0.85524715,-0.51443854,-0.39599181,-0.76062046,-0.43429021,-0.42044178,-0.79663086,-0.53439713,-0.64718253,0.54366763,-0.47567096,-0.77545503,-0.41521879,-0.14411613,-0.83126999,0.53686195,0.12907594,-0.99102944,-0.034641791,0.090135159,-0.60410052,0.7917943,0.15642945,-0.97488016,0.15855127,0.20468544,-0.97376689,-0.099407813,0.22937952,-0.66276019,-0.71283516,0.45658796,-0.86985588,-0.18675704,0.4239519,-0.68935655,0.58741156,0.089882332,-0.11901738,0.98881547,0.49233276,-0.48728023,0.72122564,0.72665768,-0.58759646,-0.35594806,0.56181029,-0.28884614,0.77520133,0.66390726,0.186678,-0.72413982,0.65158089,0.59655422,-0.46857807,0.3455625,0.57493811,0.74164192,0.41042014,0.79544141,0.44590163,0.31768798,0.92828044,0.19331264,0.25533869,0.95029405,-0.17816669,-0.073468128,0.98223766,0.17266039,-0.12709581,0.61266925,-0.78005323,-0.20465339,0.94332462,-0.26125784,-0.094573761,0.1561807,0.98319042,-0.65238754,0.49366166,0.57505536,-0.98741679,0.15621946,0.02456764,-0.75439746,0.087216503,-0.65059799,-0.53599624,-0.43923957,-0.72095536,-0.54959653,-0.4564379,0.69972001,-0.5513209,-0.83369906,-0.031482554,-0.41456808,-0.72568653,0.54910142,-0.46151314,-0.88507013,-0.060468955,-0.26163264,-0.89644031,0.3576914,-0.055972671,-0.33536021,-0.94042575,0.084460841,-0.95835304,-0.27281094,0.16512282,-0.61380517,0.7719959,0.35013479,-0.79716956,0.49186006,0.13815071,-0.26702843,-0.95373487,0.60632654,-0.76259873,0.22541362,0.69749047,-0.54657238,0.46342817,0.96200844,-0.21316416,0.17058959,0.95897723,0.27065565,-0.084310037,0.47959918,0.41162061,-0.77495361,0.17699876,0.27577892,0.94478433,0.20311854,0.44463852,0.87237575,0.36932127,0.89850595,0.23725272,0.13580804,0.94151549,0.30839061,0.080213108,0.85795457,0.50742469,-0.1243663,0.77326211,0.62177065,-0.30074587,0.79368269,-0.5287908,-0.59329049,0.62386028,0.50872857,-0.77939541,0.60643544,0.15741303,-0.55257508,0.42913664,0.7144946,-0.65538245,0.47761914,0.58511008,-0.97971438,0.20039527,-0.0012131531,-0.46398095,-0.18852805,0.86555118,-0.75789856,-0.56315665,0.32930892,-0.17252084,-0.22793494,-0.95827044,-0.34338275,-0.75774788,0.55489317,-0.3509947,-0.79451644,-0.49552634,0.14997603,-0.75479803,-0.63858212,0.27049023,-0.96055862,-0.064514955,0.16665324,-0.57250987,0.80278213,0.27897364,-0.95772193,-0.070302379,0.2445419,-0.40083858,0.88290865,0.72312763,-0.61785707,-0.30877026,-0.28672224,-0.80205672,0.52392306,0.7389252,-0.65097977,0.1738243,0.88345509,0.044651943,-0.46638322,0.55930684,0.11198065,0.8213624,0.8807738,0.39206573,-0.26555975,-0.072609094,0.3179864,-0.94531083,-0.28130183,0.93942243,-0.19584377,-0.30162669,0.79058933,-0.53290697,-0.2953446,0.72106371,-0.62676845,-0.33449468,0.7071194,-0.62297309,-0.87788983,-0.14574216,-0.45614545,-0.84915494,-0.42997464,-0.30668828,-0.79991853,-0.55632173,0.22502549,-0.53814587,-0.79838754,-0.27014137,-0.47764147,-0.77891509,-0.40638641,-0.38842929,-0.9214054,0.011609096,-0.18201923,-0.78895657,0.58687011,-0.13559136,-0.99074805,0.0057696256,0.082831863,-0.9885191,0.12636798,0.088617119,-0.91426533,0.39530484,0.13273252,-0.82355629,0.55148627,0.30837426,-0.66554332,0.67967449,0.2379571,-0.45349973,-0.85890303,0.41494285,-0.48493327,0.76984554,0.24375845,-0.26764158,-0.93217477,0.66178406,-0.58917352,-0.46359079,0.88231186,0.036017053,-0.46928515,0.76110022,0.094935931,-0.64164914,0.25573076,0.054085568,0.96523392,0.94375547,0.32775392,-0.043623098,0.69849281,0.27050527,-0.66252147,0.66708153,0.35952137,0.65249262,0.85897242,0.51201695,0.0022419428,0.81349425,0.58136794,-0.015441019,0.062916615,0.14652743,0.98720373,-0.11861745,0.79785835,-0.59106003,-0.16977062,0.85823472,0.48436671,-0.32072396,0.73892952,-0.59255321,-0.57849964,0.74367947,-0.3350806,-0.63556923,0.59267172,0.49476457,-0.87437522,0.42325828,0.2373192,-0.53358551,0.029553017,-0.84522963,-0.82731108,-0.12234524,0.54825907,-0.68809289,-0.13727748,0.71251882,-0.7910338,-0.5998591,-0.12014401,-0.32072695,-0.72486636,-0.60967449,0.12531755,-0.71828862,-0.68436611,0.622978,-0.75695488,0.19727574,0.31007062,-0.24275678,0.91919821,0.97436171,-0.22190305,0.037125405,0.80991979,0.46652338,-0.3555079,0.85549524,0.49614366,-0.14822068,0.79969581,0.57054389,-0.18699272,0.53999108,0.46976282,0.6983785,0.21608724,0.96133318,0.17071852,0.058787707,0.44911343,0.89153863,-0.1370566,0.98034588,-0.14190648,-0.4621784,0.52006481,-0.7182783,-0.05269452,0.054235212,-0.99713682,-0.19094614,0.12597715,-0.97348309,-0.89941414,0.36248954,0.24424482,-0.78769266,0.19309876,-0.58502405,-0.86030456,0.19571645,-0.47071343,-0.38563751,-0.081217988,0.91906874,-0.31849932,-0.37562501,-0.87032409,-0.35274125,-0.49830995,-0.79199798,-0.40676108,-0.67557954,0.61492902,-0.45863039,-0.78313484,-0.41994998,-0.44848079,-0.88134778,-0.14863066,-0.21364274,-0.95968888,-0.18263086,-0.0064891442,-0.30886362,0.9510842,0.15816322,-0.98055328,0.11618807,0.21048969,-0.90678578,0.3652857,0.76301158,-0.43681765,-0.47644902,0.87023204,-0.45000494,-0.20047879,0.53448482,-0.16911109,0.8280866,0.74057802,-0.22982889,-0.63144507,0.9651732,-0.26107121,0.016808327,0.46560952,-0.022698288,0.88469914,0.84698129,0.21839699,0.48469109,0.65397294,0.6392728,-0.40453637,0.13631884,0.16292907,0.97717516,0.49859943,0.77032477,0.39749006,0.45693855,0.88129164,-0.12054961,0.057052302,0.27058136,0.96100508,0.11192609,0.62469492,-0.7728058,0.074019835,0.83891914,-0.53919916,-0.067024881,0.97379882,0.21730975,-0.03629185,0.17742432,0.98346505,-0.23514306,0.97176176,-0.01966791,-0.30649632,0.95185726,-0.0052692227,-0.38133085,0.70925643,-0.59290986,-0.68017881,0.70480146,0.20152341,-0.58566147,0.60149279,0.54332962,-0.48114106,0.34569905,-0.80560254,-0.90657843,0.29952488,-0.29732205,-0.5545769,0.0042247605,-0.83212176,-0.39945338,-0.12235259,-0.90855206,-0.41946992,-0.5784237,-0.69962205,-0.17973661,-0.33216945,0.92593639,-0.31276981,-0.66537798,-0.67782534,-0.013945028,-0.99736596,-0.071180637,0.078180321,-0.66301683,-0.74451093,0.54905112,-0.83560314,-0.017614107,0.40057657,-0.51589257,0.75722735,0.96276388,-0.23486604,-0.13387927,0.65068639,-0.1162082,0.75040181,0.80432985,0.13226825,0.5792742,0.6418878,0.1107717,0.75875536,0.3397409,0.083141909,-0.93683699,0.71352559,0.59246793,0.3739826,0.62414667,0.65453039,0.42665081,0.50704015,0.75743162,0.41134856,0.48007642,0.8655619,0.14258059,0.44560125,0.84962127,-0.28210499,0.20668016,0.41822759,-0.88451625,0.33407057,0.91856175,0.21128455,0.092455939,0.77698163,-0.62269691,-0.044864636,0.1780392,-0.98300011,-0.22593164,0.88048549,-0.41677356,-0.37274145,0.88019268,0.2938106,-0.44062422,0.59620153,-0.67111402,-0.28916756,0.35293506,-0.8898421,-0.38168684,0.45731171,-0.8032317,-0.65132364,0.63594541,0.41394559,-0.49382897,0.37863579,-0.78279492,-0.95782189,0.28495058,-0.037153721,-0.91527843,-0.044222906,-0.40038698,-0.77074874,-0.095915647,-0.62987822,-0.08257584,-0.020195664,-0.99638013,-0.58760244,-0.60312851,-0.5394065,-0.38183107,-0.42134627,-0.82260097,-0.48799397,-0.80085836,0.34711347,-0.25716471,-0.53150408,-0.80707479,0.04966008,-0.71510933,-0.69724638,0.33303719,-0.85096335,-0.40613743,0.41248904,-0.90735201,-0.081025426,0.013360394,-0.012375445,-0.99983416,0.68295244,-0.40882035,-0.60534444,0.79242004,-0.39373887,-0.46587572,0.17902621,-0.074262365,0.98103757,0.90042673,-0.25197898,0.35459597,0.88993984,0.21763107,0.40080393,0.4412711,0.7990417,0.40842647,0.27335758,0.5810441,0.76659206,0.33400649,0.90936144,-0.24799481,0.13008943,0.74240874,0.65719556,0.088425116,0.67524547,-0.73227355,0.12494403,0.99050044,0.057426986,0.039661524,0.64388689,0.76409203,0.0078273087,0.18444539,-0.98281159,-0.026222636,0.9193738,-0.39251011,-0.26793864,0.84564665,-0.4616174,-0.19626089,0.59179287,0.78183302,-0.31456247,0.91041871,-0.26867866,-0.12389925,0.14593337,-0.98150518,-0.24794963,0.19527781,-0.94888754,-0.23211766,0.17554063,-0.95671672,-0.15684858,0.053034699,-0.98619767,-0.48003004,0.058204889,0.875319,-0.66918228,0.065709696,-0.74018735,-0.8640999,-0.16799989,-0.47445485,-0.71112144,-0.17507738,-0.68092159,-0.54697012,-0.25363306,0.79780571,-0.56934793,-0.28898569,-0.76962991,-0.83978734,-0.51823361,-0.16183677,-0.5132175,-0.64688754,0.56404282,-0.49510768,-0.62974848,-0.59856932,-0.44737417,-0.89005402,0.087522581,-0.26157163,-0.68477409,-0.68019463,-0.21160999,-0.71473419,-0.66661552,0.15295884,-0.70684782,-0.69062997,0.17732036,-0.72643802,0.66396182,0.30617998,-0.86790673,0.39114156,0.34441569,-0.93868812,-0.015570649,0.34054865,-0.82348272,-0.45376516,0.40020436,-0.88250546,-0.24702344,0.37295153,-0.66438094,0.64769215,0.76769219,-0.54882292,0.33082035,0.88947974,0.20812072,-0.40683112,0.48060734,0.47989366,0.73397456,0.40217572,0.53439871,0.7434196,0.044377071,0.10714892,0.99325213,0.36590788,0.89048308,0.27046499,0.13026942,0.4266657,0.89497836,0.072520085,0.24955749,-0.96564067,0.12099067,0.89707361,0.42499435,0.052188431,0.95107587,0.30451775,-0.28261636,0.9191244,0.2744783,-0.32380846,0.59198587,0.73803849,-0.26251945,0.32825534,0.90737642,-0.51424527,0.56291003,-0.64705804,-0.72743589,0.66895261,-0.15277249,-0.48571662,0.1829287,-0.85476105,-0.67690382,0.18060068,0.71357173,-0.25524703,-0.021023719,0.96664728,-0.90524456,-0.11697191,0.40847258,-0.90116204,-0.12268069,0.41576005,-0.56824712,-0.20859835,-0.7959786,-0.76401348,-0.45174653,-0.46066091,-0.58553774,-0.53888571,0.60559702,-0.47812279,-0.83091864,-0.28455722,-0.12203524,-0.67569269,-0.72701223,-0.017953584,-0.89823191,0.43915499,0.021371751,-0.46894216,-0.88297027,0.043259985,-0.74960094,-0.66047484,0.026536027,-0.2567038,-0.96612577,0.13752971,-0.9566953,-0.25655346,0.12294554,-0.85232723,0.50835292,0.53735313,-0.6385219,-0.55094591,0.57415288,-0.6055681,0.55103152,0.27659986,-0.21465637,-0.93670442,0.30203799,-0.13130941,0.94420914,0.71489693,-0.3010546,-0.63110103,0.79311824,0.58056734,0.18413316,0.59729796,0.5505601,-0.58319698,0.52504102,0.84593254,-0.093434834,0.17855886,0.95575297,-0.23377981,-0.091328864,0.97469337,-0.20403891,-0.44354561,0.87101111,-0.21120355,-0.38719939,0.71177277,-0.58605132,-0.43432803,0.50732151,-0.74430104,-0.47916817,0.45709662,0.74930671,-0.96935487,0.090496219,-0.2283891,-0.97572783,-0.14486589,-0.16422262,-0.37430254,-0.34734559,0.85979571,-0.7028368,-0.6832907,-0.19782377,-0.34403426,-0.50455785,0.79187234,-0.11188425,-0.2168309,0.9697764,-0.32536311,-0.69711344,0.63888317,-0.24271437,-0.73389536,-0.6344189,-0.2969715,-0.9465156,0.12615924,-0.22632335,-0.80498491,-0.54843143,0.51434464,-0.57965716,-0.63201834,0.48365123,-0.51274802,0.70934544,0.75810795,-0.61286027,-0.22287803,0.77915258,-0.62375718,-0.062034138,0.90503181,0.18492801,-0.38303923,0.73516898,0.31560353,-0.59993415,0.56530693,0.28215588,-0.77512331,0.12632811,0.13327632,0.98299473,0.4674798,0.54632855,0.6949732,0.42001258,0.70233316,0.5747326,0.29719038,0.90930263,-0.29128441,0.043882302,0.96722454,-0.25010203,-0.036147124,0.92365743,-0.38151059,-0.44322423,0.88862045,-0.11792363,-0.39057167,0.45602225,-0.79968586,-0.74788416,0.64618516,-0.15203299,-0.70922756,0.54465875,-0.44759705,-0.78413165,0.38142501,0.48954317,-0.91993465,0.30592101,0.24521945,-0.50383233,-0.070074782,-0.86095441,-0.91962484,-0.15852708,0.35938743,-0.43518198,-0.8885023,-0.14553458,0.028224735,-0.80438099,0.593443,0.057789904,-0.92724886,-0.3699593,0.13456894,-0.9033481,-0.40725103,0.23765089,-0.82312377,-0.51574153,0.42081637,-0.86704657,-0.26672799,0.68751296,-0.7063651,-0.16844666,0.19511395,-0.093226687,-0.97633976,0.94448278,-0.091167067,0.31565938,0.99745638,-0.052530025,-0.048180545,0.34675207,0.031329185,-0.93743346,0.82073401,0.22930604,-0.52327281,0.81812811,0.23003519,0.52702012,0.87739548,0.3486886,0.32953517,0.71849188,0.42731393,0.54879161,0.58456966,0.70537179,-0.40091016,0.57068325,0.70667325,0.41825057,0.39625447,0.8443264,0.36068729,0.27283091,0.95783038,-0.090134601,0.20464953,0.88838619,0.41096052,0.19543362,0.97659054,0.089870018,0.1155319,0.94900092,0.29334219,-0.025488228,0.74090535,-0.67112563,-0.13961987,0.49298067,-0.85876443,-0.20999465,0.57416626,-0.79135034,-0.47388856,0.27398029,0.83687779,-0.71877338,0.2787412,-0.63692085,-0.89777321,0.29861408,0.32377907,-0.65034907,0.071368183,-0.75627552,-0.29308657,-0.13230939,0.94688673,-0.87408469,-0.43551137,-0.21518783,-0.56468615,-0.75354127,-0.33660824,-0.5983159,-0.80099279,-0.020703349,-0.38523963,-0.73906806,-0.55260187,-0.11896625,-0.30326545,-0.94545074,-0.1490681,-0.38705389,-0.90992746,0.046467968,-0.9972353,0.057986886,0.3937616,-0.80988287,0.43478907,0.52882826,-0.7409989,0.41383728,0.57860713,-0.45602372,-0.67620719,0.677541,-0.3939505,-0.62108066,0.043503099,-0.0061024557,-0.99903465,0.66102702,0.10376698,-0.74315254,0.95772281,0.19931028,0.20746668,0.95118451,0.29249717,0.098455206,0.90501911,0.360422,-0.22591236,0.82144427,0.55921315,-0.11184801,0.21747875,0.22180423,-0.95052926,0.14327383,0.16475375,-0.97587336,0.43800995,0.83397661,0.33560437,0.04205006,0.099330646,0.99416559,0.25787106,0.92006261,0.29493612,-0.074678524,0.93691803,-0.34147873,-0.20405325,0.27256572,-0.94025007,-0.59359763,0.42331567,-0.68443093,-0.39576058,0.14367155,-0.90704578,-0.84621713,0.29537785,0.44347322,-0.95069288,0.24034689,-0.19600107,-0.75148343,-0.0292302,-0.65910413,-0.69844085,-0.3520352,0.62309839,-0.5575613,-0.42838999,-0.71106077,-0.71461125,-0.6995157,-0.0029242606,-0.55839171,-0.66631491,0.49418938,-0.29474268,-0.95534099,0.021221285,-0.11905278,-0.68130701,0.72225147,-0.036582052,-0.87111328,0.48971767,0.13439192,-0.58698182,0.79836781,0.15589934,-0.66923067,-0.72651614,0.24986672,-0.94243159,-0.2222371,0.1477285,-0.54444045,0.82568813,0.30704253,-0.92761519,-0.21273212,0.37884134,-0.75966995,-0.52856485,0.42421977,-0.74499997,0.51479378,0.51140211,-0.84995259,0.1266826,0.48097711,-0.75093647,0.45249911,0.4854436,-0.74895079,0.45101799,0.68972525,-0.69922381,0.18805623,0.39776776,-0.3359568,0.85376451,0.62256559,-0.42346039,0.65809831,0.9210599,-0.3816765,0.077276872,0.84061313,-0.22683039,-0.49185113,0.53328614,0.25575357,-0.80634732,0.70761698,0.65694173,0.26020333,0.47108366,0.72494612,-0.50252691,0.36789876,0.69636921,0.61621459,0.15933999,0.54713603,0.82173775,0.18679333,0.96251514,0.19665413,0.13486272,0.95236358,0.27352451,0.013599276,0.85360198,-0.52074823,-0.15831454,0.98320253,-0.090825657,-0.38334372,0.64596798,-0.66013101,-0.31156298,0.51312798,-0.79976758,-0.35232816,0.53448369,-0.76823958,-0.35152913,0.48468807,0.80093991,-0.5830398,0.78291978,-0.21702812,-0.78968778,0.37612611,-0.4846879,-0.76007568,0.33783712,0.55511354,-0.092478257,0.038446006,0.9949722,-0.97271941,0.22946085,0.034127363,-0.89048524,-0.079194331,0.44806729,-0.88618962,-0.38010276,-0.26493368,-0.70217844,-0.71037692,-0.048063064,-0.56989639,-0.58553306,0.57651465,-0.6053897,-0.69878165,-0.38106103,-0.13550439,-0.92938218,0.34334724,0.032541648,-0.95495962,-0.29494602,0.082490355,-0.80233906,-0.59114073,0.13094586,-0.37390351,-0.91817719,0.53556628,-0.57930784,-0.61446821,0.29421755,-0.1860198,-0.93746076,0.7442051,-0.46277977,0.4816572,0.30188974,-0.15606994,0.94048113,0.38643859,-0.16585034,0.90728104,0.65190961,-0.21913812,-0.72594239,0.63825463,0.00371848,-0.76981634,0.50458902,0.26826214,0.82062497,0.76989458,0.62345465,-0.13625943,0.29950365,0.34987278,-0.88762977,0.56892981,0.81735602,-0.090818513,0.36229997,0.8462349,0.39067279,0.38846779,0.92114713,0.024098468,0.10762296,0.30846926,-0.94512645,0.30792448,0.89595994,-0.32005983,0.11741032,0.92702561,-0.35614369,0.095533005,0.95131353,0.29304609,-0.063871924,0.5513744,0.83180926,-0.52417044,0.81752824,-0.2385224,-0.11752796,0.067355392,-0.99078274,-0.96277112,0.01816904,0.26970661,-0.88465559,-0.26362811,0.3845578,-0.7147581,-0.38625468,-0.5830336,-0.4951081,-0.32545313,-0.80557323,-0.81243691,-0.53819339,0.22426356,-0.7889432,-0.52915845,-0.31234589,-0.57289427,-0.76664335,-0.289914,-0.53996788,-0.83904683,-0.066596562,-0.49165061,-0.85841847,-0.14627855,-0.36415235,-0.77689402,-0.51364262,-0.31869468,-0.72775546,0.60729374,-0.21570223,-0.56332298,0.7975837,-0.16867839,-0.61133215,-0.77318859,-0.15680413,-0.82713029,-0.53969245,-0.059744354,-0.79697131,-0.60105519,0.037857667,-0.85876329,-0.51097202,0.25159868,-0.84091354,0.47912683,0.33269503,-0.91836171,0.214303,0.546219,-0.64497831,0.53446027,0.71586478,-0.69082863,-0.10145651,0.39244515,-0.29845404,0.87000689,0.40985001,-0.26763222,0.87200686,0.62768261,-0.31356797,0.71252346,0.82875904,-0.37109903,-0.41886031,0.921312,-0.26958469,-0.2801933,0.35088993,-0.086074598,-0.93245237,0.59926693,-0.087933517,-0.79570525,0.98019779,0.04295238,0.19330647,0.89119278,0.40191792,0.21032691,0.12178396,0.74447941,0.65644427,0.040231902,0.9681556,0.24709539,-0.0046044662,0.82988491,-0.55791562,-0.033817433,0.76130803,-0.64750789,-0.058677132,0.78864166,-0.61204683,-0.11764055,0.55104447,0.82614206,-0.22057429,0.6420936,0.73420896,-0.069060823,0.17613993,-0.98193957,-0.37950973,0.33894239,-0.86086609,-0.94096485,0.12185647,0.31581031,-0.72779246,0.059416854,-0.68321868,-0.98342478,-0.0031730073,-0.18128882,-0.52972733,-0.048318895,0.84679055,-0.63571237,-0.76522552,-0.10148738,-0.22653305,-0.34844715,-0.90954239,-0.49431147,-0.83288024,0.24893108,-0.093740125,-0.44620511,0.89000775,-0.10774582,-0.97487639,-0.1949535,-0.07553267,-0.95851998,0.27483497,0.42560561,-0.80022392,0.42249443,0.47055108,-0.833755,0.28884993,0.67691607,-0.70315853,0.21760679,0.35862941,-0.36044226,0.86108439,0.84025559,-0.50019836,0.20921794,0.74414716,-0.13737182,-0.65373847,0.97249018,0.024187187,0.23168478,0.86047665,0.12738776,-0.4933075,0.8644205,0.19118297,0.46500138,0.89266571,0.26312638,0.36594048,0.48238604,0.2201565,0.84784127,0.67994084,0.50987935,0.5269758,0.66319731,0.7394018,0.1159927,0.56306436,0.68425633,0.46341322,0.57328701,0.81761743,0.053326669,0.45135092,0.65141248,0.60987222,0.26593676,0.57155201,0.77627697,0.13290555,0.72168665,0.67934122,0.017139774,0.76632479,-0.64222469,-0.074305074,0.82428533,-0.56127752,-0.11866186,0.99292304,-0.0048168604,-0.11886273,0.99161354,0.050736854,-0.23480567,0.79023568,0.56603345,-0.3270939,0.80972697,-0.48718766,-0.41754608,0.87487641,0.24545171,-0.14071352,0.20182655,0.96926041,-0.67530459,0.72687967,-0.12493865,-0.55592295,0.20482701,0.80560261,-0.30104117,0.047429441,-0.95243092,-0.30198803,-0.066602447,-0.95098231,-0.86228284,-0.42288058,-0.27864011,-0.59821957,-0.41950766,-0.68274935,-0.53684709,-0.43596345,-0.72230954,-0.74546916,-0.6351562,0.20211961,-0.076543796,-0.17546361,0.98150577,-0.31423371,-0.88607298,-0.34078124,-0.16365321,-0.49869064,-0.85119051,-0.12738106,-0.75566601,0.64245073,0.24781324,-0.58864233,0.76947307,0.67931061,-0.72754877,-0.09596813,0.50088469,-0.50826898,0.70055491,0.54518576,-0.5154441,-0.66112772,0.46130029,-0.26078854,0.84805152,0.86742821,-0.48442247,-0.11359211,0.8791322,-0.37966448,-0.28806503,0.84730302,-0.22180196,-0.48257796,0.32129717,-0.062994562,0.94488085,0.75871011,-0.084345989,0.64594483,0.53715408,-0.030426791,0.84293517,0.47940547,0.12126895,0.86917446,0.89439483,0.27323841,0.35411674,0.4142246,0.13344225,0.90033946,0.70741965,0.7054841,-0.043007368,0.57673847,0.79352744,-0.19413125,0.55577666,0.83131552,-0.0051786408,0.31084279,0.85535834,-0.41441388,0.10993122,0.78857783,-0.60502904,-0.040423169,0.9669319,-0.25181078,-0.033753218,0.34061213,-0.93959784,-0.19944742,0.69605244,-0.68973309,-0.58287686,0.78247017,0.21907761,-0.38728657,0.46035983,-0.79879781,-0.52969,0.5234957,-0.66736853,-0.53912033,0.4832623,-0.68978752,-0.57136002,0.47162546,-0.67165255,-0.80097952,0.58975638,-0.10304958,-0.48814235,0.33017109,-0.80790104,-0.38722228,0.2444924,-0.88897828,-0.72063574,0.068295274,0.68994195,-0.54449954,0.018602283,-0.83855483,-0.83451745,-0.098260563,-0.54214895,-0.066469906,-0.031326645,-0.99729654,-0.29944741,-0.21977626,-0.92845551,-0.48861961,-0.59603586,0.63717512,-0.21513121,-0.9013132,0.37596951,-0.069485603,-0.906837,0.41571434,0.050567926,-0.73955425,0.67119475,0.23014511,-0.93141909,-0.28194274,0.24708058,-0.96798468,0.044236233,0.27705301,-0.90227912,-0.33035438,0.43662543,-0.79985013,0.41182278,0.35283291,-0.1486362,-0.92380529,0.97944189,-0.1922872,-0.060985345,0.9804138,-0.17553149,-0.089316767,0.49134448,-0.081028633,0.86718797,0.83455506,-0.12902065,0.53560389,0.046490266,-0.0067410472,0.998896,0.43511935,0.012234003,0.90028967,0.94916778,0.037454544,0.31253429,0.6036275,0.091452399,-0.79200398,0.89599879,0.14724648,-0.41893274,0.9086721,0.1932168,-0.37011119,0.89835172,0.28247404,0.33641137,0.40182617,0.12995959,0.90644704,0.33724587,0.16147394,0.92746503,0.64384622,0.37040585,-0.66952338,0.31429634,0.20850524,-0.92614436,0.75173033,0.50568432,0.42330236,0.52331977,0.36974159,0.76774187,0.59527547,0.77298358,-0.21941625,0.25935423,0.8128346,0.52157003,-0.14165944,0.9592324,0.24455225,-0.25355484,0.49171646,-0.83302153,-0.29875915,0.30769109,0.90336546,-0.69384718,0.50081346,0.51745722,-0.79457336,0.33078976,-0.50914764,-0.76162224,0.30187235,0.5734149,-0.48754919,0.15046499,0.8600326,-0.97636206,-0.18074942,0.11851911,-0.94388728,-0.29101554,-0.15616259,-0.89117625,-0.4135666,0.18646061,-0.66793217,-0.47787937,-0.57052425,-0.054186319,-0.079783917,-0.99533832,-0.47157004,-0.69905681,0.53753258,-0.55164781,-0.82865728,0.09493055,-0.24655711,-0.47016722,-0.84743871,-0.22182511,-0.62073029,-0.75198904,-0.25035285,-0.88473759,-0.39314483,-0.12451806,-0.99107814,0.047532882,0.035019789,-0.80344419,0.59434927,0.34154846,-0.86354567,-0.37098993,0.36786885,-0.8950793,0.25200309,0.66482741,-0.7396272,0.10467151,0.56879134,-0.42322238,-0.70523701,0.81879225,-0.53920397,-0.19707444,0.56914025,-0.36868618,-0.73494889,0.62062166,-0.34776182,0.70277342,0.53093978,-0.10984187,0.8402605,0.56339953,-0.0070272411,0.8261547,0.48139288,0.0033964816,0.87649835,0.61194267,0.065021737,0.7882248,0.94461172,0.2801901,-0.17088654,0.84648526,0.38961628,-0.36285239,0.77461799,0.53300633,0.34039861,0.68279163,0.66186201,0.30940955,0.39505,0.50962491,0.76434152,0.41015294,0.87918098,0.2425188,0.36796606,0.88991015,0.26955685,0.17673966,0.56852112,-0.80345928,-0.084155793,0.61229259,-0.78613967,-0.28576746,0.84361949,-0.45458015,-0.34127332,0.7441419,0.5742694,-0.28524617,0.60339234,0.74468269,-0.54324956,0.76616856,-0.34331568,-0.52714528,0.70939984,0.46783514,-0.59302618,0.390634,-0.70407743,-0.52842444,0.22753293,-0.81792199,-0.80204813,0.33433863,-0.49491058,-0.31880618,0.075315365,-0.94482285,-0.94825661,0.14337792,0.28328816,-0.98892963,0.021351766,0.14684106,-0.96459005,-0.14231419,-0.22206464,-0.90015723,-0.2571263,-0.35157223,-0.51392966,-0.38951028,0.76430233,-0.023648383,-0.81985971,-0.57207587,0.030973085,-0.45207039,-0.89144435,0.093648647,-0.85423131,-0.51138909,0.18557807,-0.77708026,0.60142087,0.23802838,-0.96440141,0.11520598,0.31170028,-0.91385095,0.26022947,0.45372277,-0.65723546,0.60181159,0.40510358,-0.56746744,0.71684852,0.70333453,-0.58459046,0.40444349,0.74114582,-0.38899506,0.54716151,0.80942865,-0.40471435,-0.42547804,0.58817292,-0.11245737,0.80087824,0.84981249,-0.14669236,0.50626088,0.31828296,0.006510848,-0.9479734,0.59828477,0.08324997,0.79694716,0.94960171,0.20802734,-0.23448076,0.10647751,0.025995501,0.99397524,0.75039114,0.20564898,-0.62818917,0.37146919,0.22100784,0.90175727,0.34308531,0.33115663,0.87899246,0.55140467,0.81414559,-0.1819886,0.4239431,0.77774211,-0.4641007,0.16636513,0.43773659,-0.88357757,-0.12323624,0.79140354,-0.59874308,-0.22843294,0.87386575,-0.42915852,-0.33518953,0.90891866,-0.24802189,-0.39487181,0.91694172,0.057394569,-0.24352087,0.43142368,-0.86866057,-0.46224569,0.67075312,-0.58001653,-0.36442639,0.39213906,-0.84464215,-0.63598559,0.58307882,-0.50551104,-0.84207288,0.45171346,-0.29473415,-0.65547075,0.32137497,-0.68342976,-0.89962926,0.3680589,-0.23494647,-0.4625181,0.0047078176,-0.88659734,-0.43303089,0.0022777975,-0.9013762,-0.80856188,-0.0058526333,0.58838204,-0.71658862,-0.21425136,-0.6637749,-0.21044702,-0.19835965,-0.95726982,-0.46044924,-0.48280816,0.74490454,-0.48935154,-0.57773771,-0.65326427,-0.42436546,-0.71259883,-0.55867421,0.32653445,-0.94141997,0.084283434,0.27760135,-0.76617076,-0.57958594,0.31861687,-0.86789207,-0.38111238,0.27881628,-0.64615763,-0.71045183,0.20679852,-0.29506553,0.93282941,0.56665201,-0.69306765,0.44560378,0.25888193,-0.29996243,0.91815178,0.44718413,-0.45307472,0.77120014,0.53532273,-0.42840235,0.727943,0.99807847,-0.035011349,0.051123172,0.8704809,-0.0020319287,-0.49219801,0.1704094,0.055595652,0.98380372,0.73892154,0.28244724,0.61173403,0.82368828,0.56621343,0.03065888,0.44821841,0.66779503,0.59426431,0.20606674,0.95675139,-0.205337,0.14953502,0.97236396,-0.17929753,0.11009307,0.96271713,0.24709359,0.10619095,0.97832512,0.17777355,0.034795885,0.88252533,0.46897579,0.03226578,0.96902897,0.24483011,-0.055321471,0.55105881,-0.8326306,-0.14010041,0.98484361,-0.10224945,-0.11598026,0.55381605,-0.8245219,-0.35320386,0.88381975,-0.30677302,-0.37969522,0.924514,-0.033247753,-0.35188532,0.72791,-0.58849278,-0.45650348,0.87529065,-0.1595959,-0.4801998,0.82516059,0.29752001,-0.59496973,0.80073458,-0.069535351,-0.72521633,0.67212688,-0.14935437,-0.77786473,0.62206951,-0.089196409,-0.90965569,0.39676112,-0.12291114,-0.9350979,-0.04964053,0.35089563,-0.71789482,-0.26241599,0.64479832,-0.52130494,-0.22700011,0.82262513,-0.30788605,-0.91190356,0.27136338,-0.16144773,-0.81763202,-0.5526414,0.15588189,-0.70923789,-0.68751906,0.34502538,-0.87343005,0.34362397,0.31997428,-0.60188211,0.73167915,0.48001212,-0.87724885,0.0047762427,0.43241878,-0.6036734,-0.66977043,0.44880411,-0.49922854,0.74117861,0.6337177,-0.58761083,0.50310574,0.86833121,-0.49587247,0.010554569,0.91074048,-0.38128601,0.15865927,0.71913951,-0.20487314,0.66397693,0.85395519,-0.19577164,-0.4821141,0.54060055,-0.082426816,-0.83723167,0.33269162,-0.047832486,0.94182182,0.75087641,0.62760689,-0.20565555,-0.73398569,0.49415495,-0.46591404,0.93511105,0.089096288,-0.34297109,0.85569824,0.51250392,-0.071556006,0.56681694,0.6482729,0.50839041,0.48984195,0.8441913,-0.21770602,0.37627352,0.89857919,-0.22577351,0.22076856,0.88360782,-0.4129146,-0.094018305,0.89708863,-0.43173204,-0.027755277,0.15721353,-0.98717453,-0.38465623,0.74215258,-0.54886168,-0.58858691,0.80578235,-0.065423635,-0.51675687,0.67055634,-0.53227486,-0.43662874,0.36045677,-0.82427317,-0.63356144,0.4354089,0.63954592,-0.90501265,0.39702249,0.15272605,-0.79007152,0.2492952,-0.56003473,-0.76130253,-0.18984955,0.61998032,-0.69401565,-0.32292374,-0.64347691,-0.76111764,-0.39051357,0.51787942,-0.61999668,-0.41314527,-0.66701957,-0.67169649,-0.6014948,-0.43246714,-0.45166027,-0.68717647,-0.56902679,-0.40432547,-0.6930414,0.59683711,-0.23322425,-0.47728269,-0.84723532,-0.26270911,-0.64849395,0.7144505,-0.11480056,-0.98833297,-0.1000938,-0.053453839,-0.95117638,0.30398386,0.079164904,-0.8636343,0.49786415,0.8457229,-0.48293689,0.22699062,0.45304257,-0.13986081,0.88044954,0.94832594,0.24848554,-0.1973141,0.88189204,0.38633757,-0.2702031,0.69772247,0.7123361,0.07589886,0.6481298,0.76135684,-0.016233311,0.053277426,0.070912837,0.99605868,0.47290748,0.79383892,0.3823327,0.47136713,0.85369026,-0.22141811,0.031500727,0.41034359,0.91138677,0.025730148,0.79154142,-0.61057362,0.022524168,0.9787,-0.20405629,-0.067893395,0.99765262,-0.0089300108,-0.083858845,0.7972953,-0.59773565,-0.126498,0.83179358,-0.54047913,-0.16922194,0.84076478,-0.51427475,-0.40037499,0.81573903,-0.41745622,-0.43676229,0.82387817,-0.36119727,-0.25960156,0.47373081,-0.84153797,-0.4769394,0.7264306,0.49480035,-0.6375003,0.73851481,0.21952049,-0.68726449,0.49401111,-0.53256037,-0.58595939,0.36853656,-0.72168718,-0.99490949,0.038928449,-0.092949873,-0.48137059,-0.46702931,-0.74173174,-0.65664102,-0.7541753,0.0064944559,-0.36591811,-0.71661592,0.59377231,-0.21699541,-0.60998726,-0.76212108,-0.016745472,-0.92396659,0.38210643,0.14139583,-0.90534914,0.40043745,0.10201169,-0.4059081,0.90820275,0.43763879,-0.72403174,0.53315131,0.36026653,-0.22951029,-0.90417534,0.44407674,-0.2414925,-0.86283094,0.63434461,-0.28531918,-0.71847051,0.75752469,-0.17874556,-0.62785855,0.65872276,0.30947773,0.68578995,0.73703877,0.3517768,0.57708486,0.39287508,0.19960669,0.89766717,0.58792882,0.6980749,-0.40869442,-0.021638518,0.99713228,0.07251889,-0.27481365,0.95700993,-0.092787164,-0.1417655,0.3385763,0.93019817,-0.28657593,0.41759358,0.86225857,-0.18195718,0.2598393,-0.9483539,-0.27030643,0.32444422,0.90646036,-0.64835947,0.74093631,0.17505249,-0.79398223,0.27835923,-0.54047049,-0.57323584,0.062572952,0.81699774,-0.90770136,-0.12067398,-0.40189057,-0.77614458,-0.23323782,-0.58583249,-0.43220073,-0.19515372,-0.88040761,-0.8355652,-0.39425325,0.38261622,-0.095948938,-0.088173279,0.99147328,-0.46518983,-0.4507308,0.76186625,-0.46353043,-0.76765862,-0.44253789,-0.46391182,-0.86906553,0.17178743,-0.37047304,-0.92384658,0.096214423,-0.23537815,-0.97177916,-0.015568849,-0.10827962,-0.84886475,0.51740136,0.096237047,-0.77121327,-0.62926029,0.12442349,-0.93884131,-0.32108534,0.24426252,-0.87394433,-0.42018702,0.23783874,-0.81646882,0.52612869,0.47381775,-0.8789453,-0.054331458,0.47020293,-0.62641516,0.6217019,0.71776441,-0.68965086,0.095895445,0.71458806,-0.58380208,-0.38540763,0.83592281,-0.54684254,0.046864657,0.51752191,-0.074463338,-0.85242377,0.82881065,-0.092099065,0.55189734,-0.13732731,-0.56469947,0.81379095,0.25389748,0.051254497,0.96587217,0.92746542,0.27072317,0.25790863,0.77153733,0.46200422,0.43735826,0.83082401,0.53621338,0.14901904,0.75718746,0.61660764,0.21555085,0.66898446,0.70739903,0.22813681,0.39892304,0.83999464,0.3677899,0.3916485,0.87366523,0.28865294,0.19513049,0.62993723,0.75173345,0.079024187,0.45251898,0.88824645,0.14766234,0.94496096,-0.2919668,-0.23834478,0.87275043,-0.42602636,-0.22370034,0.64730608,-0.72866522,-0.37353468,0.86602868,-0.3323645,-0.38860651,0.8074415,-0.44387297,-0.71312396,0.7009873,-0.0084270786,-0.71720747,0.48579355,0.49961792,-0.87930206,0.45320522,-0.14639988,-0.7557739,0.090112828,-0.64860273,-0.67327449,0.073073752,-0.73577285,-0.24247567,0.024132082,-0.96985731,-0.67491555,-0.19950697,0.71041253,-0.92912757,-0.31323089,0.19649011,-0.54837541,-0.54654173,0.63291117,-0.58879826,-0.75536936,-0.28763472,-0.16305397,-0.23363674,-0.95855479,-0.24408897,-0.71608512,-0.65394394,-0.14968417,-0.55965234,-0.81509748,0.1105759,-0.98399668,0.13972657,0.20712049,-0.85907086,0.46807945,0.36956667,-0.82979244,-0.4181686,0.42544584,-0.90491893,-0.010843392,0.43359874,-0.5974197,-0.67459754,0.37143634,-0.33501839,0.86590861,0.61894814,-0.49066386,-0.61331246,0.77860388,-0.32238937,0.53836891,0.46119922,-0.087649382,-0.88295689,0.83606125,0.54704438,-0.041761602,0.77111029,0.6339399,-0.059237862,0.37994767,0.59682464,0.70671077,0.25226338,0.92567277,-0.28194524,0.016479332,0.16471286,-0.98620389,-0.0022410364,0.62637463,-0.77951896,-0.016020454,0.84629513,-0.53247338,-0.2179312,0.91986895,-0.32610903,-0.34085026,0.85444051,-0.39211288,-0.50281835,0.86019626,0.085065276,-0.83442816,0.55023508,0.031161059,-0.93166582,0.27466208,-0.23782251,-0.96604898,-0.19818275,0.16574971,-0.86650503,-0.18591804,-0.46325319,-0.30871593,-0.12135751,-0.94338053,-0.90873791,-0.37278058,0.18769669,-0.62997811,-0.62262564,-0.46418196,-0.082709872,-0.084052445,-0.99302279,-0.083898767,-0.087475621,-0.99262733,-0.39592993,-0.47220935,0.78756448,-0.42338691,-0.51281666,-0.74683505,-0.30975519,-0.37971853,-0.87170268,-0.20585818,-0.2876815,0.93534045,-0.074465828,-0.49368464,0.86644695,-0.10940364,-0.93768862,0.32980432,0.027912548,-0.21382333,0.97647349,0.30073323,-0.88227501,0.36214684,0.31691643,-0.91460144,0.25113381,0.41701951,-0.71985978,-0.55488434,0.33711547,-0.50779944,-0.79277543,0.85952832,-0.49049503,0.14361649,0.87841006,-0.14991856,-0.45378431,0.85101286,0.06005502,-0.52169963,0.65832162,0.12926825,0.74155402,0.083040503,0.037609004,-0.99583625,0.44324682,0.27879354,0.85194274,0.50364003,0.75490598,0.4200758,0.38563767,0.58256548,0.71547261,0.52646246,0.84254666,0.11380864,0.22369096,0.62647956,0.74664966,0.28274343,0.81141812,-0.51152399,0.14650147,0.85732729,0.49348478,-0.19901079,0.96415602,-0.17549322,-0.39404464,0.88436407,-0.25025789,-0.28307606,0.63188011,0.72152303,-0.35268179,0.55811075,-0.75108452,-0.51398346,0.81088037,-0.2798107,-0.29888637,0.4711489,-0.82987086,-0.37997582,0.45943026,0.80283387,-0.73993237,0.5718285,-0.35427707,-0.3869323,0.18231305,-0.90390561,-0.61031247,0.28369027,-0.73962052,-0.5260987,0.16289319,0.83467716,-0.89858048,-0.046516064,0.4363363,-0.90276997,-0.092336815,-0.42009557,-0.53756488,-0.29553743,-0.78973517,-0.37126036,-0.89389275,-0.25123994,-0.15952408,-0.7548778,-0.63616946,-0.10785655,-0.872949,0.47573838,0.32153263,-0.80652937,-0.49611203,0.39031192,-0.86589954,-0.31284917,0.607906,-0.77534775,-0.17113198,0.59927333,-0.64562561,0.47332764,0.81132542,-0.57588007,0.10056441,0.82433517,-0.5656575,0.022430372,0.78592669,-0.29049809,-0.54582973,0.8743523,-0.23388908,-0.42521048,0.44814241,-0.060958632,-0.8918814,0.96950804,-0.094809187,-0.22597649,0.83308786,0.02930542,-0.55236384,0.6604751,0.088222729,-0.74564696,0.70753394,0.22415121,0.670188,0.3144464,0.2110523,-0.92551628,0.13054016,0.13941493,-0.98159194,0.38249547,0.51026386,-0.77027788,0.48580963,0.8566488,0.17361404,0.073181262,0.15340407,-0.98545,0.36421419,0.92624599,0.097038074,0.1456372,0.66675755,0.73090641,0.1092713,0.94178266,0.31797045,0.10819631,0.98860189,-0.10468935,-0.021586164,0.99529505,0.094455304,-0.084618078,0.96377613,0.25293349,-0.09300312,0.12760962,-0.98745441,-0.54342213,0.74167744,-0.39320092,-0.45438355,0.53870218,-0.70946146,-0.57690876,0.61554419,0.53691865,-0.81714956,0.53886738,0.20466691,-0.92146274,0.35816832,0.15040571,-0.65365094,0.16139399,-0.73938652,-0.61635688,-0.52189339,-0.58968761,-0.61026129,-0.65669832,0.4430897,-0.39837202,-0.78411097,-0.47588834,-0.19325511,-0.43297212,0.88044739,-0.20304669,-0.47982038,-0.85354815,0.043119844,-0.99758598,0.054432538,0.11324409,-0.77188448,-0.62559582,0.13055448,-0.51640745,0.8463326,0.39498609,-0.87388491,0.28339224,0.51644104,-0.85623333,-0.012374438,0.31512689,-0.33899809,-0.8864397,0.21288999,-0.1961766,-0.9571795,0.69884634,-0.5630615,0.44110718,0.38797482,0.0079529681,0.92163566,0.79362807,0.50864824,0.3338135,0.12292277,0.16017016,-0.97940569,0.53218438,0.77662307,0.33709996,0.21281315,0.7048277,0.67670413,0.16706235,0.98591954,-0.0072691271,-0.21229637,0.94927302,0.23197193,-0.20613478,0.89286437,0.4003769,-0.09859107,0.31896087,-0.942626,-0.27503041,0.60138721,-0.75012778,-0.36886347,0.47177195,-0.8008564,-0.67390924,0.68825725,0.26860435,-0.73375847,0.52821045,-0.42730812,-0.80888913,0.45385324,0.37378552,-0.45903599,0.019129463,-0.8882117,-0.55926638,-0.067642594,0.8262237,-0.92638385,-0.12081114,0.35667579,-0.98549825,-0.16657044,0.032365048,-0.5198715,-0.26088458,0.81343276,-0.75032976,-0.66094518,0.012518746,-0.6740581,-0.61395154,-0.41074224,-0.48700914,-0.44504878,0.75150095,-0.60676032,-0.71299494,0.35139739,-0.15661997,-0.86200047,0.48210516,-0.11007215,-0.95338542,0.28096329,-0.024653278,-0.59273247,-0.80502201,0.16143595,-0.83322848,0.52883715,0.21741633,-0.90557798,-0.36422338,0.35242062,-0.67252989,0.65077128,0.45704073,-0.79822886,0.39235757,0.55271608,-0.74916972,0.3650338,0.55187244,-0.66360008,0.50504628,0.48463089,-0.56772259,0.66545019,0.46967891,-0.48708887,0.73630575,0.50228052,-0.4140245,0.75914293,0.92220237,-0.30092116,-0.242877,0.60932431,-0.16006654,-0.7765968,0.63528601,-0.14738537,0.7580826,0.49783431,-0.11096983,0.86014341,0.93125991,-0.20342907,0.30227736,0.99402857,-0.10277058,0.036679837,0.98274017,0.13984677,0.12109764,0.68637432,0.18410322,0.70355973,0.48203726,0.20816794,0.8510618,0.79167423,0.35305771,-0.49860021,0.69592319,0.38636739,0.60531905,0.64053016,0.63830426,-0.4269529,0.20516232,0.42483598,0.88171583,0.15770444,0.98748242,-0.0027892584,0.12349165,0.85533035,0.50314988,-0.072128237,0.5136767,-0.85494664,-0.08695943,0.31701892,0.9444242,-0.27095227,0.86306384,-0.42626948,-0.38549002,0.85891685,-0.33713393,-0.26967162,0.60052238,-0.75276164,-0.45497087,0.85284835,-0.2562249,-0.8641225,0.20762047,-0.45846051,-0.75670947,-0.053331046,0.65157239,-0.93651612,-0.34872753,0.036423431,-0.69574159,-0.27734544,-0.66258822,-0.80657437,-0.34486272,-0.48011196,-0.19509473,-0.11877694,-0.97356565,-0.46248896,-0.87411718,0.14840188,-0.23511685,-0.89254623,0.38481333,-0.098984377,-0.58766063,0.80302994,-0.071314832,-0.45049232,-0.88992745,-0.0928004,-0.83749907,-0.53850106,-0.047317565,-0.93507523,0.35127676,-0.00019352624,-0.70089106,0.71326832,0.088450672,-0.67339439,-0.73397307,0.19930138,-0.96404066,-0.17579694,0.23035543,-0.9221479,0.31077263,0.23691297,-0.86468429,0.44293715,0.49314318,-0.8373891,-0.23577384,0.25348402,-0.35803499,0.89864164,0.62137788,-0.74889811,0.23030664,0.66858936,-0.66590136,0.331004,0.62744881,-0.59532927,-0.50188748,0.64965689,-0.44056587,0.61955438,0.8020832,-0.49333497,0.33657564,0.7681275,-0.41889421,0.48426004,0.98899438,0.010771236,0.14756047,0.65482096,0.018036472,-0.75556879,0.93018986,0.1965306,-0.31003638,0.94704581,0.32064794,-0.017003821,0.4406668,0.20971355,-0.87283045,0.7223482,0.34473686,-0.59947441,0.55793197,0.2971447,0.77486576,0.56787397,0.32311642,0.75704354,0.63774577,0.76757436,0.064108749,0.39706079,0.65040262,-0.64754858,0.45324303,0.878101,-0.1533277,0.0047339891,0.97510592,0.22168903,-0.039070323,0.99828417,0.043614623,-0.074988797,0.99321469,0.088889008,-0.12974607,0.76186301,0.63461068,-0.14859631,0.84898845,-0.50708751,-0.32601988,0.902243,-0.28225628,-0.25207806,0.61725121,0.74529028,-0.27462088,0.51380231,-0.81276722,-0.66232995,0.74835885,-0.035750133,-0.39733056,0.41434712,-0.81880699,-0.79789619,0.44068825,-0.41128522,-0.47112609,0.24063484,-0.84860773,-0.80252691,0.21793245,-0.55538815,-0.8862423,0.20127584,0.41720812,-0.94343539,-0.15353229,0.29386647,-0.58988234,-0.13338221,-0.79639689,-0.56964596,-0.17317668,-0.80343844,-0.91034007,-0.40303397,-0.094045618,-0.52010035,-0.28195292,0.80622464,-0.68601575,-0.59228923,-0.42258237,-0.44132451,-0.48998034,-0.75176588,-0.1443495,-0.26566895,-0.95319632,-0.14360343,-0.90950778,0.39009442,0.21799693,-0.54090599,-0.81234109,0.27607367,-0.67149932,-0.68765688,0.47462751,-0.86847644,-0.14309925,0.254313,-0.39318678,0.88358873,0.4632466,-0.69070754,0.55527082,0.62498532,-0.64275476,-0.44301204,0.70838535,-0.57374662,0.41110219,0.75704216,-0.55584266,-0.34340369,0.47673574,-0.29784826,0.82704864,0.22085379,-0.08892681,0.97124437,0.96775441,-0.039907892,-0.2487142,0.21546166,0.92268485,0.31973262,0.65855271,0.0030937192,-0.75252824,0.75298908,0.044457483,0.6565295,0.9426815,0.28716653,-0.16996169,0.36031117,0.40211073,-0.84171422,0.50132436,0.63911047,-0.58327669,0.45444817,0.88555834,0.096245931,0.36432326,0.92384995,-0.11734494,0.26751336,0.9194942,-0.28803997,0.26717054,0.92126777,-0.2826404,0.21232642,0.87215256,-0.44075777,0.10137604,0.98922216,-0.10565235,-0.002854901,0.67039497,0.74199894,-0.039408479,0.92119303,-0.38710511,-0.14976664,0.93552204,-0.31995072,-0.31243741,0.92646065,0.20988931,-0.55326133,0.77628096,-0.30214197,-0.56053827,0.72062987,0.40803118,-0.46196713,0.51616453,-0.72122157,-0.54652222,0.33211303,-0.7687746,-0.51617814,0.28434132,0.80790479,-0.91321635,0.34809785,-0.21181073,-0.78620729,0.17675224,0.59214588,-0.82886523,0.084989427,-0.55295499,-0.87259841,-0.066797928,0.48384921,-0.81228221,-0.090260625,-0.57623835,-0.94778175,-0.20536474,0.24399811,-0.48265803,-0.10987803,-0.86888897,-0.8376708,-0.451114,0.30790225,-0.70148188,-0.71268308,-0.0024479732,-0.26540632,-0.3383383,-0.90282151,-0.53071478,-0.81170656,0.24387351,0.04161917,-0.99670365,0.069639587,0.09885443,-0.97308585,-0.20816277,0.12106987,-0.98676243,0.10789803,0.10074305,-0.71825515,-0.68844781,0.0887498,-0.4119403,-0.90687853,0.35464537,-0.89820594,-0.25971665,0.25048138,-0.57381137,0.77974329,0.46459674,-0.83797314,0.28627064,0.26635328,-0.38176719,0.88504788,0.76920779,-0.61615822,-0.16931751,0.85065848,-0.52040457,-0.074560278,0.59755913,0.065724204,0.79912666,0.98905873,0.13038422,-0.069012955,0.54277385,0.10003803,-0.83389984,0.8065985,0.52910137,0.26353483,0.61887099,0.49956975,0.60615902,0.76252417,0.6468459,-0.012135822,0.61351625,0.72269514,-0.31829161,0.51057384,0.65553439,0.55640724,0.37569079,0.56366899,-0.73561791,0.23083609,0.47929157,0.84675515,0.40201802,0.8827348,0.2432299,0.36319747,0.85576446,0.36844917,0.29924992,0.88243684,-0.36298032,0.053965469,0.96669307,0.2501844,-0.010906951,0.40595724,-0.91382699,-0.041053903,0.88883384,-0.45638688,-0.12918394,0.78821728,-0.60168516,-0.18120979,0.82266643,0.53887193,-0.21917898,0.64784267,-0.72956182,-0.62144205,0.77105482,-0.13886771,-0.32263435,0.34184443,0.88263779,-0.48757972,0.50123917,0.71486034,-0.69938369,0.62984111,-0.3378796,-0.78126909,0.60772761,0.14242808,-0.29236375,0.20046892,0.93505917,-0.57701881,0.36513041,-0.73056764,-0.60038866,0.36685836,-0.71059721,-0.99391041,-0.043649368,0.10117721,-0.33799759,-0.022364198,0.94088122,-0.82894327,-0.37334643,0.41649189,-0.3287844,-0.22311765,-0.9176706,-0.57479883,-0.49852455,0.64890645,-0.68663144,-0.67002438,0.28214287,-0.66557214,-0.65095688,-0.36506009,-0.28441996,-0.34700055,0.89369788,-0.61513893,-0.75875984,-0.2142139,-0.37839138,-0.70621168,-0.59840206,-0.41690019,-0.84985336,0.3224027,-0.08521883,-0.60560156,-0.79119182,-0.087980975,-0.74674842,0.65926182,0.0076690946,-0.9219645,-0.38719845,0.021503591,-0.84563395,0.53332993,0.35324695,-0.9041733,-0.24018169,0.65605315,-0.32445952,0.68141051,0.51155745,-0.20234343,0.83508449,0.91081795,-0.32757661,0.25120553,0.95663582,-0.27800805,-0.086944979,0.64423113,-0.18230803,-0.74278532,0.13623096,-0.0014564931,-0.99067603,0.44356234,0.10573209,-0.88998493,0.33248145,0.29275474,-0.89652147,0.33507642,0.75690675,0.56108464,0.29545647,0.82664291,0.47892272,0.12238765,0.7598466,-0.63847819,0.068766061,0.9455077,-0.31825526,-0.12036547,0.8391781,-0.53036994,-0.24976215,0.92785268,0.27696258,-0.33155556,0.7132117,-0.61757589,-0.48643193,0.76021918,0.43063995,-0.263606,0.37897441,0.88706836,-0.69726838,0.64414885,-0.31446632,-0.77850784,0.5602228,0.28297695,-0.68459735,0.31134856,0.65908159,-0.79556015,0.23199637,0.55969789,-0.55517346,0.083087454,0.82757411,-0.84764246,0.068292722,0.52615431,-0.81900645,0.036844768,0.57260011,-0.36789717,-0.03574945,-0.92917902,-0.81630789,-0.36689965,-0.44612339,-0.85071674,-0.39975018,0.34129288,-0.31079068,-0.16488591,-0.93606719,-0.3806723,-0.63048884,0.676441,-0.11117243,-0.19958016,0.97355454,-0.2585792,-0.82828446,0.49707309,-0.12829617,-0.518538,-0.84537473,-0.066097971,-0.9088041,0.41195407,0.15391184,-0.77725526,0.61007,0.21412937,-0.75552451,-0.61913757,0.22757279,-0.56730036,0.79144231,0.49321107,-0.82491054,0.27616199,0.44524698,-0.7438374,0.49845868,0.49576593,-0.74003323,-0.45449639,0.38959088,-0.52155094,0.75908074,0.45101913,-0.39288128,-0.80139007,0.72649319,-0.52694854,-0.44105881,0.62195998,-0.42593527,0.657073,0.71882431,-0.27639366,0.6378857,0.77394638,-0.22287039,0.59273585,0.43098819,-0.029758885,-0.90186672,0.47534641,0.03522183,0.8790934,0.97365132,0.20862412,0.092081902,0.77334336,0.61906545,-0.13674071,0.67235535,0.54521404,-0.50067947,0.71352153,0.61137496,0.34221001,0.59153283,0.64335544,0.4859863,0.60370182,0.77281292,-0.19571486,0.28218206,0.41332334,0.86575811,0.18072223,0.42455628,-0.88718174,0.22790598,0.89328147,-0.38743655,0.059323692,0.57868299,0.81339209,-0.028184579,0.92797823,-0.371567,-0.10532243,0.83800358,-0.53540376,-0.18554724,0.83027505,-0.52556214,-0.21594608,0.87733195,0.42855097,-0.28916437,0.94840725,0.13002946,-0.24460773,0.66044286,0.7099171,-0.23912033,0.43000775,-0.87058303,-0.59299318,0.80437146,0.036682941,-0.52520373,0.59958928,-0.60386566,-0.41994067,0.40550821,0.81191928,-0.53632465,0.44054236,-0.71991548,-0.7541321,0.56652466,-0.3321665,-0.37992941,0.1811441,0.90710554,-0.34623862,0.12294101,0.93005609,-0.4106997,0.14170882,-0.90069105,-0.49537472,0.1018814,-0.86268422,-0.9556191,0.12709217,0.26578134,-0.96108172,-0.13764416,-0.23953291,-0.18290477,-0.072928738,0.98042197,-0.58317107,-0.27193184,-0.76548323,-0.33350227,-0.182623,-0.92489193,-0.44670159,-0.35062244,0.823117,-0.50845926,-0.40684671,0.75891036,-0.59193398,-0.48249371,-0.64561133,-0.55797368,-0.46082225,0.69015087,-0.50560754,-0.44923008,-0.73658221,-0.31804437,-0.3678461,-0.87380606,-0.26346476,-0.34626018,0.90038337,-0.30540511,-0.48456921,-0.81970751,-0.21265345,-0.36453077,-0.9065847,-0.41765677,-0.8164729,0.39866632,-0.33493226,-0.94201672,0.020612649,-0.16500936,-0.4957027,-0.8526727,-0.2339873,-0.8756664,-0.42244325,-0.030028047,-0.16865087,0.98521835,-0.093432104,-0.97741651,-0.18954525,-0.0037425776,-0.80011154,-0.59983957,0.0001144514,-0.17358293,0.98481925,0.027181922,-0.99619303,-0.082828696,0.069958663,-0.53238294,-0.84360784,0.14141042,-0.95618397,-0.25634996,0.075266239,-0.45515773,0.887224,0.17608082,-0.30905871,-0.93460059,0.43885912,-0.31026886,0.84328874,0.47033048,-0.28572383,0.83495577,0.83141379,-0.44451519,0.3334027,0.19394659,-0.012985591,-0.98092614,0.97695969,-0.054339641,-0.20639032,0.91067154,0.39461228,-0.12230489,0.88548136,0.42115195,-0.19635121,0.43794574,0.30098337,0.84712014,0.69721748,0.70434887,-0.13334338,0.38148388,0.74056734,0.55319984,0.16608419,0.58033142,0.797265,0.1596756,0.79334319,-0.58746088,0.095684705,0.81213776,-0.57556641,-0.039047887,0.91889996,0.39255335,-0.10713354,0.85500467,0.50743414,-0.036545402,0.20474752,0.97813235,-0.20921383,0.97759901,-0.02301605,-0.2131763,0.97620911,-0.039643975,-0.22601675,0.96315871,0.14574544,-0.26504366,0.87543001,-0.40419568,-0.27340719,0.84921216,0.45176014,-0.28756113,0.83569578,0.46789012,-0.3739788,0.9099482,-0.17925995,-0.49226421,0.65331345,-0.57520212,-0.65738192,0.68546971,-0.31301805,-0.67534211,0.51462174,-0.52827787,-0.75191529,0.43584976,0.49462954,-0.58638167,0.12021536,-0.80106479,-0.7148381,-0.027765278,-0.69873856,-0.48166746,-0.11422757,-0.86887774,-0.66005116,-0.16133728,0.73369118,-0.85223063,-0.33189141,0.40441444,-0.517456,-0.55588726,-0.65056026,-0.60459021,-0.66159383,-0.44358121,-0.22540978,-0.25549616,-0.94016602,-0.4593787,-0.86040621,-0.22061816,-0.23114017,-0.52173333,0.82119946,-0.14797179,-0.94832506,0.28068474,-0.041232704,-0.58913982,0.8069784,0.44703541,-0.87076369,0.20476803,0.19634559,-0.33876464,-0.92015592,0.55144622,-0.64913386,-0.52395829,0.084672426,-0.098627781,0.99151558,0.32213901,-0.29897024,-0.89824454,0.43834984,-0.4007625,0.80451155,0.49645129,-0.41849913,0.76052258,0.66693393,-0.52042893,0.53324747,0.78377731,-0.42915626,0.4489076,0.89692423,-0.43210223,-0.0938861,0.41268876,-0.19637866,0.88945119,0.60965274,-0.095957936,-0.786839,0.72487728,-0.10470767,0.68087388,0.50443974,0.23465463,-0.83094991,0.80189692,0.44381531,0.39998664,0.43329573,0.37350539,0.8202125,0.68338565,0.65883452,0.3145173,0.44806503,0.58350741,-0.6773159,0.59171833,0.78952047,0.16287064,0.50232817,0.75827162,0.41556054,0.3460618,0.56276024,0.75069444,0.4174958,0.9023807,0.10680043,0.37149021,0.92674725,-0.055987057,0.29439149,0.9133901,-0.2811622,0.090284369,0.83303095,-0.54580964,-0.049336306,0.93964218,0.33858309,-0.070777662,0.82210596,-0.56491797,-0.074700147,0.66263639,-0.74520662,-0.11882584,0.9464651,-0.30014035,-0.14581973,0.86251216,0.48457134,-0.33121329,0.71192644,-0.61924026,-0.47042341,0.8773557,-0.094598073,-0.5029391,0.62815402,0.59369587,-0.71786303,0.66247305,-0.21401434,-0.65480506,0.26469975,-0.70792964,-0.99233486,0.11145024,0.053388923,-0.70299768,-0.10728374,-0.70305367,-0.86616185,-0.18921758,0.46255849,-0.93104928,-0.30498479,0.20032852,-0.6413184,-0.23647632,-0.72992442,-0.92892851,-0.35915296,-0.090005476,-0.80739797,-0.45982602,0.3696871,-0.66432387,-0.59794688,-0.4484789,-0.51248251,-0.46677818,0.72074948,-0.2636881,-0.28650428,-0.92107757,-0.39687877,-0.55778751,0.72894467,-0.25357233,-0.42242965,-0.87020358,-0.24060835,-0.51846782,-0.82054783,-0.3497534,-0.85730076,0.37776708,-0.22479321,-0.87410254,0.43059582,-0.12834632,-0.70619711,-0.69628504,-0.088378378,-0.54443842,-0.83413193,-0.075957423,-0.4838559,-0.87184513,-0.089253667,-0.90695049,0.41167293,-0.012716987,-0.88231992,-0.47047831,0.088164275,-0.94219544,-0.32325658,0.12931565,-0.94788804,0.29117987,0.16332031,-0.98655832,-0.0054004433,0.081295272,-0.42194243,-0.90297047,0.35866365,-0.90585664,0.22535336,0.23629166,-0.55066925,-0.80058081,0.27086072,-0.50606275,-0.81886199,0.47234859,-0.86871119,-0.14908949,0.32249537,-0.46742852,0.82310833,0.097380875,-0.12320215,-0.98759212,0.44313753,-0.44174986,-0.78005525,0.58731542,-0.47384748,-0.65614721,0.40080272,-0.20339581,0.89330136,0.88897017,-0.39370303,-0.23394434,0.9154378,-0.39510101,0.07660831,0.065160732,-0.02644894,-0.9975242,0.94486342,-0.25672864,0.20328189,0.98721559,-0.030845397,-0.15637755,0.98399895,0.064099542,-0.16624472,0.99329358,0.11055394,0.033848099,0.50265398,0.15501467,0.850476,0.33529568,0.75863629,0.55861237,0.30501062,0.94720406,-0.09885845,0.13281075,0.94579634,0.29636225,0.13083922,0.9909118,0.031223421,-0.20836599,0.93288549,-0.29378271,-0.30763235,0.93128568,-0.19511361,-0.31948786,0.82628205,0.46388089,-0.33221782,0.71045652,0.62038927,-0.24160816,0.42340124,-0.87313051,-0.37390692,0.5757688,-0.72710653,-0.45005195,0.67852866,-0.58056188,-0.36731228,0.29359882,-0.88254259,-0.24636083,0.18082143,0.95216068,-0.88970516,0.44939048,0.080454493,-0.9413481,0.32712846,0.082769066,-0.69998838,0.14481784,-0.69931685,-0.90224859,0.12020884,-0.41412234,-0.77659064,-0.045517909,-0.62835905,-0.71565676,-0.24479414,0.65414924,-0.60360798,-0.32022541,-0.73014594,-0.78481242,-0.45313039,-0.42277928,-0.4478196,-0.47784879,-0.75572359,-0.34033678,-0.4682241,0.81543673,-0.3566358,-0.93336317,-0.040547469,-0.33845505,-0.93810112,0.073583098,-0.1547403,-0.97589572,0.15389279,-0.02933486,-0.99390281,0.10628584,0.13428257,-0.97307937,-0.1873092,0.62185345,-0.58752312,0.51779811,0.51518017,-0.38490302,0.76579309,0.76613357,-0.54135673,0.34637009,0.73901054,-0.14708019,-0.65744265,0.77462618,-0.13350134,0.618168,0.99876605,-0.045974136,0.01878205,0.98611549,-0.037218114,0.16183651,0.95850536,0.01810868,-0.28449876,0.087112241,0.0050708404,-0.9961856,0.48881117,0.078416714,0.86885813,0.44251496,0.21422736,0.87079685,0.74871838,0.384354,0.54008591,0.84297836,0.45232371,-0.29118851,0.63765681,0.52088083,-0.56751823,0.72640004,0.63451417,0.26407337,0.5941467,0.6612424,0.45798273,0.52316355,0.6489119,0.55246108,0.43777685,0.69987755,0.56437828,0.061321046,0.13296557,-0.98922186,0.22058635,0.54618111,0.80810139,0.33597071,0.90046579,0.27619748,0.3216274,0.93524861,-0.14787111,0.16443118,0.97543724,0.14657619,0.13917423,0.93115455,-0.3370189,0.056473371,0.98460248,0.1654349,-0.033411771,0.65900934,0.75139227,-0.04527477,0.84035438,0.54014323,-0.052316609,0.49297239,-0.86847061,-0.15324254,0.98806646,0.015536681,-0.21996546,0.97546206,-0.0094320952,-0.25890414,0.92898809,0.26448021,-0.27892731,0.94695065,0.15963717,-0.32101532,0.93684949,0.13878831,-0.3232846,0.78940657,-0.52184705,-0.3573167,0.81611372,-0.45418408,-0.33570147,0.73044034,-0.59477847,-0.22738325,0.44047261,-0.86849337,-0.18587123,0.35826331,-0.9149313,-0.25977613,0.44390507,0.85759236,-0.3401925,0.35908022,-0.86909749,-0.50986602,0.46087519,-0.72638193,-0.55333388,0.2774895,-0.78537965,-0.22649068,-0.005184925,0.97399953,-0.54688509,-0.071763896,-0.83412628,-0.75804843,-0.12012377,-0.64104045,-0.70502561,-0.22618597,-0.67214493,-0.72270901,-0.63996105,0.26103933,-0.70866671,-0.67474668,-0.20617567,-0.32152126,-0.50526366,-0.80083251,-0.25699064,-0.42576767,-0.86757,-0.41159405,-0.6942763,-0.59039881,-0.25383596,-0.50568565,-0.82452976,-0.21078412,-0.72287507,-0.65804383,-0.0067247936,-0.05246404,0.99860017,-0.055754177,-0.68071631,-0.73042233,-0.018250035,-0.49718398,-0.86745318,0.15337288,-0.90410955,-0.39882662,0.26139062,-0.87348443,0.41073092,0.42677887,-0.53694837,0.72769928,0.6573477,-0.68788986,-0.30773614,0.73281113,-0.57642093,-0.36156156,0.79684302,-0.50000118,0.33917551,0.87004584,-0.44990899,0.20149971,0.30667086,-0.13466188,-0.94224156,0.99973855,-0.022785644,0.0019084167,0.8360719,0.075937615,0.54333898,0.79530854,0.33644583,-0.5042703,0.7470191,0.50275987,0.4349655,0.77137027,0.62499937,0.11984859,0.7550659,0.6347464,-0.16423305,0.35632187,0.40917806,0.84000479,0.45744947,0.61586475,0.64144415,0.21384831,0.3231312,0.92187587,0.1681926,0.42463457,-0.88960482,0.26685949,0.92814145,0.25949849,0.24495895,0.88046962,0.4059167,0.24150522,0.87315123,0.42341725,0.030787832,0.2782757,-0.96000768,0.042782035,0.98426621,0.17143429,-0.023073965,0.8678183,-0.49634564,-0.077277353,0.93084264,-0.3571557,-0.17832652,0.98393339,0.0086451259,-0.35260374,0.90507463,-0.23771938,-0.32944504,0.84257878,-0.42605981,-0.36646112,0.90860882,-0.20034034,-0.41813108,0.87796581,0.23311465,-0.39601957,0.4896227,-0.77681279,-0.12065366,0.13646942,-0.98326944,-0.53406192,0.56871648,-0.62557129,-0.73576528,0.61983609,-0.27286016,-0.42322353,0.34974267,0.83580016,-0.43042162,0.2710495,-0.86097003,-0.71888804,0.29737759,0.62830451,-0.51199014,0.17698744,0.84056025,-0.82452289,0.18320873,-0.53534714,-0.97026844,0.19727058,0.14022653,-0.77394563,-0.080479327,-0.62811722,-0.96417192,-0.25681252,-0.066481864,-0.94018176,-0.29286569,0.17403434,-0.38893959,-0.18173761,-0.90315969,-0.53462773,-0.74814534,-0.39300349,-0.39112573,-0.70071736,0.59667064,-0.31054097,-0.73373257,-0.60431848,-0.092267468,-0.34175903,-0.93524728,0.030656713,-0.89752514,0.43989634,0.14536969,-0.93876484,0.31239116,0.28254186,-0.85397981,-0.43690798,0.37849572,-0.92497703,0.034036571,0.38355781,-0.70055333,0.60175446,0.61924184,-0.73444497,-0.27772311,0.80525198,-0.58884955,-0.069465587,0.52501685,-0.29751531,0.79739698,0.82005089,-0.43676858,0.36979689,0.9104943,-0.40483336,-0.084321351,0.82366649,-0.34467311,0.4503043,0.68065741,-0.20268866,0.70400483,0.7269389,-0.18126702,-0.66234591,0.89029653,0.0083940116,0.45530389,0.47989075,0.010685375,0.87726318,0.66151151,0.13385647,-0.73789225,0.91777999,0.22282719,0.32867604,0.7531319,0.24170083,0.61186032,0.3174332,0.26074283,0.91172876,0.11059169,0.099397274,0.98888304,0.66710094,0.65604241,0.35296557,0.27762495,0.45180225,0.84782021,0.42708444,0.83462242,-0.34785671,0.22096894,0.96357345,-0.15066168,0.13290205,0.98930446,-0.060114252,-0.019364629,0.8137464,-0.58089741,-0.22295297,0.91034838,-0.3486514,-0.2182292,0.72374464,-0.65465236,-0.31731706,0.94587506,-0.068045922,-0.20147736,0.53271834,0.82195988,-0.22357806,0.57529179,0.78679871,-0.35488218,0.7263097,-0.58867041,-0.47015005,0.83958938,0.27211873,-0.53754468,0.76521151,0.35425565,-0.62216886,0.78198234,-0.037543763,-0.67548433,0.68301392,-0.2778721,-0.3443422,0.34205867,-0.87431362,-0.44442328,0.30820674,-0.84112814,-0.82857633,0.54755305,0.11682006,-0.32209085,0.16855806,-0.93158235,-0.50393713,0.23865139,-0.83011619,-0.94262928,0.29584939,-0.15467119,-0.96874783,0.14917762,0.19817588,-0.59329855,0.086583531,-0.80031252,-0.88000638,0.09133173,0.46609794,-0.59739883,-0.045686007,0.80064188,-0.68833492,-0.60959013,-0.39318559,-0.64728899,-0.59299135,0.47893447,-0.53754752,-0.78149811,0.31670707,-0.38029146,-0.78619956,0.48710231,-0.10900784,-0.97999063,0.16654027,0.1492468,-0.68087145,-0.71703519,0.3550014,-0.60992046,-0.70849915,0.49273115,-0.81916971,0.2935592,0.83912632,-0.44156436,-0.31762861,0.88927946,-0.42952753,-0.15712461,0.23624802,-0.089253746,0.96758495,0.93854461,-0.28033557,-0.20136033,0.50448174,0.23461482,-0.83093565,0.86072646,0.27272505,0.42984998,0.45885192,0.32100555,-0.82849886,0.60911012,0.4378487,0.6612665,0.76848938,0.62556543,0.13450639,0.47626198,0.4886009,-0.73105656,0.24165205,0.31738994,-0.9169885,0.5067572,0.78479359,-0.35678587,0.37222335,0.82721441,-0.42091104,0.052191519,0.28312278,0.95766254,0.07026712,0.75478687,-0.65219576,0.0043102248,0.71890743,-0.69509246,-0.12134365,0.59782016,-0.79239307,-0.25714938,0.74123313,-0.62003842,-0.82887139,0.39870097,0.39244076,-0.69707583,0.18681194,-0.69223305,-0.78002123,-0.27799006,0.56061432,-0.57405841,-0.2154071,-0.78997261,-0.79040622,-0.36313725,-0.49334505,-0.80423667,-0.3992949,-0.44018969,-0.29708082,-0.47670686,0.82734126,-0.024083457,-0.30545225,0.95190278,0.071532286,-0.95169219,-0.29860527,0.098128361,-0.86194616,0.49741296,0.35166872,-0.93611416,-0.0044030726,0.31375084,-0.5108568,0.800366,0.26964355,-0.40948197,0.87156002,0.76273794,-0.63391212,0.12800884,0.61685163,-0.14454842,-0.77369233,0.73088511,-0.12929235,0.67014211,0.71068968,-0.069890832,0.70002532,0.83171828,-0.0018548236,0.5551948,0.31127456,0.13088823,0.9412632,0.65329982,0.64252734,-0.4004472,0.40509743,0.53087944,0.74435414,0.58496762,0.81099168,0.010265061,0.24208717,0.37857884,0.89334868,0.24158408,0.78369902,-0.57223508,-0.025444453,0.82558803,-0.56369937,-0.062439928,0.52619641,-0.84806757,-0.11088342,0.80898857,-0.57727148,-0.11908897,0.83536785,0.53663617,-0.31366841,0.60762748,-0.72965812,-0.43454742,0.57080616,-0.69666984,-0.54079246,0.087744039,-0.83656709,-0.93255216,-0.061094248,-0.35582856,-0.5446161,-0.059774369,0.83655265,-0.67911552,-0.23792949,-0.69440022,-0.28139711,-0.11103498,0.95314579,-0.60053832,-0.33402047,-0.72648747,-0.61583796,-0.66383931,0.42433592,-0.58112568,-0.76196108,-0.28584656,-0.4551399,-0.61524883,-0.64367426,-0.54117621,-0.76059977,-0.35863113,-0.49529235,-0.86529005,0.077192006,-0.14279662,-0.91977311,-0.36554966,-0.016113188,-0.99980172,0.011699647,0.17207378,-0.97571281,-0.13555489,0.17612418,-0.88894815,-0.42279009,0.19620487,-0.97586722,0.09584789,0.21738945,-0.96120861,-0.16976407,0.27355825,-0.96133157,0.031741067,0.34363684,-0.84046996,0.41895582,0.54735337,-0.77911858,0.30557902,0.79539543,-0.30297206,-0.52493241,0.75556065,-0.24482443,0.60760933,0.73053778,-0.21599585,0.64781197,0.21691554,-0.025361058,-0.97586088,0.39759186,0.073792053,0.91459031,0.45730391,0.13183365,0.87948452,0.82054896,0.42780171,0.37905818,0.70414294,0.63699235,0.31372516,0.08875786,0.8871749,0.45281644,-0.045822384,0.90938294,0.41342832,-0.060501537,0.99603289,-0.06525375,-0.063510298,0.99479761,-0.079650263,-0.35001982,0.93092547,-0.10423005,-0.3991167,0.9150119,0.05881394,-0.43161466,0.72497861,-0.53676327,-0.35916724,0.55742488,-0.74851613,-0.73354409,0.63134367,-0.25163117,-0.47397509,0.40229437,-0.78326678,-0.71655798,0.42803972,-0.550751,-0.46859476,0.063609704,0.88112017,-0.55041672,0.009671316,0.83483405,-0.48404015,-0.10433402,0.86880352,-0.59797773,-0.32452042,-0.7328773,-0.55487643,-0.41511945,-0.72096323,-0.45288126,-0.37416833,0.80925684,-0.61822614,-0.62969553,-0.47040406,-0.40303542,-0.90715399,0.12097146,-0.24564662,-0.64149418,0.72673444,-0.25315643,-0.68106598,-0.68706691,-0.096285234,-0.65875101,0.74617442,-0.019733591,-0.15763373,-0.98730046,0.030659159,-0.89749468,0.43995831,0.35411477,-0.69903415,0.62125196,0.42952242,-0.62427894,0.65252302,0.44055612,-0.4545234,0.77415682,0.39215878,-0.38486935,0.83551605,0.56754164,-0.50999623,-0.64637476,0.75856229,-0.64681839,-0.078798583,0.85598493,-0.47782032,0.19742732,0.17858379,-0.076995849,0.98090747,0.71560172,-0.1587739,-0.68022425,0.99479903,0.044800173,-0.091475846,0.97492762,0.045603051,-0.21779923,0.80133869,0.30566554,-0.51422259,0.77038269,0.43465947,0.46645648,0.61303917,0.38738078,-0.68856307,0.64714265,0.5096061,0.56701676,0.66619304,0.55068194,-0.50292767,0.69054229,0.7023017,-0.17298456,0.43789316,0.51019262,-0.74023852,0.027171788,0.052198594,0.998267,0.25575481,0.80280843,0.53859827,0.034549478,0.1263995,-0.99137758,0.20930286,0.90521912,0.36982518,-0.28752898,0.8889665,-0.35646269,-0.29046653,0.85939238,0.42080153,-0.35919037,0.83440189,-0.418038,-0.81331085,0.39361944,0.42847309,-0.74036482,0.27265826,0.61442444,-0.48143922,0.049809196,-0.87506304,-0.68156195,-0.1244264,-0.72110428,-0.56877922,-0.14258792,0.81003635,-0.18983729,-0.063785218,-0.97974142,-0.62203557,-0.21031367,-0.75421477,-0.79630784,-0.54460078,0.26325619,-0.29953743,-0.23249811,-0.92532262,-0.59490058,-0.67175512,-0.44140499,-0.36868044,-0.51959961,0.77077297,-0.47502388,-0.8038177,-0.35809135,-0.28032339,-0.78896303,-0.54676881,-0.20808293,-0.70756388,-0.67531833,-0.088071711,-0.74755444,-0.65833558,-0.027605525,-0.82448549,-0.56520935,0.026433542,-0.9891123,-0.14476921,0.11420045,-0.66049972,-0.74209054,0.15577834,-0.63919625,0.7531011,0.33188723,-0.88947999,-0.31412771,0.34645945,-0.87418609,0.34024186,0.37551685,-0.92540485,0.051117033,0.53301899,-0.81742138,-0.21843317,0.73217355,-0.56693002,0.37750794,0.35744464,-0.21580202,0.9086599,0.88407982,-0.32669357,0.33417687,0.67602468,-0.22564242,0.70148138,0.45035362,0.38801911,0.80412859,0.50195417,0.85962598,-0.095316277,0.41611285,0.89966254,-0.13212648,0.32662282,0.87666933,0.35322572,-0.1687822,0.67028698,0.72265339,-0.28368311,0.86741945,0.4087877,-0.70973432,0.69292093,0.12703454,-0.53771198,0.47515396,-0.69648729,-0.59554827,0.522499,-0.61017788,-0.84773159,0.50718723,0.15528124,-0.48617489,0.15467308,-0.86006408,-0.93929416,0.29739919,-0.17111457,-0.85809114,0.031113808,-0.51255393,-0.98231248,-0.057642869,0.17815583,-0.38438333,-0.18230686,0.90499374,-0.60468047,-0.57699782,-0.549031,-0.49832271,-0.5374503,-0.68030997,-0.33810372,-0.47197125,0.81420453,-0.31021778,-0.47601791,0.82290454,0.15760845,-0.91985321,-0.35920698,0.19946643,-0.61310321,0.7644067,0.26025837,-0.67851405,0.68693833,0.71009526,-0.26910072,-0.65065316,0.96539304,-0.25545111,0.052545251,0.96122854,-0.19800342,0.19192276,0.9687069,-0.031708778,-0.24617371,0.66793773,0.050077909,0.7425304,0.29125279,0.0621042,0.95462814,0.85193068,0.43493153,0.29163107,0.7807037,0.51192908,-0.3583718,0.5008737,0.46583118,0.72947026,0.57415831,0.80857336,-0.1286521,0.41687188,0.90896365,-0.0017080932,0.21108247,0.60751133,0.76575073,0.24651732,0.96635373,-0.073414445,0.10809848,0.74757804,-0.65531809,0.085977064,0.69026038,-0.71843479,-0.060065608,0.94966252,0.30746255,-0.070644768,0.52274582,0.84955643,-0.25823544,0.9224877,0.28693362,-0.24038404,0.67815631,-0.69449228,-0.37707281,0.9168128,-0.13141685,-0.47722468,0.86516935,0.15407334,-0.38556085,0.58032687,-0.71733086,-0.58832307,0.64183188,-0.49186156,-0.19980368,0.17146344,-0.96471694,-0.76517325,0.58514793,-0.2685364,-0.64747912,0.48991162,-0.58374429,-0.25389552,0.14898668,0.95568825,-0.70656773,0.36307497,0.60740317,-0.93710622,0.25024255,-0.24333229,-0.9170732,-0.14170779,0.37268707,-0.84982394,-0.14624818,-0.50637017,-0.77905048,-0.53862718,-0.32087553,-0.47529746,-0.3763769,-0.79525641,-0.44961504,-0.35617264,-0.81913819,-0.67329094,-0.61837485,0.40532932,-0.55854286,-0.82831367,0.043890091,-0.35321988,-0.55422362,-0.75370544,-0.4273524,-0.80993582,-0.40171369,-0.34406893,-0.67017698,-0.65763165,-0.2308402,-0.7034395,0.67222442,-0.26844522,-0.8979187,-0.34882541,-0.085337547,-0.52284848,-0.84814325,-0.0016837375,-0.99646083,-0.084041536,0.036313447,-0.74970493,-0.66077519,0.011974757,-0.24347654,-0.96983286,0.015411219,-0.28071672,-0.95966693,0.22372491,-0.70998709,-0.6677316,0.326205,-0.67066503,0.66618219,0.52594033,-0.765084,-0.37152826,0.52022605,-0.70660453,-0.47966124,0.60629335,-0.66576228,-0.43493558,0.91654788,-0.27568397,0.28972113,0.31307819,-0.034309977,0.94910741,0.80381548,-0.036210514,0.59377561,0.40513203,0.0045986956,0.91424663,0.29611027,0.1022457,0.94966548,0.93994639,0.34120648,-0.00888352,0.82897515,0.49307033,-0.26397321,0.38532305,0.90206269,0.19444548,0.094936878,0.98679387,0.1312435,0.040594357,0.91980085,-0.39028001,0.019558728,0.99656383,-0.080485903,-0.11602322,0.99289815,-0.026303693,-0.089388171,0.5393662,0.83731348,-0.20715014,0.93767027,0.27903993,-0.25248783,0.71263718,0.65452131,-0.31164065,0.84391852,-0.4366711,-0.23215005,0.56048921,-0.79495799,-0.3524682,0.70558456,-0.61474922,-0.29466436,0.50611779,-0.81056629,-0.45486904,0.78051643,0.42882193,-0.66196263,0.5046431,0.55420287,-0.80954518,0.26211768,-0.52529128,-0.78180056,0.11840324,-0.61218344,-0.81831889,-0.16935527,-0.54924765,-0.77423738,-0.17228271,0.6089952,-0.52465084,-0.28402835,-0.80253934,-0.73960027,-0.51316868,-0.43548748,-0.32804989,-0.2452309,-0.91227467,-0.47038169,-0.77257058,-0.42646896,-0.078426364,-0.37955616,-0.92183861,-0.030008151,-0.2999448,0.95348447,-0.049002166,-0.73293144,-0.6785354,0.11776354,-0.90687857,0.40460228,0.49169223,-0.8534281,-0.17291392,0.39141421,-0.58024017,0.71422424,0.46573815,-0.64256868,0.60843526,0.66164114,-0.71767291,-0.21720172,0.76660848,-0.63717367,-0.079505669,0.78506797,-0.39294353,0.47881485,0.84966587,0.069246758,0.522755,0.8252779,0.11388096,0.55312522,0.91828265,0.15930927,0.36246039,0.96263563,0.23870407,-0.12787891,0.11130441,0.05067528,-0.9924935,0.775198,0.57364915,-0.26456514,0.71634381,0.5523493,0.42633531,0.61937675,0.62821834,-0.47086534,0.17341028,0.31955767,0.93156415,0.19431825,0.40589652,-0.89302208,0.31841906,0.81494965,0.48421728,0.20891942,0.97776536,0.01809903,0.071616934,0.92194318,-0.38064654,-0.023400334,0.98378523,-0.17781747,-0.061923713,0.93601068,-0.34648153,-0.059540368,0.79373562,-0.60534182,-0.11003787,0.99379045,-0.016498768,-0.089688631,0.68011379,0.7275996,-0.140053,0.98651875,0.084651678,-0.055106954,0.30829802,0.94969235,-0.18883871,0.97961037,0.068581805,-0.16861203,0.66469566,0.72783904,-0.3046888,0.46104825,0.83342621,-0.52302157,0.72764493,-0.44382575,-0.48751851,0.61887184,0.61589232,-0.46361597,0.47208296,-0.74979858,-0.41669919,0.31861684,-0.85137835,-0.32921693,0.15167157,0.93199354,-0.92631967,0.25030493,-0.28156583,-0.63819991,0.12203532,0.760137,-0.28947977,-0.040896172,-0.95631008,-0.9820345,-0.15900876,-0.10160934,-0.44767767,-0.093760066,0.88926585,-0.93119731,-0.35426386,-0.085841015,-0.64568676,-0.25524236,0.71968045,-0.67417051,-0.33696399,0.65722857,-0.58286712,-0.46999947,-0.66284721,-0.69711402,-0.69041837,-0.19327316,-0.55379784,-0.5597152,-0.61646318,-0.061037645,-0.06728361,-0.99586511,-0.64798078,-0.76161415,-0.0080500217,-0.23453953,-0.87472918,-0.42407554,-0.027842791,-0.82068518,-0.57070187,0.1305609,-0.90689559,0.40061733,0.039542406,-0.27337304,-0.96109499,0.17938198,-0.58280601,0.79256499,0.27835905,-0.81517928,0.507936,0.44450275,-0.83423027,-0.32630838,0.45986014,-0.78267679,0.41945882,0.23135251,-0.21879854,0.94794684,0.80079617,-0.54486774,-0.24868581,0.48707409,-0.2364005,0.84075777,0.7131006,-0.28652158,0.63983819,0.93014337,-0.36616751,-0.027471154,0.80882303,-0.29289765,-0.5099179,0.86109447,-0.19191087,-0.47083599,0.85434759,0.076273038,0.51407453,0.95246689,0.15421705,0.26272406,0.50032488,0.089146062,-0.86123632,0.69609706,0.38548727,0.60568015,0.80901334,0.46517161,0.35932267,0.8644322,0.49983688,0.054037601,0.77554004,0.55361097,-0.30340163,0.75374104,0.56072753,-0.34272304,0.69026969,0.52398583,0.49896554,0.67045986,0.6077466,0.42559093,0.53417289,0.53261107,0.65649431,0.29930423,0.31905273,0.8992343,0.47208632,0.82440453,0.31223657,0.44817174,0.84280142,0.29804003,0.21061885,0.97660178,-0.043458724,0.013581999,0.97975675,0.19973043,0.0069457531,0.99946186,0.032058428,-0.40690622,0.90774217,0.10213461,-0.34747148,0.70794796,-0.61487661,-0.29462935,0.56358549,-0.77172854,-0.3069519,0.43661357,0.8456649,-0.35852989,0.49839779,-0.78933894,-0.23464474,0.3064269,0.92252068,-0.61943327,0.78065678,0.082930225,-0.65085418,0.72964154,0.20979052,-0.25831933,0.25575891,-0.93158923,-0.60165217,0.59433497,0.53364839,-0.75685833,0.34052029,0.55786324,-0.50666562,0.18932274,-0.84109859,-0.71135184,0.15886724,0.68464572,-0.38849612,0.047127966,-0.92024438,-0.44953663,0.0098081796,-0.89320805,-0.35520969,-0.0040752827,-0.93477777,-0.93051655,-0.017364277,0.36583799,-0.48073757,-0.1150054,-0.86929002,-0.69695556,-0.17047444,-0.69655683,-0.9326368,-0.34945096,0.089847792,-0.72764244,-0.38345359,0.56877045,-0.83457011,-0.55070426,-0.014749669,-0.59485375,-0.5385972,-0.59670937,-0.22977427,-0.28949312,-0.92919186,-0.47833414,-0.74062153,0.47188579,-0.33598108,-0.65793317,0.67397378,-0.29736064,-0.65617136,-0.69355302,-0.12437937,-0.3482661,-0.92910737,-0.18850216,-0.9818455,0.021127101,-0.063051113,-0.63888827,-0.76671138,0.015398098,-0.91083647,-0.41248009,0.201376,-0.97937023,-0.016782989,0.19977404,-0.92224568,0.33098829,0.196689,-0.76010622,0.61931573,0.099108483,-0.34853064,-0.93204286,0.34702301,-0.82392212,0.44802608,0.30573758,-0.70196387,-0.64325054,0.23957775,-0.52156385,0.81888562,0.44096858,-0.88769065,0.13248402,0.33875395,-0.4436662,0.8297024,0.096492779,-0.11673295,-0.98846475,0.67268365,-0.68646104,-0.27616653,0.60030042,-0.50653186,0.61892235,0.077037605,-0.023902771,0.99674162,0.26644463,-0.053462242,0.96236638,0.97597994,-0.080463739,-0.20245679,0.98892684,-0.078068591,0.12621015,0.46495353,0.0085779453,0.88529353,0.98143017,0.17617318,-0.075880328,0.76893102,0.15015663,-0.62144836,0.89159922,0.19452902,-0.40891232,0.72972197,0.31833997,0.60511611,0.86851468,0.38133019,0.31665366,0.50986609,0.36675021,-0.77815863,0.44474448,0.81348659,0.37475581,0.37635922,0.89084718,0.25445048,0.20334617,0.97340429,-0.10551977,0.018620556,0.85058959,0.52550035,0.0017892129,0.64379338,0.76519728,-0.016140985,0.73139001,0.68176838,-0.24007394,0.95523262,0.17290216,-0.31358861,0.93371348,-0.1727464,-0.33905923,0.93954906,0.047816345,-0.30571606,0.76913051,-0.56122718,-0.38643149,0.90930584,-0.15438135,-0.41653116,0.82450834,-0.38299841,-0.40269974,0.68621039,-0.60576252,-0.42474721,0.50133792,-0.75382365,-0.53178547,0.548235,0.64547858,-0.31221004,0.24280839,-0.91846011,-0.7034699,0.48535893,0.51918861,-0.84738766,0.52072813,0.10380929,-0.78282576,0.31685418,0.53552522,-0.60885308,0.17133764,-0.7745588,-0.98356744,0.17822869,0.028803211,-0.96789487,0.047989163,0.24673174,-0.99658907,-0.081372597,-0.013737836,-0.60118585,-0.19937543,-0.77383784,-0.87348764,-0.48650096,0.018334499,-0.73199077,-0.60465981,0.3139682,-0.58537306,-0.52285244,-0.61964805,-0.69594781,-0.67336498,0.24947193,-0.63254822,-0.70295508,0.32517213,-0.30181303,-0.38580797,0.87181483,-0.43685577,-0.80547981,-0.4004489,-0.090451479,-0.62783877,-0.77306986,0.10507756,-0.86123232,-0.49722993,0.15511176,-0.31694904,0.93567283,0.4981012,-0.85425512,0.14880652,0.48780278,-0.63952299,0.59418751,0.74148448,-0.16383341,-0.65066072,0.9021858,-0.20035158,-0.38199479,0.88830495,0.45473359,0.064278083,0.6267798,0.4169548,-0.65825206,0.64577334,0.50962287,-0.56856075,0.60417711,0.49341943,0.62570543,0.62774477,0.63825439,0.44560951,0.572572,0.68194293,0.45509905,0.48828502,0.65191516,0.58015891,0.54748625,0.82838657,0.11846731,0.47969656,0.72789231,-0.48996325,0.54225907,0.84020193,0.0039770929,0.22914514,0.50202164,0.83394651,0.38620431,0.85117388,0.3554564,0.1549111,0.40569266,0.90078633,0.2510394,0.96789481,0.012603859,-0.064097152,0.96880321,0.23939902,-0.20486491,0.8065256,0.55456904,-0.27863797,0.85497387,-0.43747065,-0.33852534,0.93270479,0.12434776,-0.28286974,0.44374592,0.85033774,-0.62462141,0.7723701,0.11529323,-0.38798632,0.46528669,0.7955972,-0.36760755,0.28518049,-0.88517613,-0.67719145,0.51245067,-0.52802088,-0.87772773,0.45630317,-0.14622397,-0.68172531,0.34076397,-0.6474029,-0.66061934,0.26503054,-0.7023823,-0.33002548,0.098505619,0.93881831,-0.96082737,0.27684896,0.012861512,-0.95569524,0.27392966,0.10774575,-0.454094,-0.024526165,-0.89061614,-0.55122434,-0.05297324,-0.83267374,-0.98155907,-0.18916818,-0.027517132,-0.55892762,-0.13179293,-0.81867609,-0.9130306,-0.2869935,0.28984454,-0.74634239,-0.23551591,0.62249923,-0.38294365,-0.12592911,-0.91514809,-0.49275391,-0.16535741,-0.85431289,-0.62796336,-0.28416866,-0.72450687,-0.18641096,-0.089569726,0.97838041,-0.77273983,-0.41595887,0.47942818,-0.72793023,-0.5715076,0.37880951,-0.2943524,-0.26676836,-0.91770982,-0.32201139,-0.30182834,-0.89733401,-0.70674905,-0.70296765,0.079638252,-0.34913342,-0.35358504,0.86780383,-0.38089467,-0.69152331,-0.61377093,-0.37294473,-0.75106889,-0.54480066,-0.29439647,-0.92774492,0.22939065,-0.1508717,-0.50938932,-0.84720732,-0.23655162,-0.94271321,0.23523421,-0.19074632,-0.76288448,-0.61775651,-0.14599478,-0.80614305,-0.57342733,-0.12830211,-0.78590749,-0.60488675,-0.032313613,-0.99921825,0.022775447,0.12186345,-0.58951884,0.79850913,0.2224463,-0.89199745,-0.39352025,0.24624631,-0.93893456,0.24034279,0.22552936,-0.667653,-0.70948994,0.18362126,-0.50267419,0.8447496,0.31628197,-0.81260897,-0.48952261,0.31222342,-0.59828207,-0.73795332,0.31486122,-0.59142353,0.74234804,0.48754408,-0.75066855,0.44586713,0.22195743,-0.32443223,0.91949912,0.58431612,-0.70516878,0.40163623,0.36288133,-0.41609833,0.83377414,0.61695923,-0.69632721,-0.36672842,0.14893164,-0.14196596,0.97860361,0.70962171,-0.22250844,0.66852601,0.76599665,-0.22311151,0.60288505,0.70796594,-0.15547488,0.68892074,0.99340983,-0.1125295,-0.021771873,0.96995845,0.20745008,0.12706322,0.46515276,0.1325391,0.87525214,0.92625907,0.35714163,-0.12039099,0.40309545,0.1569333,-0.90160191,0.82833037,0.34472127,-0.44162885,0.86886488,0.45648785,0.19155328,0.59706232,0.54828591,-0.58557591,0.099379439,0.11009565,0.98894018,0.47692289,0.53166983,-0.69990838,0.2114961,0.82342686,-0.52653357,0.11907418,0.81655777,0.56484931,0.112873,0.99327811,-0.025657098,0.020758428,0.94094928,0.33791054,-0.12931154,0.97603094,-0.17504894,-0.11844595,0.87686478,-0.46591707,-0.1672175,0.83334659,-0.5268508,-0.19941677,0.96847215,0.14931392,-0.39881944,0.85307839,-0.33645254,-0.52564491,0.74697567,0.40709308,-0.57884857,0.80479926,-0.13127258,-0.48386074,0.61025722,-0.62726781,-0.62406345,0.76315987,0.16772542,-0.45452347,0.48468066,-0.74732394,-0.50670779,0.44997671,-0.73536941,-0.73934389,0.54991191,-0.38854536,-0.95140767,0.30603099,-0.034182855,-0.11200664,-0.024376956,0.99340841,-0.32625106,-0.10577937,-0.93934603,-0.89163145,-0.3908173,-0.22859395,-0.11377531,-0.054501253,0.99201048,-0.69986173,-0.35015268,0.62256457,-0.57043518,-0.28895948,-0.76883426,-0.5533633,-0.31720582,-0.770175,-0.15700386,-0.15726298,-0.97499648,-0.18177855,-0.4523457,0.8731208,-0.2990672,-0.84001328,0.45269913,0.3470137,-0.60506118,0.7165769,0.45482651,-0.46921564,0.75694751,0.16942641,-0.14766145,0.97441818,0.40305424,-0.2441248,-0.88201494,0.90553399,-0.40536884,-0.12523701,0.91248721,-0.32332295,0.25065786,0.70066734,-0.13409314,-0.70077408,0.92329054,0.031358409,-0.38282009,0.56906215,0.082946335,0.81810034,0.95069149,0.30764095,-0.039277689,0.56918402,0.53812146,-0.62165493,0.67190083,0.63531737,-0.38068505,0.69218823,0.69664159,0.18858935,0.44316716,0.49826435,0.74520836,0.56901108,0.66647091,-0.48170834,0.55194999,0.6962336,-0.45892264,0.6026066,0.79072345,0.10780405,0.35818275,0.58196205,-0.73008581,0.42864922,0.74753359,-0.50739865,0.19198699,0.86156509,0.46994318,0.12404363,0.95626635,0.26489212,0.082401765,0.99658176,0.0058936988,0.032806544,0.55655132,0.83016526,0.01813233,0.54205037,-0.84015035,-0.014385808,0.70597779,-0.70808785,-0.038534718,0.92513251,0.37768362,-0.15106312,0.97318843,0.173448,-0.23847566,0.83848169,0.48997736,-0.20380331,0.57903725,0.78941756,-0.23064064,0.51329385,0.82664038,-0.27302913,0.59981519,0.75211491,-0.39251516,0.83248301,0.39102926,-0.18643124,0.37121248,0.90963987,-0.22122855,0.19251592,0.95603114,-0.4296309,0.24306914,-0.86967505,-0.91024614,0.40792705,-0.071045598,-0.47720136,0.2099943,-0.85333537,-0.47267271,0.13712796,-0.87050355,-0.96682237,0.13949526,-0.21399899,-0.87885132,0.016610813,-0.47680651,-0.29668224,-0.074698525,-0.9520503,-0.30574459,-0.086357572,-0.94818913,-0.47736683,-0.28525395,-0.83111437,-0.65537954,-0.45634334,-0.60185415,-0.74284252,-0.62722856,0.23402846,-0.56302604,-0.77840899,0.27763489,-0.41572118,-0.61853091,-0.66677988,-0.296712,-0.5249315,0.79775241,-0.46483913,-0.88334247,0.060254921,-0.46202265,-0.87987783,0.11113088,-0.27915583,-0.59315041,0.75514542,-0.27534507,-0.74723141,-0.60483908,-0.19110942,-0.8410426,-0.50608749,-0.089340125,-0.4966374,-0.86334792,-0.077887689,-0.56581253,-0.82084693,-0.052246844,-0.96574122,-0.25419316,-0.015459861,-0.96203502,-0.27248783,0.13893494,-0.9901468,-0.017504167,0.15329895,-0.91836444,-0.36483722,0.18106496,-0.82070927,0.54189646,0.173287,-0.60473492,-0.77734632,0.27220844,-0.92360041,-0.26993491,0.26326164,-0.81304944,0.51927248,0.36585416,-0.7606694,0.53622085,0.55903633,-0.54720578,-0.62293195,0.42966314,-0.41567121,0.80162774,0.6272705,-0.49992094,0.59716897,0.85604104,-0.43685455,0.27631838,0.7050244,-0.25105125,0.66326003,0.73004347,-0.25106464,0.63561237,0.98399327,-0.041911928,-0.17320689,0.99800825,-0.030817354,-0.055043904,0.89701854,0.053699941,-0.43871864,0.49596352,0.066025661,0.86582955,0.98795796,0.15447086,-0.0088218108,0.72109818,0.14327855,-0.67785594,0.73054671,0.33469497,-0.5952149,0.70155911,0.35996197,0.61501398,0.56653607,0.29777866,-0.76835197,0.83920007,0.54288915,-0.031852955,0.2634441,0.24562077,0.93288137,0.41698953,0.5052774,0.75552265,0.45284407,0.86095212,0.23171901,0.19361738,0.44049466,-0.87662807,0.11062972,0.27909978,0.95386812,0.13151984,0.84571225,0.51717824,-0.078170945,0.47099339,0.87866633,-0.18045341,0.78620623,-0.59102988,-0.24019257,0.79338472,0.55932835,-0.24969773,0.76360701,-0.59544553,-0.34740417,0.8714513,0.34624121,-0.37472323,0.72566936,-0.5770498,-0.5558227,0.76950224,0.31452731,-0.58549936,0.77260899,0.24549103,-0.62110184,0.52844772,0.57877069,-0.72326535,0.093552272,0.68420406,-0.98370967,0.11733357,-0.1361915,-0.37895843,0.036809234,-0.92468135,-0.92244353,-0.081435763,-0.37744689,-0.8006197,-0.58176256,0.14338906,-0.31162223,-0.47341473,0.82387504,-0.16738988,-0.58840652,-0.79104892,-0.1377463,-0.64313946,-0.75325799,-0.11879631,-0.81355919,0.56921778,-0.093987205,-0.95870234,-0.2684329,-0.027939273,-0.756795,-0.65305492,0.022562428,-0.80849898,-0.58806491,0.5766884,-0.75224659,-0.31867783,0.71979982,-0.6863761,0.10380789,0.38431183,-0.25706057,0.88669289,0.20935988,-0.11717233,-0.97079302,0.55464869,-0.2010355,0.80743393,0.96436066,-0.25151904,-0.082138191,0.72264154,0.20348129,0.66059411,0.75009884,0.24646081,-0.61368461,0.87173114,0.38771454,0.29960349,0.28396239,0.2486512,0.92603345,0.54000091,0.73273202,0.41412897,0.38902925,0.60559967,0.69419398,0.43042439,0.89556069,-0.11272042,0.31430323,0.67587464,0.66663855,0.36594955,0.86896965,-0.33312562,0.30874871,0.75161263,-0.58288309,0.19901721,0.74672619,0.63465908,0.058498652,0.99807916,0.020393421,0.033910949,0.98699108,-0.15715807,0.0151327,0.92146777,-0.38815996,-0.15548175,0.96059278,-0.23040602,-0.25768874,0.95510304,-0.14620087,-0.24087012,0.7100639,-0.66165765,-0.31889543,0.92982311,-0.18367004,-0.32113648,0.78640436,-0.52767372,-0.22398012,0.5373169,-0.81309499,-0.42802173,0.90155436,0.06322298,-0.55409096,0.80322803,-0.21865028,-0.25492401,0.34494963,-0.90334019,-0.55992803,0.69467845,-0.45155559,-0.66703723,0.68731495,-0.28750566,-0.65586991,0.6073935,0.44822739,-0.60926122,0.56391839,0.55749153,-0.7788816,0.58199095,-0.23373057,-0.67091082,0.42960531,-0.60441538,-0.53464947,0.32816272,-0.77875488,-0.82517469,0.40005931,0.39879729,-0.36376325,0.12336232,0.92328654,-0.95374613,0.2957324,-0.053950556,-0.45298603,0.1331207,-0.88152285,-0.96988313,0.24357076,-0.000014520267,-0.95151154,0.10543331,0.28898027,-0.58614649,0.049456533,-0.80869422,-0.83707536,0.0025848506,0.5470815,-0.48518101,-0.010489474,-0.87435082,-0.41120479,-0.011458571,-0.91147096,-0.99855833,-0.042236476,0.033126011,-0.97362442,-0.10747486,-0.20125765,-0.75920685,-0.15099705,0.6330915,-0.93857645,-0.29482842,-0.17930548,-0.1117404,-0.061715709,-0.99181916,-0.28768603,-0.41064755,-0.86521982,-0.13631703,-0.19817894,-0.9706404,-0.48934843,-0.80647024,-0.3318793,-0.16302534,-0.33833113,-0.92679814,-0.20843827,-0.70038962,-0.68264769,-0.20745937,-0.78266508,-0.58685261,-0.1719541,-0.82626628,-0.53639148,-0.1504703,-0.76697647,-0.62378345,-0.0127767,-0.9999177,0.0011639129,0.021654608,-0.16826188,-0.98550445,0.19151617,-0.63707796,-0.7466279,0.39639555,-0.68474539,-0.61155075,0.44010896,-0.61273074,0.65640319,0.68073518,-0.68851474,-0.2500941,0.82204753,-0.34148832,-0.45565731,0.95899037,-0.1057796,-0.26296035,0.25283073,-0.023043515,0.96723607,0.39355418,-0.023015965,0.91901326,0.87505847,-0.039522394,0.48240093,0.45463424,-0.0052974187,-0.89066248,0.21673045,0.020371661,-0.97601891,0.5457202,0.28696977,0.78729779,0.85759672,0.51428847,-0.0059366347,0.76380305,0.49898712,0.40941026,0.22014788,0.27578491,-0.9356696,0.074218907,0.23129561,0.9700484,0.16977298,0.93506458,-0.31117738,0.092484531,0.98911054,-0.11448563,0.042543392,0.99611312,0.077127948,0.031222137,0.93996054,0.33985198,-0.25389021,0.96519011,0.062831703,-0.2562118,0.91725568,0.30495497,-0.269234,0.94988926,0.15881889,-0.17812718,0.58978401,-0.78767095,-0.19657343,0.57615753,-0.79334822,-0.32865374,0.54317024,-0.77262721,-0.48330403,0.78631689,0.38486745,-0.30645002,0.43280808,-0.84780042,-0.57449425,0.7769046,-0.25763463,-0.53554947,0.64784778,0.54173796,-0.4800452,0.5139023,0.71095782,-0.60199637,0.64217071,0.47457049,-0.51943421,0.44552583,0.72917408,-0.6567513,0.47073561,-0.58913982,-0.31596282,0.22233998,0.92235158,-0.48576808,0.17922115,-0.85551689,-0.83505518,0.093300418,-0.54219727,-0.44178156,-0.061962315,-0.89498029,-0.65415228,-0.2950205,-0.69645366,-0.67573079,-0.32563482,-0.66132432,-0.66769539,-0.32446127,-0.67000578,-0.34775556,-0.20255483,-0.91544394,-0.52557566,-0.33349019,-0.78265863,-0.79369023,-0.60815009,0.014466728,-0.43859458,-0.50407589,-0.74400423,-0.19359997,-0.56758025,-0.80023228,0.0621881,-0.93528997,-0.34837523,0.024146498,-0.36153555,0.9320456,0.25652205,-0.90859655,-0.3296191,0.55762694,-0.79635024,0.23426161,0.093986611,-0.12309045,0.98793484,0.49312909,-0.50807229,0.70617721,0.56838252,-0.41279986,0.71171454,0.80175813,-0.54070966,-0.25459175,0.80285991,-0.5388903,0.25497688,0.39611608,-0.23125875,0.88860083,0.88019961,-0.41507459,-0.23013417,0.93577244,-0.16752171,-0.31026829,-0.46832036,-0.48418263,0.73908269,-0.54578198,-0.66913705,0.50435865,0.38811538,0.10130746,0.91602579,0.95211222,0.30275628,0.042672703,0.91080581,0.30531476,0.27787707,0.87548852,0.33351087,0.34970038,0.78185191,0.37147651,0.50071228,0.83664214,0.49569895,0.2330504,0.71096988,0.68794869,0.1457684,0.65910027,0.72336629,0.2057378,0.50329828,0.5880504,0.63315683,0.57429885,0.81275523,-0.098029413,0.50174619,0.8121266,0.29782736,0.38089304,0.86514342,0.32626269,0.26256833,0.73977309,0.61951081,0.25549824,0.8460481,0.46789237,0.22205523,0.95074269,-0.21628641,0.098026577,0.97660291,0.19140935,0.074026448,0.99020993,-0.1183401,0.049673875,0.99621048,-0.071394511,0.041411985,0.9985173,0.035330621,0.015202068,0.98614129,0.16520975,-0.067377942,0.95586096,-0.28598956,-0.43395302,0.59208862,-0.67905511,-0.46306268,0.27487491,0.84262491,-0.67489429,0.32020683,-0.66481974,-0.16716149,0.059310258,-0.98414396,-0.92184594,-0.25201704,0.29442736,-0.92990981,-0.36719837,-0.020811264,-0.80511764,-0.40458981,0.43369653,-0.42362053,-0.21995266,0.87873003,-0.58903451,-0.62372306,-0.51381698,-0.34765255,-0.47531274,0.80821748,-0.41225029,-0.87416701,-0.25667438,-0.1407034,-0.76640658,0.62675634,-0.079977373,-0.99071279,0.10996268,-0.035259092,-0.53546993,-0.84381796,0.026799619,-0.58312479,0.81194043,0.38820686,-0.83138388,-0.39761323,0.52999038,-0.84792109,-0.01183341,0.46670806,-0.55593692,0.68783554,0.60105235,-0.53497442,-0.59374947,0.74831994,-0.63424609,0.19429145,0.12830493,-0.1031383,0.9863571,0.66305905,-0.49854984,-0.55839122,0.78167312,-0.43056094,-0.45122546,0.80809222,-0.41114507,0.42183728,0.85236313,-0.32887398,-0.40659439,0.90537497,-0.23103754,-0.35625526,0.90835065,-0.21189187,0.36055643,0.5232452,0.014293345,0.8520623,0.97192842,0.20390398,0.11738108,0.67501118,0.26694919,0.68782122,0.86997359,0.404195,0.28244,0.73720199,0.62723546,-0.25121484,0.55361242,0.64015976,0.5326432,0.41080699,0.53835907,-0.73580373,0.34209085,0.46084286,0.8189003,0.32345743,0.93380993,-0.15288659,0.28046833,0.95982865,0.008153712,0.15651992,0.87416335,-0.45971726,0.078704372,0.86923652,0.48809168,-0.0049205938,0.65657431,0.7542453,-0.36404893,0.92592857,-0.10062139,-0.34412553,0.85479258,-0.38846784,-0.34963419,0.61154595,-0.7097658,-0.41976706,0.54823439,-0.72334962,-0.50719766,0.5431065,0.66916803,-0.61918385,0.54186694,0.56832349,-0.66306473,0.34286269,-0.66542493,-0.48282387,0.19312324,-0.8541572,-0.47675071,0.15469813,-0.86531916,-0.79455898,0.057465745,-0.60446151,-0.48054691,-0.1455552,-0.86480538,-0.73833661,-0.35503466,0.57341908,-0.85270701,-0.49898156,0.1546226,-0.52626185,-0.57493012,-0.62650125,-0.56295105,-0.6368615,0.52677657,-0.52815308,-0.81501063,0.23835267,-0.16974664,-0.63851073,-0.75065979,-0.1847411,-0.77451131,-0.60498178,-0.21340738,-0.92894537,-0.30251906,-0.18740318,-0.949461,-0.25180123,-0.12226404,-0.85976986,-0.4958299,-0.1082357,-0.79361174,-0.59871984,0.017104682,-0.80984711,-0.58639159,0.042766699,-0.83329904,0.55116578,0.10266626,-0.3827608,-0.91812516,0.14241483,-0.33886441,-0.92999405,0.40230333,-0.89439181,0.19548741,0.41458068,-0.87812161,0.2387997,0.70123283,-0.70082969,0.13080616,0.67088496,-0.46100888,0.58084782,0.88567829,-0.45829936,-0.074402009,0.50662181,-0.18235942,-0.84266208,0.7335232,-0.13466355,0.66619024,0.27447584,-0.024794772,0.96127428,0.98751736,0.035746991,-0.15340021,0.8958632,0.10700278,-0.43125345,0.48744239,0.091869711,-0.86830863,0.80287809,0.20852282,0.55848455,0.58511916,0.16789019,0.79337787,0.44250284,0.30434175,0.84354451,0.22860828,0.16438453,-0.95953946,0.59581528,0.50936847,-0.62092505,0.50626604,0.83651751,-0.20960237,0.2993959,0.89844284,0.32118927,0.2396129,0.72389936,0.64695855,0.1565336,0.81100997,0.56370211,0.15769727,0.97658211,-0.14635217,0.095186357,0.74332436,0.6621242,0.089072694,0.99408261,-0.062175787,0.022972071,0.99959317,0.016904716,-0.063250564,0.94633949,-0.31692417,-0.06730691,0.99404738,-0.085671429,-0.16835263,0.9597843,0.22465859,-0.29048964,0.87579304,-0.38548972,-0.35044257,0.93657912,0.0030914198,-0.3348238,0.71830583,-0.60986044,-0.4849633,0.82738749,0.28326761,-0.36916662,0.29870102,-0.88005324,-0.46989376,0.32355617,-0.82128634,-0.31646035,0.094187352,-0.94391821,-0.78010944,0.21068817,0.5891008,-0.42245284,0.075857654,-0.90320497,-0.5468023,-0.10419323,-0.83075328,-0.74993131,-0.1729601,-0.63850437,-0.96357794,-0.26089247,-0.058759434,-0.48518013,-0.35189186,-0.80048258,-0.61523476,-0.47714159,-0.62755245,-0.29717739,-0.36250105,0.88333379,-0.071191334,-0.20415334,0.97634687,-0.28244805,-0.83210652,-0.47730686,-0.19418293,-0.64820301,0.73629196,-0.12508982,-0.43204845,-0.89313306,-0.17586839,-0.89830912,0.40263014,-0.067961947,-0.54154775,-0.83791838,-0.0051606666,-0.87663536,-0.48112764,0.073506084,-0.9959144,-0.05245337,0.096240749,-0.97329326,0.20841775,0.21394294,-0.97139912,-0.10301535,0.19668521,-0.80568391,0.5587382,0.27323579,-0.57402246,0.771907,0.4858396,-0.81441188,0.31732188,0.6154306,-0.73943126,0.27292231,0.15516227,-0.18160425,-0.97105333,0.67689444,-0.72952106,-0.098045553,0.16796385,-0.17585947,0.9699802,0.76400235,-0.62456162,-0.16193577,0.64095456,-0.22504129,-0.73384853,0.83130116,-0.25673828,-0.49297448,0.89608059,-0.1272407,0.4252639,0.22616095,-0.021383662,-0.97385521,0.98198755,-0.086273477,0.1680992,0.6989075,0.12281258,-0.7045888,0.36465774,0.21667913,0.90557986,0.82726681,0.53400962,-0.17453752,0.79133866,0.61136174,0.0044658609,0.75868981,0.59757962,0.25940002,0.40169124,0.84470288,-0.35372473,0.38148074,0.85220507,0.35807675,0.11155898,0.46913144,0.87605382,0.055558067,0.96050551,0.27265816,-0.056007157,0.77220577,-0.63289924,-0.096121414,0.971285,0.2176376,-0.25945412,0.88574047,0.38489918,-0.28694116,0.91624544,-0.27956941,-0.30818263,0.83631709,-0.45342827,-0.37782431,0.57895562,-0.72253663,-0.17408779,0.24707819,0.95322915,-0.50218805,0.54636291,-0.67029452,-0.60107905,0.28205221,0.74776369,-0.37832623,0.16171463,-0.91143713,-0.68765871,0.29377964,0.66394203,-0.14402022,-0.006918729,0.98955056,-0.73985262,-0.097287586,-0.66569755,-0.93615936,-0.1597885,-0.31316654,-0.95203082,-0.22993521,-0.20190868,-0.24263758,-0.063641632,0.96802725,-0.89380047,-0.26626121,0.36086796,-0.52749703,-0.19409606,-0.82708742,-0.48648336,-0.22379866,-0.84454017,-0.49367781,-0.23795013,-0.83645798,-0.88210523,-0.46120842,0.095797487,-0.50468098,-0.28133394,-0.8161791,-0.70331446,-0.55116112,0.44896568,-0.68692303,-0.64845999,0.32807985,-0.54790088,-0.78968394,0.27605054,-0.36218905,-0.5769608,-0.73207604,-0.41252073,-0.74094864,-0.52992618,-0.23647917,-0.97155901,0.012275877,-0.17363767,-0.93874412,0.29767337,-0.050211712,-0.61611631,0.7860531,-0.021819791,-0.82133019,-0.57003562,0.10612404,-0.6037052,0.79011247,0.27618494,-0.91957175,-0.27948107,0.25942138,-0.59881777,0.75770563,0.40948611,-0.80532641,0.42868462,0.44979624,-0.87299247,-0.18859346,0.42621637,-0.36648369,0.82706065,0.82362495,-0.54374612,-0.16118964,0.86036605,-0.49607216,0.11697296,0.78165871,-0.33271926,0.52754863,0.44889429,0.064554639,-0.89125003,0.023734767,-0.99875589,0.043855877,0.17840284,0.0072671344,0.9839307,0.96027025,0.18593943,-0.20810473,0.87706181,0.36275502,0.31491488,0.59570806,0.30766327,0.74194017,0.87438459,0.48415901,0.032274591,0.76657468,0.47354036,0.43373125,0.75589912,0.48714843,0.43738191,0.60566537,0.78684977,-0.11847744,0.51050504,0.72097404,-0.46859475,0.36089988,0.89170724,0.27314735,0.3623546,0.91757675,0.16356053,0.32722758,0.85787282,0.3962024,-0.024199947,0.86991235,0.49261229,-0.16037335,0.94341394,-0.2902594,-0.13589337,0.49771254,-0.85663015,-0.26843222,0.9382965,0.21804546,-0.42062818,0.89599164,-0.14237599,-0.32875876,0.5680219,-0.75449904,-0.55290509,0.75188393,-0.35911909,-0.59604041,0.78489793,-0.16932533,-0.68621507,0.72120677,-0.094708344,-0.78336128,0.6210413,-0.025549983,-0.84395185,0.53129138,-0.073991542,-0.88343032,0.41532791,-0.2169184,-0.53049448,0.24591055,0.81123585,-0.90658582,0.38645897,0.16956299,-0.89626883,0.34279878,-0.28140928,-0.76251046,0.18827393,0.61897554,-0.88778418,-0.041744081,0.45836305,-0.80490884,-0.21772806,-0.5520111,-0.42842168,-0.11838089,0.89579062,-0.75778137,-0.23763911,0.60769652,-0.76967303,-0.27661087,0.57540409,-0.87168586,-0.37022315,-0.32108967,-0.84067417,-0.47885964,0.25290391,-0.78859622,-0.60925723,0.083196364,-0.55861214,-0.71273074,0.42422561,-0.43114462,-0.66068206,-0.61450267,-0.14515708,-0.98053938,0.13218147,-0.070149666,-0.84314557,-0.53308964,-0.026478218,-0.76578912,0.64254644,0.0022132628,-0.83663006,0.54776386,0.075232436,-0.86565907,0.49494894,0.4660047,-0.79589734,-0.3865062,0.34052127,-0.52171717,0.78221254,0.62617923,-0.73790671,0.25178018,0.65829516,-0.72074246,0.21720448,0.57489489,-0.56883416,0.58815267,0.47331668,-0.37397322,0.7975684,0.31901577,-0.12720189,0.93917443,0.47736212,-0.14352698,0.86690565,0.67731611,-0.013129066,0.73557496,0.73534821,-0.0094321971,0.67762382,0.98606215,0.06454219,0.15334842,0.41208939,0.23446488,0.88045928,0.60121634,0.65870865,0.45237355,0.45424849,0.85161197,0.2615633,0.19397088,0.74433862,-0.6390112,0.17110554,0.77683319,0.6060141,0.052309376,0.36073833,-0.931199,-0.15125057,0.86769824,0.47352195,-0.20064442,0.76145356,0.61638486,-0.31409165,0.93234991,-0.17908123,-0.3014143,0.86749812,-0.39572268,-0.32032988,0.64742092,-0.69154532,-0.34903724,0.63113001,-0.69271056,-0.25073317,0.42690232,0.8688425,-0.43864131,0.59980619,0.66919828,-0.37679568,0.40032374,-0.83532384,-0.3945268,0.34509546,-0.85162065,-0.53473894,0.46456613,-0.70585592,-0.84774255,0.52867702,0.042815523,-0.83544881,0.41427841,0.36110759,-0.80226791,0.28335823,0.52542775,-0.4275032,0.069902571,0.90130719,-0.90254724,0.062243549,0.42606833,-0.43852271,-0.052706187,-0.89717328,-0.45092738,-0.082691162,0.88872193,-0.92549359,-0.17079959,-0.33806675,-0.97335956,-0.22299694,0.053324856,-0.55265806,-0.26929046,0.78870255,-0.22134495,-0.13893259,-0.96524823,-0.62667638,-0.50135335,0.5965916,-0.19765074,-0.22060812,-0.9551263,-0.36647955,-0.53633622,-0.76028692,-0.12688947,-0.25605962,0.95829668,-0.12594409,-0.36252042,-0.92342679,-0.27025597,-0.78335124,0.55975221,-0.31934447,-0.94747144,0.017803955,0.12539688,-0.95962995,-0.25176572,0.10050773,-0.73733246,-0.66801125,0.12740315,-0.75913621,0.63834211,0.092997011,-0.47505833,0.87502637,0.28976817,-0.88377664,0.36738706,0.22445226,-0.64402711,0.73133458,0.31696684,-0.37675055,0.87039706,0.55950955,-0.66323747,0.49705646,0.47845784,-0.36601218,0.7981937,0.27095711,-0.1802279,-0.94556869,0.48622797,-0.27958298,-0.82789837,0.70354026,-0.08810229,-0.70517309,0.69447305,0.14186019,0.70539554,0.95552471,0.27795378,0.098560806,0.48292359,0.21310836,-0.84933482,0.33262715,0.31103776,-0.89028911,0.25454414,0.29798854,-0.92000549,0.61353527,0.75879344,0.21864811,0.56613331,0.72751042,0.3875844,0.12190294,0.46799588,0.87528254,0.12295116,0.60282823,-0.78834075,0.09768147,0.98982553,-0.10345892,0.047384865,0.93319183,0.35624104,0.012192035,0.91168271,0.41071401,-0.04095845,0.3306994,0.94284692,-0.12651989,0.77618888,-0.61767592,-0.18612749,0.78954396,0.58478791,-0.23732522,0.97019809,-0.048912302,-0.13252492,0.51973845,0.84398406,-0.13943851,0.42893729,-0.89250754,-0.27304865,0.51845385,0.81033946,-0.44282575,0.83330144,0.3309291,-0.48407053,0.86203328,0.15024761,-0.52566,0.80179823,0.28425546,-0.58792799,0.80472269,-0.082231828,-0.26934016,0.30847644,-0.91230377,-0.71447811,0.2040578,0.66923945,-0.70772954,0.18849072,0.68087454,-0.73280948,-0.076325077,0.67613959,-0.90852534,-0.10050763,0.40556123,-0.51269821,-0.37023821,-0.77463811,-0.29014227,-0.23870731,-0.9267342,-0.6489723,-0.69192605,0.31634363,-0.26599354,-0.52934618,-0.80563023,-0.29680949,-0.91962237,-0.25729133,-0.1658292,-0.93781275,-0.30497199,-0.02496529,-0.81247152,-0.58246611,-0.0045535745,-0.80604026,0.59184319,0.063537508,-0.82554809,-0.56074356,0.30183634,-0.88861034,0.3453498,0.33464635,-0.92088318,0.19996497,0.31862319,-0.82462896,-0.46740384,0.32444983,-0.73039793,0.60104174,0.3932313,-0.70406823,0.59131808,0.59880329,-0.77826988,0.18902544,0.74407332,-0.27239499,0.61004579,0.63379799,-0.18885605,-0.750089,0.76245814,-0.017838479,-0.6467916,0.53849096,-0.010424049,0.8425668,0.56920291,0.089020966,-0.81736364,0.46069169,0.1048211,0.8813488,0.94028911,0.31784355,0.12178612,0.79156955,0.27377695,0.54631844,0.17993185,0.1069958,0.97784274,0.74830107,0.65825384,0.082142553,0.24558475,0.73317713,-0.63414464,0.30532909,0.9501876,0.062591312,0.23773761,0.96988088,-0.053027408,0.22481886,0.94758162,-0.22703646,0.020600307,0.19277925,-0.98102589,0.072203147,0.8508725,0.52038707,0.05381741,0.98167597,-0.18280038,0.026543683,0.82941784,0.55799775,-0.0038970142,0.88641835,0.46286858,-0.004801728,0.90318989,-0.42921437,-0.0078959222,0.643998,0.76498643,-0.048595545,0.97058656,0.23579694,-0.079192588,0.96256062,-0.25924039,-0.1804897,0.89938933,-0.39814859,-0.33734307,0.86375949,-0.37432498,-0.57161178,0.81763029,0.068852578,-0.61650421,0.77350973,0.14698726,-0.51651253,0.51484277,-0.68421614,-0.68455828,0.62537465,0.37454841,-0.63384598,0.57753067,0.51448771,-0.60817704,0.50808802,-0.60989118,-0.81657581,0.33069665,-0.4731212,-0.65475606,0.26472396,-0.7079659,-0.91591657,0.33862303,-0.2154792,-0.61981961,0.0022141909,-0.78474119,-0.29014084,-0.10462385,-0.95124768,-0.879755,-0.44450898,-0.16865024,-0.60070812,-0.4966059,-0.62652401,-0.57684119,-0.79315142,0.1953588,-0.3949978,-0.65812758,-0.64097178,-0.32444213,-0.55673718,0.76470976,-0.39393242,-0.84547945,0.3605298,-0.14362295,-0.53007796,0.83569719,-0.085147584,-0.68895477,-0.71978553,-0.087517424,-0.85462279,0.51182086,0.044472329,-0.77835852,0.62624295,0.15190015,-0.7887772,0.5956147,0.094694584,-0.47399008,-0.87542352,0.062957334,-0.28558613,-0.95628288,0.21828936,-0.80177942,0.5563268,0.36226588,-0.74392917,0.56154503,0.40193446,-0.77879914,-0.48158134,0.19234171,-0.36551085,-0.91071757,0.69147561,-0.71806411,0.079027971,0.63551228,-0.62585577,-0.45213792,0.86462803,-0.43851314,-0.24520318,0.42215002,-0.19014635,0.88635982,0.32705059,-0.095854298,-0.9401329,0.6293793,-0.10861211,-0.76947067,0.95183421,0.11776248,0.2830965,0.97671341,0.12136989,0.17691883,0.76944463,0.14509195,-0.62201551,0.15209786,0.077312369,-0.98533702,0.12783526,0.080989134,0.98848313,0.56346401,0.37309771,0.73709322,0.33171885,0.22057098,0.91723009,0.71172148,0.66678363,-0.22102518,0.48793534,0.47348286,0.73330286,0.6922988,0.7208778,0.032520319,0.49759344,0.78044614,0.37855594,0.46981485,0.79018489,0.39355031,0.27420365,0.46884201,-0.8396425,0.13725084,0.27452262,0.95173501,0.074550956,0.20036088,-0.97688161,0.067504428,0.26257846,0.96254647,0.13882639,0.81389991,-0.56417565,0.040749119,0.54924142,0.83466962,-0.068595992,0.91988566,-0.38614112,-0.048960846,0.50710242,0.86049403,-0.10215438,0.91255852,0.39598162,-0.10651694,0.89356693,-0.4361104,-0.16153743,0.98106205,0.10687806,-0.15744885,0.90205533,-0.40187815,-0.20344973,0.85461144,-0.47775255,-0.36717806,0.89342577,-0.25878692,-0.35928005,0.74713955,0.55919616,-0.34304956,0.64741108,-0.68057027,-0.47400853,0.83335073,0.2843281,-0.48517592,0.84387925,0.22906796,-0.36045867,0.48526645,-0.79660908,-0.55111249,0.72729271,0.40904808,-0.12389634,0.14352878,-0.98186006,-0.57469466,0.51890104,-0.63282522,-0.48124511,0.38974293,-0.78517743,-0.60088266,0.48540872,-0.63507354,-0.33245836,0.26270974,-0.90578973,-0.46484357,0.29995131,-0.83303641,-0.85285195,0.50173176,0.14459875,-0.79612999,0.39767888,0.45610147,-0.9197838,0.38695953,-0.065269306,-0.84216507,0.26595562,0.46906887,-0.98720301,0.15945189,0.0023050412,-0.95336923,0.11179758,-0.28033624,-0.99077304,0.06963729,-0.11627309,-0.95902723,0.045033293,0.27971194,-0.53844797,0.013648701,-0.84254822,-0.076162333,-0.00077918715,-0.99709513,-0.33900146,-0.01892918,-0.94059539,-0.95520257,-0.071218683,-0.28725588,-0.42971264,-0.053374738,-0.90138681,-0.98194239,-0.13519532,0.13233049,-0.57892047,-0.1852427,-0.79406311,-0.77129974,-0.419999,-0.47822332,-0.69436093,-0.620981,-0.36365574,-0.47558982,-0.54794536,-0.68816437,-0.44853625,-0.63292114,-0.63105155,-0.33014422,-0.51248119,-0.79269655,-0.34782437,-0.93062004,-0.11386201,-0.25667381,-0.74325756,-0.61780803,-0.20877015,-0.76406373,-0.61042743,-0.016151872,-0.061320885,-0.99798741,-0.11029405,-0.8899122,-0.44259632,-0.074701369,-0.8520739,0.51806348,-0.02593192,-0.82750906,-0.56085318,-0.017072162,-0.80392851,-0.59448086,0.064079445,-0.9452556,-0.31997763,0.25482713,-0.83986749,-0.47925539,0.57247619,-0.81970524,-0.018823879,0.56786565,-0.53480274,0.6257113,0.71795388,-0.62901751,-0.29812615,0.64847842,-0.53758671,0.53895851,0.91015878,0.14462336,-0.38819464,0.89409117,0.16409477,0.41674198,0.45309819,0.089151799,-0.88699154,0.96120913,0.27478706,0.023855431,0.55721068,0.54775517,0.62408375,0.52434626,0.54941885,0.65053819,0.37010258,0.54925325,0.74922957,0.23783645,0.48244366,0.84301954,0.39288389,0.9073762,0.14936764,0.36254557,0.91298557,-0.18713112,0.22499358,0.71652776,-0.6602771,0.20152531,0.68976321,0.6954238,-0.3190886,0.88834509,-0.33019005,-0.25037076,0.54306133,-0.80149789,-0.42966782,0.86664524,-0.25359731,-0.38958741,0.74017435,0.54805436,-0.57147335,0.33759796,-0.74796111,-0.90583716,0.40801368,0.11394683,-0.82123048,0.21743621,-0.52754335,-0.37093376,0.06989251,-0.92602547,-0.41048067,-0.030695016,-0.91135253,-0.55021039,-0.10403775,-0.82851957,-0.39707588,-0.13818081,-0.90732398,-0.28675324,-0.10846515,-0.95184447,-0.18235247,-0.13944156,-0.97329524,-0.67471759,-0.5169253,0.52682483,-0.52806583,-0.43990376,-0.72638224,-0.75104669,-0.6597855,-0.024737995,-0.60444639,-0.58633506,-0.53931044,-0.39966636,-0.80946891,-0.43014751,-0.39507576,-0.91773456,0.040968578,-0.25194721,-0.86489484,0.43414228,-0.23530585,-0.94318421,0.23459476,-0.22394355,-0.97442005,-0.01883758,0.046611207,-0.62666322,-0.77789499,0.1501467,-0.73443757,0.66185907,0.1766262,-0.83174225,0.5263155,0.062958778,-0.16913138,0.98358059,0.12597567,-0.30040007,0.94545752,0.23988441,-0.44370483,0.86347061,0.57076013,-0.6121763,-0.54724131,0.69831798,-0.71574188,0.0080970598,0.8107936,-0.55438741,0.18779866,0.80491268,-0.4706847,-0.36134678,0.67598284,-0.23699882,-0.69776698,0.33319348,-0.022690434,-0.94258541,0.8740705,0.025212133,0.48514443,0.97781255,0.07819095,0.19434193,0.77270253,0.18362149,0.60762978,0.91801163,0.29028701,0.27016308,0.18258235,0.06988602,0.98070364,0.4261089,0.23564807,-0.87344215,0.80586572,0.50728986,-0.30534805,0.66018046,0.53803448,0.52409986,0.75975997,0.64778228,-0.056061579,0.4862318,0.55416024,0.67563678,0.58691042,0.72759501,0.35516428,0.37053129,0.6987623,0.61191324,-0.037608934,0.62584712,0.77903848,-0.067935821,0.9920771,0.10567761,-0.19019551,0.91390261,-0.35861914,-0.30692062,0.9466208,0.098533263,-0.4455748,0.86485665,0.23127059,-0.46791601,0.70571238,-0.5320006,-0.46268329,0.62359682,-0.63011997,-0.59810035,0.67709044,-0.42874761,-0.68637033,0.71390857,-0.1386734,-0.62982897,0.61993305,0.46797274,-0.46077562,0.23581245,-0.85561575,-0.44761363,0.22556831,-0.86530976,-0.40158302,0.16542992,0.90075747,-0.50578417,0.12028882,-0.85423239,-0.37804567,0.084390134,0.92193263,-0.78856443,-0.036370651,-0.61387565,-0.51405078,-0.067836723,0.85507308,-0.68385418,-0.28769068,0.67050543,-0.28381997,-0.18171149,-0.94150261,-0.29149479,-0.18755366,-0.93800555,-0.6747791,-0.5327191,-0.51076759,-0.45683593,-0.40849388,-0.79021116,-0.62613098,-0.70349716,-0.3362317,-0.44268278,-0.54708476,0.71044367,-0.51158103,-0.82834554,0.22831673,-0.42793645,-0.76145742,-0.48688089,-0.4838795,-0.8708068,0.086926093,-0.33737731,-0.82858939,-0.44678426,-0.3065703,-0.85398696,0.42038189,-0.3053124,-0.85745901,-0.414184,-0.2336605,-0.69028749,0.68476708,-0.31228683,-0.94930453,0.036025631,-0.21112102,-0.71465249,-0.66685811,-0.16537246,-0.65952891,-0.73326228,0.032621728,-0.67463404,-0.73743117,0.12091151,-0.99050798,0.065378567,0.065295525,-0.40970514,0.90987812,0.24042447,-0.82524499,0.51104479,0.20079117,-0.32919165,-0.92266774,0.48706855,-0.58275896,0.65050459,0.67679952,-0.67172115,-0.30121936,0.72747995,-0.66357122,0.17448827,0.59971532,-0.53319939,0.59669083,0.66782559,-0.5470931,0.50467626,0.8039241,-0.56569816,-0.1835528,0.62300593,-0.42989878,0.65349112,0.43312954,-0.13919335,0.89051896,0.77445223,-0.099694043,0.62472781,0.68385258,-0.06143702,-0.72702899,0.99354849,0.10659402,-0.038718502,0.8629476,0.2150585,0.45724312,0.66987033,0.73949631,-0.066475129,0.25834022,0.54569907,-0.79716551,0.37529181,0.81896737,-0.43410657,0.11971661,0.50060202,0.85735964,0.20127592,0.97893261,0.03433582,0.13117584,0.9219245,-0.36448336,0.076962169,0.76010809,0.64522284,-0.01053871,0.73232583,0.68087284,-0.043831803,0.89399974,-0.44591842,-0.13793562,0.96955342,0.20233618,-0.53404652,0.82806907,0.17057528,-0.48453991,0.66033596,0.57373992,-0.70834434,0.69898955,0.098294961,-0.81296211,0.50803404,-0.2845945,-0.88194788,0.42943944,-0.19429285,-0.2509322,0.092243497,-0.96359959,-0.71064967,0.20707716,-0.67238091,-0.48000749,-0.023239999,-0.87695651,-0.64365119,-0.38467675,-0.66161691,-0.70785209,-0.70098688,-0.086964398,-0.33061773,-0.91903038,0.21465106,-0.19904714,-0.79675966,0.57057364,-0.10838682,-0.5354093,-0.83760921,-0.18664196,-0.97638713,-0.10877938,-0.086229365,-0.99556722,-0.037555474,-0.0024030693,-0.23889516,-0.97104239,0.22189619,-0.97335125,-0.057874261,0.27963226,-0.91528297,0.28993601,0.38289867,-0.92240001,0.050663983,0.17549337,-0.36950191,-0.91250776,0.3741848,-0.77438398,0.51021093,0.44977437,-0.60894504,-0.6533674,0.59418945,-0.71331288,0.37164988,0.73941955,-0.585828,0.33175939,0.79717688,-0.42258409,0.43119799,0.49264566,-0.080354592,-0.8665122,0.70436392,-0.049199784,-0.70813195,0.68312346,-0.037143696,0.72935772,0.82235872,0.017537955,0.568699,0.94478192,0.27813168,-0.17329133,0.68786316,0.37109119,-0.62380735,0.84737208,0.48643112,0.21294439,0.35160353,0.20235386,-0.91401744,0.65346317,0.41984039,0.62985707,0.78339696,0.59889428,0.16617715,0.52292158,0.44717228,-0.72566519,0.40751301,0.51211228,0.75609137,0.52071193,0.77541099,0.35720705,0.30612446,0.46930443,0.82827602,0.50834918,0.85469808,0.10522504,0.43156605,0.85178737,0.29700004,0.39411082,0.83209642,-0.39024634,0.26949747,0.67907073,0.68281334,0.3629398,0.9241753,-0.1190576,0.24582606,0.71613124,0.65324236,0.29025682,0.91687422,0.27403036,0.15577496,0.57905875,0.80026566,0.15136942,0.94578933,0.28734968,0.10923898,0.70822256,-0.69748666,0.065112977,0.99542675,0.069899137,-0.014582682,0.97918115,0.20246388,-0.066465912,0.98535138,-0.15705073,-0.065003567,0.91144289,0.40625902,-0.15733541,0.91353169,0.37510722,-0.25855637,0.89018826,-0.37511793,-0.22275718,0.75156198,-0.6209137,-0.2608037,0.86827528,-0.42199463,-0.23143497,0.49167976,0.83945748,-0.360685,0.64428982,-0.67438636,-0.2305778,0.38944462,0.89172124,-0.66501269,0.73804568,-0.11422214,-0.15774758,0.10312661,0.98207973,-0.86177655,0.47924913,-0.16631733,-0.48993709,0.19441694,-0.84980216,-0.67440713,0.26167275,-0.69043638,-0.95378108,0.23089227,-0.1923289,-0.29826441,0.041510029,-0.95358023,-0.6811193,0.063907844,0.72937801,-0.87960588,-0.097524389,-0.46559906,-0.39579663,-0.16219301,-0.9039018,-0.17108823,-0.099323609,-0.98023652,-0.48321846,-0.31881767,-0.81538654,-0.29427077,-0.28098987,-0.91348202,-0.53774802,-0.60317338,-0.58907465,-0.43685992,-0.85258829,0.28678671,-0.42426883,-0.8685156,-0.2562745,-0.20469934,-0.49268968,-0.84578665,-0.15360033,-0.79691161,-0.58424209,-0.14180006,-0.94615782,0.29099505,-0.064121771,-0.59343064,-0.80232691,-0.069785679,-0.7294475,-0.68046771,-0.028146719,-0.56711946,-0.82315447,-0.023074854,-0.59955378,-0.80000176,-0.025203151,-0.69920069,-0.71448107,-0.01124692,-0.55949809,0.82875533,0.04243629,-0.95799612,0.28362402,0.21582222,-0.8292188,-0.51557439,0.32558013,-0.9067846,-0.26784187,0.29386454,-0.78020266,0.55220236,0.38421188,-0.92128803,0.060079919,0.24772924,-0.37268856,-0.89427818,0.55726216,-0.79014968,-0.25519083,0.4982573,-0.69453682,0.51899736,0.49156619,-0.64773815,-0.58206355,0.21909155,-0.27089094,-0.93734572,0.24385304,-0.19518812,-0.949967,0.81829594,-0.23518736,-0.52447942,0.99256414,-0.049667526,-0.11112857,0.84859333,-0.017493068,-0.52875641,0.72711937,-0.48990397,0.48092777,0.71946489,0.058842647,0.69203165,0.67473895,0.1734337,0.71738979,0.53996303,0.30237609,-0.78549897,0.38481933,0.40434434,0.82971063,0.38603432,0.57600855,0.72054955,0.2692125,0.62735324,-0.73072057,0.22138394,0.7763358,0.59016258,0.065642393,0.26654938,0.96158333,0.23596055,0.97154528,0.020552175,0.091086609,0.54975105,-0.83034752,0.070728673,0.67428421,-0.73507705,0.069552227,0.66920985,0.73981123,0.097459059,0.97409158,-0.20407679,-0.065231672,0.32848182,-0.94225502,-0.17852899,0.75783652,0.62754379,-0.28758804,0.95392114,0.085601222,-0.26561867,0.81665776,-0.51236396,-0.24395116,0.4914794,-0.83602382,-0.61461091,0.70132688,-0.36110114,-0.20241877,0.22121964,-0.95398559,-0.40865194,0.3858781,-0.8271044,-0.73868726,0.66258696,-0.12377259,-0.78606311,0.50157165,0.36129028,-0.59900982,0.25415773,-0.75933595,-0.85673875,0.33332796,-0.39356217,-0.68871816,0.25463197,-0.6788445,-0.70190333,0.11624408,-0.70272258,-0.45475575,0.032038098,-0.89003975,-0.73267759,-0.080706332,-0.67577366,-0.89914973,-0.29740432,0.32106143,-0.7453839,-0.28574794,0.60228811,-0.91728259,-0.3819608,-0.11268807,-0.86250579,-0.4600831,0.2107304,-0.72518279,-0.48464914,-0.48910646,-0.54027431,-0.38767386,-0.74686856,-0.3569545,-0.27581529,0.89247376,-0.39319921,-0.34460241,-0.8524339,-0.42444994,-0.37283184,-0.82512949,-0.51702683,-0.51456633,-0.68403563,-0.38146481,-0.49024939,-0.78367093,-0.5615958,-0.76981985,0.30329452,-0.29396158,-0.50865643,-0.80923126,-0.40465859,-0.73226214,-0.54776234,-0.23521451,-0.75752195,-0.60896193,-0.019956178,-0.82421357,-0.56592732,0.070100554,-0.99667694,0.041484798,0.12623216,-0.81482118,0.56580198,0.081359504,-0.45059805,0.88901183,0.17940015,-0.78316583,0.5953712,0.34962922,-0.75193349,0.55888768,0.25383953,-0.4609346,0.85035568,0.59309186,-0.80365121,-0.048854657,0.59144164,-0.76336067,-0.25976387,0.5711047,-0.57113639,-0.58961228,0.55954762,-0.54470457,0.62466263,0.45307969,-0.35956608,-0.81573956,0.7786217,-0.59121868,0.2102587,0.6798726,-0.49028327,-0.54533986,0.53516358,-0.36558828,0.7615413,0.42206504,-0.28803146,0.85959233,0.65590048,-0.42395974,0.62454199,0.8287398,-0.42665336,-0.36215639,0.64102911,-0.31409286,-0.70030519,0.92852927,-0.10610043,0.35577534,0.27876912,-0.12351181,-0.9523826,0.74191276,0.014925318,0.67033029,0.95264191,0.035589985,-0.30200454,0.62156603,0.048148181,0.7818807,0.3177695,0.046622514,-0.94702106,0.92224954,0.19277718,0.33510111,0.85856553,0.21376799,-0.4660134,0.66862568,0.23377029,0.70589741,0.18288165,0.079191469,-0.97994031,0.77736705,0.34143127,-0.52832297,0.68249708,0.51706283,-0.51656922,0.55572404,0.55668512,0.61747265,0.70359686,0.70882251,-0.050220636,0.44462455,0.48715617,-0.75165675,0.65385692,0.7221508,0.22576392,0.51593799,0.74214208,0.42782371,0.39864398,0.85897435,0.32131924,0.36057531,0.83874613,-0.40803233,0.34283627,0.93921559,-0.01836747,0.28908996,0.94149976,0.1732201,0.14626885,0.50086613,-0.85307593,0.21580133,0.73934364,-0.63780935,0.18353899,0.7268141,0.66185701,0.2161976,0.97629979,-0.0098644284,0.097587401,0.98298719,0.1556049,0.015019792,0.64758623,-0.76184413,-0.10126394,0.97996692,-0.17149476,-0.15948434,0.96128971,-0.22469277,-0.10743841,0.48445505,-0.86819369,-0.3333666,0.7647334,-0.55140687,-0.4355449,0.83583174,-0.33419448,-0.44452561,0.67174236,-0.59258686,-0.25224243,0.3564939,-0.89960317,-0.57741711,0.7953291,0.18450229,-0.5681307,0.7689542,0.29315002,-0.1770169,0.22515462,-0.95810772,-0.80002039,0.59909022,0.032531368,-0.78966601,0.46003343,-0.40595176,-0.5995829,0.33460335,-0.72700822,-0.63226974,0.15451351,-0.75918414,-0.92803499,0.19511769,-0.31730135,-0.97481869,0.18520867,-0.12420257,-0.98169789,-0.065099522,-0.1789729,-0.37415489,-0.057433745,-0.92558602,-0.95760174,-0.20017083,0.20719688,-0.97131973,-0.22955887,-0.061973377,-0.67103147,-0.17082568,0.72148136,-0.83738652,-0.35891674,0.41226518,-0.30411396,-0.13981868,-0.94231918,-0.75184668,-0.39983393,-0.52427035,-0.63014274,-0.7762743,-0.017841818,-0.37655428,-0.59261902,-0.71204605,-0.49587345,-0.82982149,-0.25594103,-0.32476781,-0.70080335,-0.6351382,-0.39012561,-0.89926809,0.19778499,-0.10691771,-0.41538547,0.9033402,-0.15702529,-0.63964317,0.75246241,-0.097617575,-0.92848623,0.35830731,0.000042496543,-0.17363916,0.98480934,0.25512873,-0.90648091,0.33645458,0.28214763,-0.89755829,-0.33879467,0.35989279,-0.85929142,-0.36344935,0.4412568,-0.86554698,-0.23689843,0.36663643,-0.6322195,-0.68255127,0.52103726,-0.77007744,0.36810448,0.60539301,-0.75976055,-0.23719866,0.37499417,-0.31310391,0.87255104,0.39619409,-0.31115387,0.86383651,0.57514508,-0.39477203,0.71649367,0.61717006,-0.3258064,0.71620619,0.2564318,-0.12942249,0.95785831,0.75947421,-0.29103446,0.58180569,0.95987334,-0.2798174,0.018584787,0.17795928,-0.040764332,-0.98319315,0.7223867,0.051649344,0.68955769,0.98709113,0.071481261,0.14332317,0.52477729,0.14560817,-0.83869366,0.87583135,0.25996868,-0.40661497,0.23892958,0.14239546,0.96053953,0.53216606,0.34033448,-0.77522366,0.24166649,0.25874026,-0.93522766,0.45626427,0.5958333,-0.6609127,0.57349345,0.81897642,-0.019567573,0.45201683,0.82120975,-0.3482748,0.34070858,0.87625275,-0.34073271,0.16608012,0.92408044,0.34422773,-0.021851712,0.81495156,0.57911696,-0.076394028,0.96564042,0.24839993,-0.10331542,0.96902718,-0.2243039,-0.28037626,0.84274976,-0.45952365,-0.29327183,0.50095019,-0.81427302,-0.48723603,0.80539166,-0.33755787,-0.57210518,0.81490326,-0.092888885,-0.52977406,0.753401,-0.38952071,-0.51430376,0.6163551,-0.59632042,-0.5679597,0.64560204,0.51050933,-0.66547965,0.71044828,-0.22891063,-0.60427489,0.50261438,0.61824805,-0.6876641,0.54333504,-0.48156527,-0.78540733,0.59222582,-0.18001086,-0.7925278,0.59162916,-0.14790072,-0.67575001,0.46134328,0.57491243,-0.85617341,0.38920665,-0.33983125,-0.9573526,0.28623031,-0.039347181,-0.96940734,0.24510634,-0.013125707,-0.63273473,0.13176553,-0.76307576,-0.15307988,0.018896663,0.98803313,-0.82960538,-0.40351588,0.3859143,-0.65904615,-0.38557085,-0.64575018,-0.60808851,-0.58710716,0.53435339,-0.49067813,-0.55544787,0.67135135,-0.47518343,-0.67121428,0.56892187,-0.28736747,-0.50334143,-0.81490327,-0.12199993,-0.39841,-0.90905748,-0.13525434,-0.63185912,0.76319087,-0.18240083,-0.86588702,-0.46579996,-0.089186977,-0.9689658,0.23054492,0.056364838,-0.7533297,0.65522315,0.13779245,-0.64455287,0.75204045,0.19830648,-0.84852406,-0.49059296,0.19864335,-0.60445906,-0.77147266,0.35867444,-0.69300144,0.62538121,0.46589882,-0.8837956,-0.042937419,0.43617918,-0.70013355,0.56529703,0.60222395,-0.79617577,-0.05857012,0.11389708,-0.10133612,0.98831091,0.44536745,-0.38363943,0.80899235,0.78372815,-0.62080523,0.019262914,0.23704224,-0.1032529,-0.9659968,0.82202309,-0.2896093,-0.49031061,0.94045223,-0.25377717,-0.22615646,0.5883811,-0.13809146,0.79670473,0.44949739,-0.091247753,-0.88860899,0.72076307,-0.1149418,-0.68358539,0.69011522,0.15395415,0.70713444,0.66798566,0.21887247,0.71125945,0.91081369,0.36694799,-0.18912322,0.65079385,0.69440885,0.30702397,0.52730793,0.78019145,0.33652287,0.26519379,0.63500911,-0.72555887,0.092933426,0.51994025,0.84913221,0.15703898,0.98747658,-0.015124869,0.024777374,0.98266659,0.1837184,-0.21826295,0.9203729,-0.3244611,-0.33007234,0.56893108,-0.75323945,-0.56839458,0.79114187,-0.22588081,-0.65617745,0.7480866,0.098982768,-0.69468992,0.71550569,0.073875005,-0.17156587,0.15420172,-0.97302979,-0.78422414,0.59283799,-0.18312731,-0.52176722,0.30985662,-0.79482567,-0.67375471,0.29237989,-0.67865204,-0.7264113,0.11385793,-0.67776323,-0.96105797,0.040588003,-0.27334995,-0.76939447,0.013725064,-0.63862648,-0.597972,-0.48596872,-0.63738834,-0.70943581,-0.59721384,0.37421446,-0.63676215,-0.6736611,-0.37511957,-0.44559875,-0.84495099,0.29580329,-0.084162441,-0.79099181,0.60601043,-0.046125435,-0.94293279,0.32977294,0.025871615,-0.69709831,-0.71650862,0.039588147,-0.83004028,-0.5562966,0.050425635,-0.45084825,-0.89117513,0.18341103,-0.97529265,-0.12314479,0.26004529,-0.67429468,-0.69116071,0.38655361,-0.86380393,-0.32313942,0.36710889,-0.6993791,0.61326988,0.37856493,-0.70993257,0.59387232,0.40040466,-0.60659108,0.6868212,0.38521071,-0.55375694,-0.7382181,0.5613321,-0.73470828,-0.38093308,0.64779294,-0.61263633,0.45281457,0.60842767,-0.52992716,-0.59075627,0.44418483,-0.26033808,-0.85727704,0.21376575,-0.10901449,-0.97078321,0.40387974,-0.20174435,0.8922894,0.81834337,-0.19095279,0.5420804,0.96349093,-0.19309458,-0.18547157,0.58317658,-0.092607471,-0.80704952,0.92880665,-0.030850771,0.36927828,0.062665449,0.92231818,-0.38131643,-0.27564781,0.23685621,-0.93162086,0.89499178,0.053719643,-0.44283621,0.90065479,0.16099901,-0.40360906,0.95994149,0.25644316,0.11291254,0.93373123,0.27906869,0.22420228,0.59518064,0.31093696,-0.74099811,0.71356113,0.53342807,0.45418608,0.74459027,0.57465209,0.33964732,0.67097557,0.6140279,-0.41564591,0.70051198,0.69314451,-0.16980473,0.6214086,0.61659137,-0.48339056,0.64576219,0.74677836,-0.15910147,0.57809642,0.69155564,0.43307657,0.21906491,0.27061421,-0.93743187,0.30987357,0.40450051,0.86044042,0.56577846,0.76557406,0.30625333,0.22999109,0.38301535,-0.89465263,0.19668781,0.36470496,0.91011219,0.41662173,0.82525502,0.38128794,0.39028328,0.92012341,0.032432686,0.25464355,0.933863,0.25111066,0.20757328,0.83630154,0.50745745,0.017346689,0.51528257,0.85684478,0.00050831665,0.58003313,0.81459273,-0.16390903,0.98268432,0.086402288,-0.16635114,0.98506714,-0.044385062,-0.28766188,0.74173833,-0.60586706,-0.34485231,0.67577169,-0.65146719,-0.39368905,0.720091,-0.57138244,-0.21993431,0.39186754,-0.89334693,-0.57910531,0.80811581,-0.10763774,-0.55994794,0.59043168,0.58124756,-0.74207939,0.66691076,0.067440472,-0.29633882,0.25340803,-0.9208516,-0.48059984,0.40066978,0.78005611,-0.79119147,0.61035685,-0.038478085,-0.41174064,0.22924487,-0.88199571,-0.71814643,0.37569813,-0.58576158,-0.63153215,0.061131887,0.77293599,-0.45488864,-0.011241791,0.89047737,-0.87021078,-0.20076849,-0.44991689,-0.72128603,-0.30650135,-0.62113074,-0.51203891,-0.28480177,-0.81037282,-0.80209289,-0.45132214,-0.39109502,-0.71042733,-0.45806855,0.53429037,-0.45732357,-0.54838137,0.70009501,-0.61596509,-0.74076657,-0.26805206,-0.25375753,-0.41767508,-0.87244177,-0.3228523,-0.65756807,-0.68071333,-0.38984859,-0.79744459,0.46054338,-0.18139161,-0.41405182,-0.89199673,-0.24559292,-0.7122584,-0.65755007,-0.12491568,-0.81263896,-0.56922226,-0.037100944,-0.92435693,0.37972066,-0.023928097,-0.82148956,-0.56972128,0.020157304,-0.99923587,0.033486731,0.053722456,-0.92640866,0.37266727,0.093137534,-0.99113659,0.094729403,0.089353053,-0.80414974,-0.58767272,0.24350099,-0.96894178,0.043117269,0.23288589,-0.8938417,-0.38315947,0.21679309,-0.52418398,-0.82354836,0.34644225,-0.71325617,-0.60929747,0.36498555,-0.73320271,0.57375895,0.3028814,-0.59799815,0.74206541,0.47600437,-0.87061431,0.12430034,0.30571647,-0.53351073,0.78860874,0.32079216,-0.52806665,0.78628112,0.58988637,-0.80727096,0.018645886,0.33687113,-0.43204775,0.83657193,0.72730285,-0.67544307,0.12168492,0.44859207,-0.34771702,0.82332134,0.84644159,-0.51889313,0.11952639,0.80960064,-0.39214361,-0.43677247,0.55558134,-0.19579587,0.80808004,0.55405358,-0.1778923,0.81325209,0.43144223,-0.13156282,-0.89249584,0.95834345,0.12558758,-0.256526,0.58043458,0.11544335,-0.80608221,0.97724341,0.1961672,-0.080707803,0.95570751,0.19217703,-0.22291512,0.96078158,0.23196297,-0.15196031,0.37374066,0.15646725,0.91424062,0.17670345,0.097784613,-0.97939474,0.45839298,0.39909546,-0.79410244,0.71386199,0.6958754,0.078475984,0.49393132,0.5493325,0.67399233,0.46092116,0.53057444,0.71136661,0.41757986,0.90210348,-0.10879503,0.40693292,0.8814675,0.23962605,0.2600766,0.93376627,-0.24584693,0.22339888,0.96073258,0.16457781,0.098879185,0.49925807,0.86079282,0.19371043,0.98075052,-0.024590282,0.15036959,0.81758779,0.55582299,0.11912831,0.99287885,0.0002087803,0.043200706,0.43379458,0.89997553,0.087511306,0.8796585,-0.46748551,0.073813744,0.95069612,-0.3012116,0.004228266,0.98661363,-0.16302046,-0.02156979,0.73933065,-0.67299698,-0.024195165,0.74445056,0.66723906,-0.047732912,0.99191201,-0.11761007,-0.063920496,0.46697187,-0.88195887,-0.078683439,0.47010455,-0.87909648,-0.23168046,0.78801862,-0.57039533,-0.30812417,0.94655072,0.095400335,-0.43457337,0.71091158,-0.5529473,-0.45289397,0.67156634,-0.58641769,-0.44567032,0.62826205,-0.63770272,-0.65490784,0.6068441,-0.45037313,-0.62019443,0.47903444,-0.62119632,-0.51833408,0.35140037,-0.7796458,-0.86682747,0.3723795,0.3315775,-0.82955606,0.26572379,0.49114929,-0.59719762,0.15963053,-0.78604904,-0.88653077,0.10732536,-0.45004939,-0.99883782,0.047875541,-0.0055619525,-0.80561926,-0.062654702,-0.58911119,-0.54899421,-0.068779803,-0.83299142,-0.44929628,-0.13390056,0.88329128,-0.82652065,-0.5601383,-0.055755737,-0.71043449,-0.62491736,0.32366824,-0.67590934,-0.61067822,0.41257566,-0.74042552,-0.67197557,-0.014794544,-0.58453287,-0.53149015,0.61305754,-0.41656271,-0.53674003,0.73374767,-0.53157003,-0.79331952,0.29677843,-0.46247978,-0.75842204,-0.45924771,-0.43808093,-0.81847264,0.37173597,-0.26469949,-0.9453923,-0.19017774,-0.18853278,-0.79249429,-0.58000706,-0.061826775,-0.53286031,0.84394155,0.084295197,-0.8753504,-0.47608402,0.10862355,-0.99370078,-0.027562295,0.22728264,-0.75665212,-0.61304174,0.22026536,-0.3874263,0.89520055,0.068844011,-0.093965857,-0.99319229,0.57549909,-0.48753132,0.65659273,0.54178133,-0.45397221,-0.707377,0.91998777,-0.37495487,-0.11415497,0.92485193,-0.37692109,-0.050787851,0.18161659,-0.07022629,-0.98085865,0.78483345,-0.21550317,-0.58102912,0.92871821,-0.22633424,-0.29369253,0.37683272,-0.069275314,-0.92368719,0.99326014,0.11590314,-0.0008645716,0.92099146,0.3373265,-0.19489885,0.50746855,0.3819278,0.77240328,0.35802697,0.76924379,0.52922649,0.1174973,0.58718833,0.80087717,0.095984645,0.99183872,-0.083921959,0.034243145,0.92036619,-0.38955549,-0.041683297,0.99416226,-0.099518311,-0.11531954,0.99008929,-0.080153576,-0.12123869,0.9763741,0.17887089,-0.12955352,0.96512859,-0.22747018,-0.13638459,0.7498022,-0.6474534,-0.21240507,0.9770252,0.017488562,-0.17198169,0.69960057,0.69352818,-0.35803231,0.76866398,0.53006467,-0.3959923,0.83591413,-0.38004956,-0.15150875,0.30988955,-0.93862323,-0.45655878,0.86850507,-0.19301041,-0.48484012,0.87109903,0.078208272,-0.18089081,0.21613091,0.95946128,-0.72813092,0.68496259,0.025526723,-0.64657849,0.5355956,0.54320678,-0.54701888,0.27756988,-0.78976282,-0.51506269,0.25322583,-0.81889383,-0.87877233,0.40122676,0.25841105,-0.24756258,0.06951278,-0.96637505,-0.46313582,0.12575723,-0.87731997,-0.51482205,0.12834967,-0.84763472,-0.80869276,0.045506725,-0.58646838,-0.53723327,-0.003487172,-0.84342649,-0.82130778,-0.036013532,-0.56934748,-0.89525752,-0.07949564,0.43839984,-0.35417469,-0.070505047,-0.93251773,-0.69202416,-0.23142493,-0.68377267,-0.89252633,-0.42674809,0.1458863,-0.8487668,-0.46968614,0.24287827,-0.5411756,-0.32195368,0.77683641,-0.67990173,-0.72701691,0.095812551,-0.6611069,-0.71450761,0.2289466,-0.60792924,-0.73027269,-0.31164697,-0.26250882,-0.49061172,-0.83089666,-0.16809327,-0.45489377,-0.87453777,-0.25093875,-0.80466844,0.53808777,-0.12421129,-0.47416454,0.8716304,-0.099231374,-0.82032156,-0.5632279,-0.067215144,-0.99672302,0.045003948,0.012499941,-0.11817003,0.9929147,0.46006378,-0.86470134,0.20157607,0.26692783,-0.47998358,0.83568253,0.34428536,-0.57027946,0.74582098,0.56507049,-0.78585749,0.2512436,0.47751401,-0.34171869,0.80944963,0.47237941,-0.32855179,0.81787005,0.60117091,-0.32887442,0.7283098,0.89951552,-0.43599972,-0.027858272,0.70637211,-0.30187024,0.64024432,0.9223155,-0.22015171,0.31759618,0.81836106,0.053531094,-0.5722059,0.89791908,0.34767261,-0.26993534,0.93115411,0.36122343,-0.049695608,0.64473872,0.27251493,-0.71417617,0.55422582,0.39057124,0.73504276,0.61095414,0.44617634,-0.65395849,0.73138017,0.56398373,-0.38341283,0.7730765,0.62084221,0.13002948,0.31104115,0.3014486,0.90132244,0.57601718,0.64896767,-0.49703639,0.65251537,0.75072668,-0.10311712,0.49286515,0.77160107,0.40213896,0.095979249,0.46191477,0.88171579,0.11721413,0.80607033,0.58009609,0.033016933,0.47637585,0.87862161,-0.0004896711,0.083987415,0.9964667,-0.12713178,0.9908107,0.046170081,-0.1329348,0.97172984,0.19511397,-0.16345576,0.98542182,0.047181044,-0.17102708,0.58050365,0.79609375,-0.32802071,0.86047429,0.38985434,-0.43479771,0.90052209,0.0033050278,-0.46404075,0.88396713,0.057168922,-0.59407557,0.64627395,-0.47896158,-0.66719935,0.68407225,0.29477142,-0.72133137,0.35435979,-0.59507158,-0.88935159,0.2538367,0.38029025,-0.95451655,0.084184746,-0.28602636,-0.81815057,0.0233969,-0.57452783,-0.76228021,-0.25934607,-0.59301644,-0.78239161,-0.2969842,-0.54741553,-0.32233317,-0.13150958,-0.93744683,-0.71732856,-0.38895584,-0.57805976,-0.54569273,-0.53911216,-0.64154308,-0.16059659,-0.4234215,0.89158453,-0.16699747,-0.464109,-0.86989349,-0.063901647,-0.24562098,0.96725742,-0.18965322,-0.98110978,0.038147891,-0.13829913,-0.90125776,-0.41061879,-0.088606005,-0.60996354,-0.78746013,-0.029736867,-0.98151003,-0.18908668,0.037727207,-0.43854047,-0.89791921,0.15751537,-0.66896631,-0.72641103,0.15240069,-0.64672461,-0.74734283,0.3106712,-0.66106467,0.68299114,0.49750106,-0.86713019,0.024040148,0.55631551,-0.79198215,0.25154983,0.31987914,-0.37234863,0.87122548,0.52256115,-0.52937391,0.66835104,0.55770083,-0.47891036,0.67794886,0.48398612,-0.36650837,0.7946251,0.4989657,-0.36767549,0.78475981,0.14959701,-0.10578749,-0.98307158,0.83334273,-0.5430593,-0.10308489,0.40775009,-0.24659388,0.87916513,0.45578164,-0.27322836,-0.84711827,0.52687603,-0.28183845,0.80185331,0.82822792,-0.39950549,-0.39298076,0.74531198,-0.20781804,0.63349957,0.96308968,-0.26591631,-0.041794499,0.9800872,-0.16980816,-0.10292845,-0.45487531,0.85758376,-0.2400803,0.50663845,0.0011414721,0.86215786,0.99844796,0.035745651,-0.042707413,0.66624009,0.034869142,0.74492167,0.74873685,0.10011497,-0.6552634,0.2225807,0.030196221,0.97444652,0.39469643,0.05445278,0.91719661,0.90148917,0.14730151,0.40696381,0.50982154,0.09567951,0.85494294,0.85376747,0.3345632,0.3989343,0.47973705,0.21546695,-0.85054474,0.48212961,0.23592831,0.84373507,0.66570118,0.33655513,-0.66601245,0.60354237,0.64635289,-0.46686674,0.55180722,0.78389683,0.28463055,0.34399517,0.53123404,0.77424655,0.50526721,0.84618012,-0.16936425,0.20780705,0.46112717,0.8626575,0.32072491,0.7804561,0.5366785,0.30011701,0.86217143,0.40815464,0.27836827,0.83716208,-0.47081924,0.14873698,0.98883511,0.0090798409,0.12050902,0.82743907,0.54847257,0.13746979,0.95490775,0.26316011,0.011772173,0.090124022,-0.99586097,0.066854681,0.85871634,-0.50807155,0.053886751,0.95859476,-0.27962886,0.021769349,0.45645187,0.88948175,-0.004365311,0.85684575,0.51555437,-0.050984138,0.99538178,-0.081337189,-0.088848635,0.60462893,-0.79153634,-0.1867341,0.98098383,0.052925464,-0.3825235,0.82785552,0.41028163,-0.41946616,0.81829279,0.39299498,-0.35480639,0.58276051,-0.73109686,-0.5742769,0.81850737,-0.01586618,-0.48814269,0.62855656,0.60550257,-0.63188423,0.77027585,-0.086008369,-0.53412496,0.38655833,-0.75185316,-0.48870358,0.35254999,-0.79804593,-0.35120393,0.23553149,0.90619022,-0.30655519,0.18238608,-0.93421584,-0.43388853,0.24299133,-0.86758052,-0.44875558,0.22099146,0.86589907,-0.25260271,0.11148646,-0.96112572,-0.67556184,0.29624535,-0.67517027,-0.20460279,0.054870699,0.97730594,-0.98352274,0.093990353,0.15443065,-0.99994864,0.0041176544,0.0092607232,-0.59450996,-0.038246848,0.80317812,-0.93589942,-0.23285836,-0.26432793,-0.4775326,-0.15730136,-0.86441824,-0.58903102,-0.21027035,-0.78027484,-0.62654535,-0.23698604,-0.74248135,-0.91663499,-0.3796888,0.12496685,-0.86203678,-0.42784791,-0.27173288,-0.84818061,-0.50227536,0.1682531,-0.73126306,-0.43517867,-0.52523695,-0.62234791,-0.38205493,-0.68316696,-0.81992647,-0.57242954,0.0067083611,-0.79562907,-0.59632854,-0.10661448,-0.73430948,-0.67879996,-0.0044943365,-0.28532253,-0.30582601,-0.90832896,-0.25457077,-0.27962236,0.92574568,-0.62925785,-0.71477576,-0.30517235,-0.55350368,-0.65202558,-0.51816631,-0.39032173,-0.74605584,-0.53949016,-0.43371997,-0.89840617,-0.068944496,-0.18589901,-0.5321343,0.82599918,-0.2916906,-0.91759616,-0.27006275,-0.21935355,-0.69228893,0.68747368,-0.20667846,-0.72795643,-0.65373041,-0.16821442,-0.69808329,-0.69597675,-0.066349918,-0.96626428,0.24885946,-0.049326178,-0.92271046,-0.38232491,-0.031902178,-0.99374491,-0.10702009,-0.020182037,-0.90691434,-0.4208314,0.0058274414,-0.83567953,0.54918645,0.022312441,-0.9292088,0.36888096,0.066566101,-0.8750196,-0.47948895,0.11119514,-0.57901359,0.80769976,0.19162702,-0.92758996,0.32071164,0.2876248,-0.83542438,0.46833544,0.37659826,-0.75054424,0.54300745,0.32675346,-0.5635473,-0.75871379,0.40658561,-0.66898028,0.62221663,0.52366524,-0.83381458,-0.17472254,0.50705545,-0.49653062,0.70452262,0.6969485,-0.6513685,-0.29996979,0.22234805,-0.2013518,-0.95394905,0.64969036,-0.57393198,0.49850228,0.73653342,-0.52172286,0.43049248,0.79909048,-0.52351654,0.29560926,0.40459575,-0.25945464,0.87691822,0.67961555,-0.40418539,-0.61217389,0.83612815,-0.4337962,0.33572395,0.89876116,-0.41466963,0.14239899,0.49277954,-0.22197372,0.84136555,0.71408248,-0.31829961,0.6235155,0.96236831,-0.24645565,-0.11448512,0.27549504,-0.062853327,-0.95924551,0.93569762,-0.14765884,-0.32041666,0.78298785,-0.086515603,0.61599113,0.92279109,-0.013320668,0.38507034,-0.52879333,0.525677,0.66636424,0.91936179,0.027421496,-0.39245632,0.99655442,0.077529688,0.029469193,0.88325088,0.21712823,0.41559983,0.73624264,0.58390892,-0.34204847,0.60965267,0.50389008,0.61189738,0.56611033,0.80417788,-0.18115471,0.46389575,0.78315457,0.41408893,0.056863838,0.43580882,-0.89824116,0.10748456,0.93064318,0.34978613,0.02279753,0.25707152,0.96612344,0.032470021,0.5817747,-0.8127016,-0.10189697,0.74876581,-0.65495555,-0.17588164,0.96573122,0.19086346,-0.15826875,0.77441116,-0.61256702,-0.23412496,0.7586302,0.60800141,-0.28650116,0.80828941,0.51437857,-0.56312314,0.71380079,-0.41639016,-0.69060174,0.704601,0.1631155,-0.66676843,0.6687167,-0.3289952,-0.45298522,0.41525711,-0.78890172,-0.59606271,0.47211949,-0.64947089,-0.64526083,0.47962566,0.59464081,-0.36131188,0.14938907,-0.92040025,-0.86626615,0.25371039,0.43036496,-0.090922691,0.02468778,-0.9955519,-0.9866332,-0.13710712,-0.088071417,-0.69810382,-0.22968571,-0.67815598,-0.77499456,-0.40390536,-0.48604926,-0.86812762,-0.47613189,-0.14018867,-0.61399449,-0.38689635,-0.687984,-0.51619389,-0.35262777,0.78051107,-0.80019926,-0.5830109,0.14063938,-0.52130382,-0.58712312,0.619297,-0.51395163,-0.60995693,-0.60316355,-0.52235345,-0.72877615,-0.44275522,-0.12057458,-0.17110013,-0.9778479,-0.24834658,-0.44416415,0.86083807,-0.19887621,-0.79034693,0.57948251,-0.22515669,-0.91476041,0.3354368,-0.085907501,-0.92376808,-0.37319221,-0.039574708,-0.9775401,0.20700046,-0.023102598,-0.74283168,-0.66907949,0.085045417,-0.90293549,-0.42127755,0.11579334,-0.94506017,-0.30570112,0.19171484,-0.89669175,0.39898538,0.21843412,-0.94553759,0.24134043,0.33278739,-0.94233516,0.035454095,0.33029888,-0.8446542,0.42126231,0.2207661,-0.48201714,-0.84789257,0.28826843,-0.47338099,0.83235314,0.067222253,-0.088364163,0.99381736,0.38627437,-0.48197638,0.78644191,0.60181709,-0.74626131,-0.28444727,0.57774079,-0.41413833,0.7033527,0.80800204,-0.57779644,0.11525609,0.80297521,-0.50324502,-0.31933565,0.61901324,-0.33538334,0.71016944,0.80027863,-0.40355606,-0.44350493,0.71486382,-0.33739531,0.61248193,0.93562741,-0.30173427,-0.18318782,0.34797588,-0.11136898,0.93086505,0.87256974,-0.18617919,0.45161859,0.64875168,-0.085055208,0.75623202,0.95382332,0.030410679,-0.29882479,0.51410653,0.12869461,0.84801661,0.83484007,0.241199,0.49483846,0.047071024,0.016256131,0.99875926,0.6021359,0.26951733,0.75152696,0.81415788,0.385307,0.43437941,0.71075908,0.33694132,-0.61748852,0.89585187,0.43651768,-0.083076751,0.72960226,0.55594445,0.39825408,0.69593601,0.70914095,-0.11310253,0.62587301,0.76804587,-0.13560429,0.50959231,0.68834082,-0.51623889,0.097144124,0.38138261,0.91929882,0.22401107,0.90450399,0.36289333,0.1676881,0.70972988,0.68422526,0.15955139,0.92716777,0.33897387,0.11517294,0.86540605,0.48765516,-0.010828675,0.96809938,-0.25033245,-0.23630616,0.97119508,-0.030651652,-0.22788833,0.86878332,0.43963901,-0.26666787,0.96350228,-0.023486265,-0.3311699,0.85950526,-0.38932917,-0.32494749,0.70858578,-0.62635079,-0.22851025,0.47433557,-0.85016989,-0.49907386,0.63100865,0.59393044,-0.3424611,0.39018424,-0.85467927,-0.26563536,0.2929002,0.91850276,-0.63518346,0.62862102,-0.44875114,-0.20254955,0.15844778,0.96636845,-0.51895284,0.29457041,-0.8024439,-0.469527,0.26573168,-0.84198045,-0.8762388,0.47185167,0.097783221,-0.56393074,0.2730109,-0.77938897,-0.91729655,0.37537058,-0.13290589,-0.38345972,0.066071065,0.92119122,-0.83559068,0.010708678,-0.54924816,-0.43111318,-0.026900916,-0.90189676,-0.40761275,-0.036506383,-0.91242486,-0.59532357,-0.080584244,0.79943482,-0.92498803,-0.1464191,-0.35065453,-0.91599042,-0.24821514,0.31519963,-0.84793927,-0.25881362,0.46261701,-0.34769603,-0.12053239,0.92982763,-0.47262963,-0.17338921,-0.86403554,-0.35631078,-0.2026624,-0.91212421,-0.49337312,-0.30167509,-0.81582786,-0.75658564,-0.61818355,-0.21313672,-0.18267996,-0.18256766,-0.96607302,-0.56739733,-0.74349639,-0.35393982,-0.51516877,-0.82156905,-0.24418318,-0.19326888,-0.89113352,0.41052185,-0.16542655,-0.84820033,-0.50318015,-0.13993537,-0.96616819,-0.21664978,0.20753156,-0.97542851,0.073958584,0.24340047,-0.96941724,-0.031407538,0.1923673,-0.73356766,0.65182307,0.2332857,-0.72457986,0.64850737,0.11653607,-0.20263877,0.97229464,0.40081559,-0.61486386,-0.67918281,0.55660202,-0.79869866,0.22863651,0.42721348,-0.5938478,0.68178694,0.60199662,-0.79685286,0.051240524,0.37504995,-0.48285046,0.79132355,0.64037972,-0.70289047,-0.30961074,0.67237982,-0.73387328,0.096619813,0.57217306,-0.50072988,-0.64952874,0.70283924,-0.56851998,0.42755354,0.50025892,-0.35029939,-0.79185311,0.65238895,-0.41129694,0.63657166,0.85316055,-0.38138734,0.35589432,0.95194607,-0.27941108,-0.12541186,0.97794309,-0.13304226,-0.16101886,-0.1287856,-0.99149915,-0.018539503,0.80195596,0.030400464,0.59660912,0.93530392,0.35256052,0.030127524,0.92441562,0.3550376,-0.13929845,0.56556287,0.39300591,0.72504137,0.75348085,0.58291464,0.30410052,0.76853051,0.63698807,0.060058759,0.63551483,0.55411177,-0.53766258,0.41698401,0.54067248,0.73061454,0.44054233,0.67725419,-0.58927856,0.49845314,0.80718628,-0.3162195,0.31170039,0.84929892,0.42606831,0.067388366,0.27135305,0.96011787,0.12874284,0.98896363,0.073322727,0.048399797,0.59309911,0.80367338,0.0078742613,0.99981852,-0.017347143,-0.0012521118,0.97476073,-0.22324862,-0.00098004974,0.71212209,0.70205496,-0.14945687,0.78294702,0.60386803,-0.38388353,0.88955297,-0.24764682,-0.32849717,0.58457032,-0.74186734,-0.49010932,0.80962292,0.32296065,-0.46207415,0.75686856,0.46220932,-0.43517719,0.68858298,-0.58006405,-0.54632477,0.64932627,0.52906014,-0.44601265,0.51760838,0.73017415,-0.50010766,0.5633035,-0.65770928,-0.56145437,0.55894405,0.61020532,-0.53028359,0.43070833,-0.73026684,-0.86431222,0.22189026,-0.4513636,-0.96454592,0.085012859,-0.2498479,-0.93505261,0.073348471,-0.34683803,-0.15896307,-0.00021782554,0.98728451,-0.29803546,-0.021360722,-0.95431577,-0.90371949,-0.08773891,0.41903815,-0.46899884,-0.058476118,-0.88126082,-0.61668878,-0.081330227,0.78299447,-0.88372703,-0.32820291,-0.3336306,-0.776349,-0.36309222,0.51521479,-0.80991285,-0.39835844,-0.43052495,-0.39610059,-0.33809931,-0.85369385,-0.40655442,-0.36967505,-0.83549617,-0.57869547,-0.58872217,-0.56437378,-0.48292343,-0.5836949,-0.65275204,-0.38342,-0.55254835,-0.74005366,-0.50356613,-0.81838268,0.2768952,-0.44265882,-0.73314257,-0.51628978,-0.37799099,-0.66064414,-0.64859242,-0.17569633,-0.3464024,0.92148585,-0.24600515,-0.71204513,-0.65762694,-0.068180038,-0.32305396,-0.94392141,0.090528281,-0.59649696,-0.79749357,0.1491506,-0.94472654,0.29196893,0.11637753,-0.71935463,0.68482494,0.19931903,-0.71700053,-0.66796868,0.22410781,-0.42884942,-0.87513649,0.23133153,-0.42308692,-0.87606117,0.57294672,-0.74018272,0.35193976,0.48931526,-0.63203257,0.60092046,0.63373885,-0.77354522,0.0016930141,0.49737592,-0.60663217,0.62017304,0.70642935,-0.70296379,-0.082459014,0.88880033,-0.43351186,0.14866551,0.423711,-0.09791243,0.90048995,0.96092228,-0.043944891,-0.27330792,0.87912594,-0.37967546,-0.28806966,0.64302311,0.003705435,0.76583781,0.83513703,0.051218553,0.54765208,0.60587357,0.13866114,0.78338388,0.91762961,0.37252131,0.13850548,0.77038446,0.55438885,-0.31489806,0.45755231,0.43461039,-0.77573171,0.44853602,0.43635102,0.78000848,0.57385757,0.81681394,-0.059181668,0.45318899,0.72577701,0.51755915,0.31882705,0.66944844,0.67096058,0.37131267,0.89827385,-0.23501274,0.25411268,0.96196969,-0.10020507,0.19292813,0.9482517,-0.25218534,0.13645073,0.74846443,0.64898551,0.084350933,0.99521628,-0.049289781,0.076423197,0.95463866,-0.28779252,0.049464938,0.87626242,-0.47928843,0.011326819,0.36678668,0.93023612,0.0091239412,0.99973008,0.021366561,-0.082449329,0.98534938,-0.14929403,-0.11393057,0.92974035,0.35014671,-0.22092985,0.85874414,-0.46232943,-0.50083447,0.85156041,0.15495061,-0.52337043,0.81381379,0.25256783,-0.47930969,0.7114344,-0.5139293,-0.65079919,0.73485226,-0.19092554,-0.56620334,0.61499904,0.54880777,-0.43196317,0.28609894,-0.85531001,-0.45076027,0.21971836,-0.8651815,-0.59575275,0.16158838,0.7867451,-0.70861657,0.14126688,-0.69130762,-0.99466296,0.094016696,-0.04250233,-0.4763582,0.006468943,0.87922751,-0.48681335,-0.017876763,-0.87332307,-0.46626491,-0.072799277,-0.88164465,-0.38206497,-0.065432423,-0.92181612,-0.96735127,-0.17742984,0.18097006,-0.79867377,-0.3751978,0.4704751,-0.78333436,-0.53366965,-0.31872244,-0.73323364,-0.52841335,0.42795766,-0.79360413,-0.57356203,-0.20302485,-0.64391005,-0.48643025,0.59056368,-0.28348012,-0.29345542,0.91297478,-0.57779865,-0.76788841,0.2765793,-0.56032847,-0.80151609,0.20881562,-0.24145719,-0.39164892,-0.88786798,-0.4406662,-0.79426154,-0.41828448,-0.22856141,-0.65504508,-0.72019138,-0.062847678,-0.44905105,-0.89129306,-0.067735715,-0.52740881,0.84690721,-0.070266179,-0.96648595,0.24691614,-0.053273191,-0.85093147,0.52256827,-0.050754389,-0.99650493,0.066347,-0.009785802,-0.7026945,0.7114244,0.0000054593882,-0.93764958,-0.34758202,0.010057049,-0.92097257,0.38949761,0.029192616,-0.93031786,-0.36559058,0.096171913,-0.9530424,0.28716048,0.11014264,-0.75930979,-0.64134019,0.16614654,-0.89950898,-0.40407787,0.10752301,-0.53568174,-0.83754634,0.19565944,-0.8543252,0.48150373,0.25055559,-0.96198073,0.10869666,0.27188024,-0.88847258,0.3697264,0.081012552,-0.21785876,0.97261222,0.32844144,-0.68889786,0.64617797,0.31614341,-0.59884145,0.73582761,0.43714971,-0.80264684,-0.40578095,0.44390133,-0.6324655,0.63477477,0.6037367,-0.73296589,0.31346929,0.29253257,-0.34905345,-0.89027321,0.73516878,-0.53682932,0.41393374,0.81298759,-0.58224112,-0.0068153543,0.34637345,-0.24695921,-0.9050064,0.49622855,-0.19078101,-0.84697097,0.96663004,-0.2561559,0.0032435091,0.63411296,-0.091514471,-0.76780587,0.99217026,-0.021087683,0.12309948,0.47365079,0.12330979,-0.87203763,0.81086286,0.24798331,0.53009971,0.37796162,0.13210364,-0.91634799,0.88418646,0.39262092,0.25310693,0.65000969,0.53159374,0.54304281,0.29898353,0.25862501,-0.91854339,0.48127128,0.45412674,0.74976453,0.39444012,0.9182049,0.036287197,0.14118082,0.94735962,0.28736341,0.12383795,0.98540255,-0.11681602,0.071390167,0.84577387,0.5287438,0.066813736,0.91667331,0.39401266,-0.010723902,0.84204344,0.53930311,-0.020223244,0.83268466,0.55337806,-0.16771942,0.98543257,0.028157588,-0.21206837,0.88461612,-0.41530872,-0.20138968,0.78873788,-0.58080527,-0.17670695,0.67481806,-0.71651604,-0.29310286,0.93906009,-0.17960193,-0.28547054,0.9032533,-0.32037486,-0.35099845,0.93493258,-0.051972722,-0.36472976,0.89388087,0.26067065,-0.41348772,0.87884116,0.23804647,-0.44730694,0.86404819,-0.23094852,-0.39412721,0.71336311,0.57946252,-0.37067551,0.4720723,0.79984211,-0.78892363,0.48094459,-0.38248111,-0.54804469,0.30057104,-0.78057932,-0.75245877,0.39897112,0.52404947,-0.88236414,0.45300666,-0.12735187,-0.79601217,0.39980986,-0.45444108,-0.98976871,0.13956312,-0.029665429,-0.47771252,0.050829842,-0.87704451,-0.81187211,-0.021064113,-0.58345521,-0.36390243,-0.010057012,-0.93138278,-0.62364648,-0.031395726,-0.78107578,-0.86102055,-0.069753068,0.50376395,-0.9894018,-0.12086973,-0.080464791,-0.76667692,-0.44790009,0.45999132,-0.74721601,-0.49092625,-0.4479505,-0.62365102,-0.41432433,0.66286858,-0.45205834,-0.59102781,-0.66807887,-0.46999242,-0.62409982,-0.6241847,-0.15232537,-0.43501555,-0.8874449,0.19827518,-0.54767669,0.81285743,0.40257326,-0.68854471,0.6031923,0.34148816,-0.48539023,0.80484915,0.56915664,-0.76646886,0.29763435,0.59573311,-0.78966619,0.14672886,0.18274866,-0.23813691,0.9538835,0.63961168,-0.76754434,-0.042102056,0.43690729,-0.45805707,-0.77414194,0.37996685,-0.39249468,0.83759962,0.55967822,-0.48440835,0.67239039,0.77911309,-0.52936193,-0.3357957,0.67243708,-0.33293503,-0.66104663,0.9283445,-0.34539412,-0.1374023,0.60450299,-0.19011148,0.773585,0.96014459,-0.2510199,-0.1229283,0.89484472,-0.060671074,-0.44223518,0.91152669,-0.026468862,-0.41038821,0.44395186,0.0066420862,0.89602602,0.90218844,0.034925938,0.42992581,0.88958209,0.05206757,0.45379805,0.94098633,0.10871904,-0.32050724,0.16559975,0.051582449,0.98484312,0.82194075,0.27099957,0.5009717,0.89839847,0.4076543,-0.16339573,0.81465341,0.48809232,0.31321831,0.71606143,0.46242869,0.52289171,0.49167114,0.39077877,-0.77817186,0.69827042,0.70976742,0.092998002,0.64456967,0.69334484,0.32218453,0.44075768,0.87994173,0.17729979,0.35026418,0.88411055,0.30929523,0.24628329,0.71260839,-0.65691234,0.21215735,0.97644395,-0.039325182,0.14695538,0.9844572,-0.09616722,0.11290375,0.9934415,-0.018075729,0.1069339,0.99126899,-0.077142299,0.060671997,0.99537906,-0.07442732,0.0042741699,0.40518081,0.91422658,-0.067751143,0.91286459,0.40260156,-0.080371739,0.98428297,0.15724953,-0.10343776,0.98257066,0.15445236,-0.090883869,0.81344911,-0.57449167,-0.1189552,0.95270832,0.27963639,-0.16290103,0.69011182,0.70513044,-0.1482403,0.61700873,-0.77286806,-0.34208236,0.88139262,-0.32577094,-0.38451121,0.91861483,-0.091092935,-0.61761374,0.62159238,-0.48184664,-0.34348196,0.27386337,0.89834236,-0.84214225,0.53390992,0.075740558,-0.86720435,0.45171956,-0.2095377,-0.67897053,0.30343893,-0.66852363,-0.9154791,0.3218388,-0.24149079,-0.51222439,0.10873666,-0.85194044,-0.77415815,0.14627512,-0.61585936,-0.92789878,0.11477936,-0.35472461,-0.98258336,0.049807762,-0.17902269,-0.99094413,-0.012372553,-0.1337036,-0.74245801,-0.050328974,-0.66799932,-0.74592484,-0.080856136,-0.66110393,-0.82593583,-0.12266397,0.55025771,-0.72257654,-0.20994205,-0.65864063,-0.85419145,-0.5128918,0.085433963,-0.36553554,-0.31234202,0.87682737,-0.54604869,-0.83094137,-0.10661737,-0.41184525,-0.91053081,-0.036292298,-0.050206164,-0.26191679,-0.96378366,-0.024670968,-0.9808783,0.19305209,0.075094675,-0.94737221,0.31120201,0.12563014,-0.618414,-0.77574557,0.21479658,-0.97654976,0.014594548,0.12495488,-0.5227707,0.84326572,0.29653537,-0.63812614,-0.71053628,0.24662401,-0.52702023,-0.81328118,0.44608547,-0.83577075,0.32014841,0.2278852,-0.37649851,0.89795167,0.50478788,-0.7843384,0.36055855,0.50321632,-0.77971516,0.37258234,0.49319053,-0.72078839,0.48705974,0.4749834,-0.63674258,-0.60741226,0.6192194,-0.72520974,0.30106173,0.6732625,-0.73933819,-0.009830846,0.71620249,-0.69738013,0.02673858,0.85258421,-0.5194075,-0.057584794,0.86113807,-0.50262176,-0.076240371,0.52550464,-0.13709923,0.83967176,0.86400471,-0.1634681,-0.47620798,0.9241599,-0.11469787,-0.36438013,0.79871152,-0.067510391,0.59791492,0.53914414,-0.042646376,0.8411331,0.73882078,0.0055795713,0.67387887,0.93933909,0.012120746,-0.34277568,0.89356559,0.019232886,0.44852049,0.92335094,0.060241153,0.37920184,0.96779039,0.094995375,0.23314724,0.39993439,0.11225629,-0.90964334,0.63351092,0.26081998,-0.72844825,0.48754179,0.23981887,0.83951767,0.66482037,0.3643399,0.65212752,0.22989031,0.15122627,0.96139537,0.44343714,0.32593705,0.83494224,0.40141993,0.36626513,0.8394712,0.64537291,0.71224085,-0.27605574,0.59209505,0.67518247,-0.43994554,0.53936661,0.62063723,0.56911606,0.58386245,0.79355674,-0.17138359,0.14180035,0.20142177,0.96918622,0.26738016,0.51019985,0.81743744,0.43583461,0.87253236,0.22076112,0.3014091,0.67378207,0.67466308,0.2887755,0.70940624,0.64292417,0.36627084,0.90011186,-0.23589049,0.27018865,0.96262724,-0.018624935,0.11108672,0.99381069,-0.00021532057,0.055570905,0.77065596,-0.6348238,-0.25088341,0.95888651,0.13264306,-0.40300986,0.83209098,0.38106122,-0.32432941,0.59431933,0.73593136,-0.23635278,0.39058918,-0.88970639,-0.51738913,0.8405361,-0.1606473,-0.51751297,0.82253351,0.23583671,-0.42363162,0.53494732,-0.73100452,-0.60205287,0.64293644,0.47346074,-0.60550917,0.61629303,0.50352909,-0.5513876,0.54134115,-0.63476096,-0.52694313,0.46112509,-0.71392898,-0.78995674,0.60867502,-0.074047716,-0.79581299,0.59246603,-0.12516264,-0.17121632,0.11384633,0.97863373,-0.85153526,0.44995753,-0.26912064,-0.78865403,0.35435667,-0.50245017,-0.45141534,0.17733497,-0.87451501,-0.94133603,0.33610002,-0.030385017,-0.31017433,0.10629462,-0.94471866,-0.83446699,0.032208059,0.55011588,-0.65271203,-0.076710289,-0.75371251,-0.64814179,-0.13983028,0.74857178,-0.94979019,-0.22727031,0.21505069,-0.81033666,-0.19536426,0.5524376,-0.74634212,-0.23424963,0.62297717,-0.15734477,-0.05144663,0.98620275,-0.85060423,-0.5091424,0.13132581,-0.77717506,-0.52692326,0.34402151,-0.81073888,-0.58500607,0.021688021,-0.30075764,-0.32657233,-0.89604428,-0.22552449,-0.40219039,-0.88734525,-0.44852213,-0.84428341,0.29328043,-0.30916173,-0.75612958,0.57679033,-0.31834004,-0.88150877,-0.34871466,-0.33707591,-0.94131561,-0.017457357,-0.28316402,-0.95865879,-0.028132909,-0.16922366,-0.90418629,0.39218682,-0.12345555,-0.78954767,0.60114325,-0.090830688,-0.99523734,0.035389716,-0.0086918636,-0.20248947,0.97924587,0.12972331,-0.74423154,0.65520324,0.24510635,-0.88941384,-0.38583143,0.26588405,-0.95294215,0.14562597,0.29532139,-0.863146,-0.40959036,0.11635902,-0.33566156,-0.93476837,0.26834599,-0.74720925,0.60800392,0.32918584,-0.88493503,-0.32943388,0.37985762,-0.92503499,0.0042953304,0.29263371,-0.63060224,0.71882287,0.2734049,-0.57405423,0.77182349,0.42878208,-0.87361381,0.23009745,0.46017787,-0.87192454,0.16728396,0.5467168,-0.83718082,0.015133212,0.47697883,-0.56379478,-0.67426007,0.63448243,-0.61717188,-0.46532884,0.68908615,-0.63393164,-0.35112812,0.7114581,-0.52015071,0.47251519,0.67373778,-0.43694473,0.59595025,0.43264003,-0.10028929,0.89597135,0.70741809,-0.12239862,0.69611653,0.7017495,-0.08083366,0.70782311,0.63065262,0.079436104,-0.77198911,0.87162749,0.12567395,0.47378431,0.93732257,0.3438288,-0.056640517,0.66476879,0.25750887,-0.70126431,0.65839411,0.50646437,0.55678635,0.76096157,0.64000102,0.1064715,0.25768166,0.23390787,0.93748988,0.17437815,0.26195141,-0.94919635,0.46145832,0.70934473,0.53280979,0.13831249,0.56534438,-0.81317611,0.067914379,0.28372532,-0.95649756,0.17869314,0.90789157,0.3792119,0.093595834,0.60409595,-0.79139617,0.091027693,0.87234261,-0.48034605,0.039174741,0.39365371,0.9184237,-0.026753203,0.7145063,-0.69911731,-0.047883576,0.43845769,-0.89747536,-0.10896792,0.98636188,0.1233541,-0.10979375,0.7916862,-0.6009811,-0.13379252,0.94276696,0.30543417,-0.046239653,0.27690576,0.95978388,-0.17147005,0.90817525,-0.38185827,-0.24262076,0.94792496,0.20633332,-0.14256892,0.54476212,-0.82638268,-0.23928403,0.89843913,-0.36817155,-0.33436909,0.82725973,-0.45148494,-0.3949034,0.6235643,0.6746991,-0.33232915,0.48235295,0.81048933,-0.60509661,0.76240896,0.22932657,-0.3659311,0.42713402,-0.82683188,-0.48933033,0.50973345,-0.70762111,-0.72799227,0.55946011,-0.39627217,-0.73740849,0.54572255,0.3980146,-0.74047013,0.51061773,0.43700518,-0.2854041,0.097640196,-0.95342063,-0.46568745,0.15517252,-0.87123859,-0.49493986,0.1481289,-0.85620813,-0.252445,0.044956302,-0.96656632,-0.65377467,0.042246378,-0.75550905,-0.68100404,0.009706177,-0.73221533,-0.91700012,-0.077486261,0.39128847,-0.93096805,-0.13652359,-0.33861453,-0.39253646,-0.069094162,-0.91713746,-0.64722476,-0.14445086,-0.74848785,-0.57481922,-0.13379139,-0.80726869,-0.89831051,-0.29816429,-0.32270153,-0.93741609,-0.34440711,0.051330549,-0.39169599,-0.30524134,0.86798731,-0.58723725,-0.73752086,0.33348972,-0.54398832,-0.72954329,-0.41453985,-0.4918784,-0.6781918,-0.5459959,-0.48926656,-0.81158111,0.31930288,-0.44909784,-0.89044609,-0.073599562,-0.12956942,-0.4991192,-0.85679156,-0.20552511,-0.87091092,-0.44640071,-0.053415279,-0.49947637,-0.86467922,-0.077344214,-0.78348883,-0.6165737,-0.0054516345,-0.54612997,-0.83768272,0.0091074179,-0.66302486,0.74854197,0.17162119,-0.97680164,0.12808091,0.11199671,-0.56403363,0.8181215,0.12201047,-0.38836559,0.91339237,0.31123404,-0.74420667,0.59100745,0.30294527,-0.48677516,-0.81931319,0.37256824,-0.52382184,-0.76603106,0.4142055,-0.45715651,0.7870462,0.66727969,-0.66960011,-0.32614952,0.41954661,-0.41690601,-0.80633121,0.58519675,-0.31821989,0.74584239,0.86942024,-0.37948791,0.31638169,0.31212398,-0.1240841,0.94190327,0.98961488,-0.14240255,0.019593332,0.98807749,-0.13213198,-0.079019057,0.9526473,-0.093151744,0.2894579,0.64715625,-0.052504858,0.76054719,0.8939007,-0.011173664,-0.44812575,0.89663854,0.19696362,-0.39654088,0.58951684,0.14096505,0.79536077,0.16552298,0.057412368,0.98453337,0.76644029,0.30618027,0.56464406,0.59436515,0.25415156,-0.76297906,0.84246252,0.4151407,0.34338769,0.84335869,0.51784669,0.14346054,0.60376636,0.53874668,0.58755271,0.47169156,0.86821974,-0.15395309,0.29325514,0.92593283,-0.23801223,0.094333523,0.81645798,0.56964686,0.092867833,0.88081612,0.46426127,-0.038134351,0.89254834,-0.44933643,-0.079178978,0.95134025,0.29779595,-0.099965247,0.96041472,-0.26002021,-0.19997017,0.79082972,-0.57844644,-0.30280535,0.70294146,-0.6435699,-0.40356029,0.9034622,-0.14455153,-0.39469037,0.62076436,-0.67740027,-0.55270858,0.49196427,-0.6726696,-0.51605718,0.42005065,-0.74648673,-0.7906033,0.61193566,-0.021935562,-0.31518605,0.23847968,-0.91857781,-0.34888021,0.22141798,0.91063532,-0.7683428,0.4581081,-0.44697462,-0.70624397,0.38643804,-0.59319904,-0.8901751,0.30545366,0.33806265,-0.94625875,0.32048384,0.04341064,-0.67630184,0.14322584,-0.72256639,-0.96138613,0.11909792,0.24809755,-0.076932127,-0.0015025269,0.9970352,-0.040042065,-0.0026849525,0.99919439,-0.97263507,-0.20477578,-0.10976292,-0.60431249,-0.24214935,-0.75905869,-0.8430369,-0.50423921,0.18716732,-0.14064016,-0.11151363,0.98376067,-0.6315013,-0.55492425,0.54153964,-0.69455253,-0.64686095,-0.31490903,-0.55442258,-0.5854278,-0.59151492,-0.31521233,-0.35321871,-0.88083922,-0.24530947,-0.29410584,-0.92375593,-0.47379842,-0.86929867,0.14083636,-0.11258496,-0.27681855,0.954304,-0.25554464,-0.90710085,-0.33446222,-0.24333359,-0.87031106,0.42819087,-0.24373818,-0.93490241,0.25797129,-0.11282652,-0.63194279,-0.76675842,0.0057758022,-0.95548332,-0.29498857,0.096559398,-0.8825907,0.46011949,0.13090098,-0.98636561,-0.099738775,0.026112952,-0.14007628,-0.98979632,0.22613229,-0.95978773,-0.16634812,0.17804207,-0.6979967,-0.6936149,0.20715916,-0.6074857,0.76684171,0.34425597,-0.89253186,0.29133264,0.39574758,-0.89350002,-0.21222997,0.38988591,-0.799979,0.45609493,0.27607755,-0.53650977,-0.79745749,0.42718893,-0.74788402,-0.50811328,0.21796671,-0.3687966,0.9035926,0.25680833,-0.37001467,-0.8928262,0.32967467,-0.46847796,-0.8196603,0.70294894,-0.65803679,0.26990808,0.72974179,-0.66412352,-0.16253265,0.71855684,-0.63864101,0.27534292,0.55860591,-0.41600015,0.71756764,0.78895947,-0.50529936,0.34959334,0.79091544,-0.49276659,0.36281381,0.89397,-0.3014193,0.33160827,0.89193579,-0.23323068,-0.38736804,0.71581031,0.00099153091,-0.69829408,0.7933187,0.10072738,0.60041605,0.67026611,0.14536249,-0.72774521,0.64130089,0.15718358,0.75101697,0.83715932,0.23727129,-0.49281498,0.81131528,0.24104123,0.53260365,0.77221607,0.29496506,0.56274147,0.54886836,0.29444131,0.78233486,0.69906754,0.38336508,0.60360235,0.63351113,0.49604618,-0.59380286,0.60682019,0.54189343,0.58148154,0.6725149,0.72527538,0.14730693,0.22065584,0.49679849,-0.83934633,0.2115687,0.49252485,0.84419071,0.36510035,0.89375264,0.26059154,0.30511452,0.8037373,-0.51079494,0.086981206,0.28944421,-0.95323466,0.039997421,0.39576749,-0.91747932,0.031664456,0.84630064,0.53176367,0.019175589,0.9963251,-0.083478101,-0.0055990041,0.24886453,0.96852212,-0.032732401,0.70285612,-0.71057854,-0.031132378,0.60591965,0.79491644,-0.054076263,0.41005654,-0.9104556,-0.17221206,0.94374172,0.28230228,-0.14373762,0.77041244,-0.62113136,-0.11453141,0.58659878,0.80173838,-0.23760136,0.96051319,0.14477569,-0.23010176,0.84824923,-0.4769973,-0.39231189,0.90136244,0.1834043,-0.41989596,0.754569,-0.50429456,-0.28679343,0.48918742,-0.82367785,-0.37560461,0.62825086,-0.68133842,-0.55795865,0.81543006,0.1541297,-0.45937753,0.63646118,-0.61958813,-0.077681265,0.10637955,0.99128654,-0.49445586,0.6189082,-0.61029996,-0.661623,0.68884198,0.2962292,-0.43660516,0.36784632,-0.82101463,-0.7553561,0.4675645,-0.45915204,-0.78232761,0.39840964,-0.47878311,-0.60918313,0.14598296,-0.77947732,-0.47677715,0.060123433,-0.87696563,-0.56930021,0.045491588,0.82087014,-0.92823832,-0.0028505691,-0.37197513,-0.90176392,-0.1330421,0.411244,-0.49049665,-0.22965399,0.8406379,-0.60088379,-0.354664,0.71634636,-0.85507353,-0.51695469,0.040088705,-0.63108189,-0.46478847,0.6210534,-0.62492586,-0.60999224,-0.48721365,-0.65681819,-0.74792706,-0.095890431,-0.56582841,-0.74900249,-0.34472232,-0.5141791,-0.84460665,0.14919604,-0.21114276,-0.71258792,-0.66905694,-0.23748268,-0.91587913,-0.32367792,-0.16632329,-0.68086321,-0.71327544,-0.17357731,-0.9439201,-0.28086609,-0.16122978,-0.98603701,-0.041664907,-0.049728061,-0.63398728,-0.77174299,-0.013297338,-0.99350708,0.11299051,-0.0068929128,-0.77561422,-0.63116961,0.0040233549,-0.96549247,0.26039989,0.10674985,-0.9866257,-0.12318359,0.10921768,-0.88621806,-0.45021,0.061606579,-0.32316451,0.94433539,0.16916735,-0.73098502,0.66109251,0.20284475,-0.87043545,-0.44854891,0.2384486,-0.89038934,0.38774874,0.27347,-0.9066515,-0.32124325,0.2664678,-0.82854114,-0.49245761,0.2377508,-0.48931211,0.83907581,0.43536072,-0.64510161,0.62793706,0.38337351,-0.55297692,-0.73975758,0.48016642,-0.56513995,-0.67086291,0.6654482,-0.74518184,-0.04339026,0.26945388,-0.21765704,-0.93809382,0.6797881,-0.47997722,-0.55453586,0.64927554,-0.4359243,-0.62322651,0.75311777,-0.49660194,0.43150915,0.82861127,-0.46786888,-0.3074119,0.8856689,-0.45932426,-0.067910432,0.70960399,-0.27065972,-0.65054246,0.75962364,-0.2885106,0.58286668,0.93905159,-0.33207565,-0.088926265,0.7861947,-0.25803122,-0.56153164,0.96097053,-0.26855153,0.066450913,0.92227963,-0.15154562,0.35557589,0.96196726,-0.0069135944,-0.27307726,0.63764581,0.22633162,0.73632997,0.85152587,0.52431223,0.00061729883,0.46000391,0.33379075,0.82278803,0.60628982,0.50185956,0.61688705,0.62066981,0.6057667,-0.49781089,0.53902842,0.60406207,-0.58699011,0.60282293,0.76681647,0.22044731,0.39432246,0.52086422,0.75710651,0.11860373,0.16399984,-0.97930445,0.31620765,0.44465318,0.83803119,0.32532353,0.48488351,-0.81182054,0.23256359,0.44419015,0.8652221,0.052295855,0.19592792,-0.97922285,0.11773628,0.91660049,0.38207552,0.044951804,0.81110133,-0.58317576,0.024603044,0.62182731,0.78276783,-0.079286712,0.92310924,-0.3762751,-0.25895014,0.96135055,-0.093541102,-0.32961168,0.93692302,-0.1163245,-0.25000906,0.57048488,-0.78233143,-0.60716815,0.72071272,0.33454448,-0.40409651,0.44877867,-0.79705942,-0.41301411,0.25048555,0.87560055,-0.22074708,0.085385779,-0.97158633,-0.8343198,0.3199517,-0.4489336,-0.75258655,0.28754825,0.59239302,-0.69200503,0.22946516,-0.68445217,-0.51119679,0.16698573,-0.84308576,-0.51687271,0.15856119,-0.84124964,-0.54369568,0.072236286,0.836168,-0.82902328,0.077858893,0.55376746,-0.70273822,0.065325499,0.70844306,-0.2991499,-0.020514389,0.95398558,-0.40790983,-0.045202479,-0.91190258,-0.9736867,-0.14138815,0.1787277,-0.88699651,-0.1917257,0.42009339,-0.93561372,-0.21797685,0.27769237,-0.69728369,-0.32396753,-0.63940636,-0.65291058,-0.65789413,0.37534396,-0.5236676,-0.54567039,-0.65422936,-0.32201365,-0.35373173,-0.87816916,-0.61956425,-0.75418476,0.21759017,-0.50235304,-0.81128568,0.29909358,-0.43705203,-0.72905667,-0.52674652,-0.39980939,-0.84895084,-0.34559359,-0.22196456,-0.71048913,0.6677851,-0.2299634,-0.80148095,-0.55203725,-0.079660232,-0.27908988,0.95695511,-0.22361213,-0.90962285,-0.35011981,-0.21632885,-0.90449498,-0.36754681,0.074762768,-0.98269117,-0.16949511,0.076409113,-0.96821941,0.23814454,0.20376838,-0.90342528,-0.37722833,0.19091268,-0.74391677,-0.64042189,0.18377067,-0.61143844,-0.76965666,0.27081678,-0.7476061,0.60641849,0.2202238,-0.52790932,-0.82025193,0.2306084,-0.47683482,0.848203,0.57601972,-0.80004675,-0.16770949,0.58194227,-0.68496423,-0.4383688,0.40796231,-0.45355924,0.79237035,0.71074223,-0.59514529,0.37503008,0.45772168,-0.23335744,0.85792492,0.84011431,-0.36451535,-0.40166717,0.59909904,-0.23030371,0.76683801,0.46579216,-0.15976112,-0.87035283,0.65392884,-0.11621879,0.74757626,0.99887874,-0.030173223,0.036480656,0.94071643,0.24288555,0.23676827,0.78607739,0.46702943,-0.40492697,0.59310502,0.4238197,-0.68454605,0.50423962,0.43459898,0.74623464,0.69787842,0.6576144,0.2837411,0.6837291,0.71540461,-0.14391236,0.55170183,0.63346368,0.54253927,0.65159407,0.75196779,-0.099847948,0.51889074,0.82449735,0.2257355,0.28478837,0.92906545,0.23607831,0.18082,0.72386918,-0.66582095,0.13141273,0.84499021,0.51838427,0.14007366,0.96842824,-0.2062186,0.040994785,0.73581829,0.67593704,0.024994229,0.99810266,0.056270541,-0.093295173,0.99485131,0.039583981,-0.044464191,0.44109901,-0.89635629,-0.082194125,0.75840827,-0.64657638,-0.10726252,0.96120394,0.25412939]"),dr=JSON.parse("[0.75,0.82,1,0.78,0.83,1,1,0.85,0.63,1,0.93,0.89,0.75,0.82,1,1,0.92,0.86,0.75,0.82,1,0.93,0.92,0.99,0.75,0.81,1,1,0.79,0.5,0.71,0.79,1,0.78,0.84,1,0.7,0.77,1,1,0.78,0.48,0.75,0.82,1,0.71,0.78,1,1,0.7,0.31,1,0.9,0.77,0.77,0.83,1,0.71,0.78,1,0.77,0.83,1,1,0.91,0.81,0.75,0.81,1,0.74,0.8,1,0.76,0.82,1,1,0.76,0.45,0.71,0.79,1,0.72,0.79,1,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,0.98,0.94,0.98,0.75,0.82,1,1,0.89,0.73,1,0.93,0.91,0.75,0.81,1,1,0.86,0.65,0.9,0.91,0.99,0.76,0.82,1,1,0.8,0.52,0.75,0.82,1,0.76,0.82,1,0.75,0.81,1,1,0.94,0.92,0.71,0.78,1,1,0.8,0.53,1,0.87,0.68,1,0.87,0.69,1,0.89,0.75,0.75,0.81,1,1,0.89,0.76,0.75,0.81,1,1,0.77,0.46,0.75,0.81,1,1,0.8,0.52,1,0.76,0.44,0.78,0.83,1,0.75,0.82,1,1,0.82,0.56,0.77,0.83,1,0.75,0.81,1,0.75,0.82,1,0.67,0.75,1,0.78,0.84,1,0.76,0.82,1,1,0.75,0.41,0.76,0.82,1,1,0.93,0.91,1,0.87,0.67,1,0.78,0.49,0.75,0.81,1,0.88,0.89,0.99,0.75,0.81,1,0.75,0.81,1,1,0.87,0.68,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.9,0.78,1,0.78,0.49,0.75,0.81,1,1,0.88,0.72,0.76,0.82,1,0.76,0.82,1,1,0.75,0.42,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,1,0.89,0.75,0.75,0.82,1,1,0.76,0.43,0.76,0.82,1,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.78,0.84,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,1,0.87,0.67,0.78,0.84,1,0.75,0.81,1,0.75,0.81,1,1,0.91,0.82,0.78,0.83,1,1,0.94,0.95,0.75,0.81,1,1,0.79,0.5,1,0.91,0.81,0.75,0.81,1,0.75,0.81,1,1,0.76,0.44,1,0.82,0.56,1,0.79,0.49,1,0.77,0.46,1,0.91,0.81,0.73,0.79,1,0.87,0.89,0.99,0.74,0.8,1,0.76,0.82,1,0.77,0.83,1,1,0.87,0.67,0.78,0.83,1,1,0.9,0.79,1,0.87,0.67,0.75,0.81,1,1,0.9,0.79,0.73,0.8,1,1,0.92,0.85,1,0.94,0.92,1,0.94,0.93,0.74,0.81,1,1,0.89,0.75,0.75,0.81,1,0.96,0.93,0.98,0.81,0.86,1,0.79,0.85,1,1,0.79,0.51,0.75,0.81,1,0.75,0.81,1,1,0.91,0.8,0.78,0.84,1,0.75,0.82,1,0.79,0.85,1,0.75,0.82,1,1,0.76,0.44,0.75,0.82,1,1,0.82,0.55,0.77,0.83,1,0.87,0.89,0.99,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.8,0.85,1,1,0.92,0.84,1,0.93,0.89,0.79,0.85,1,1,0.92,0.83,1,0.86,0.65,0.75,0.82,1,1,0.9,0.78,1,0.77,0.45,0.75,0.81,1,1,0.92,0.85,1,0.9,0.77,1,0.91,0.8,1,0.95,0.98,0.75,0.82,1,0.77,0.83,1,1,0.87,0.68,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.83,0.59,1,0.95,0.96,0.75,0.81,1,0.78,0.84,1,1,0.88,0.71,1,0.92,0.86,1,0.82,0.56,1,0.76,0.45,1,0.9,0.77,1,0.77,0.46,1,0.9,0.77,1,0.85,0.63,0.75,0.81,1,1,0.9,0.76,1,0.87,0.68,0.79,0.84,1,1,0.78,0.47,0.76,0.83,1,0.74,0.8,1,1,0.78,0.47,1,0.78,0.48,1,0.8,0.53,0.75,0.81,1,0.97,0.94,0.98,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.79,0.85,1,0.98,0.94,0.98,1,0.8,0.52,1,0.87,0.67,1,0.86,0.65,1,0.9,0.77,1,0.89,0.74,0.72,0.79,1,1,0.9,0.78,1,0.91,0.8,0.75,0.81,1,0.79,0.84,1,0.75,0.81,1,1,0.79,0.49,1,0.88,0.71,1,0.75,0.41,0.75,0.81,1,1,0.77,0.45,1,0.84,0.62,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.87,0.67,0.75,0.81,1,0.75,0.81,1,1,0.76,0.45,0.75,0.81,1,1,0.91,0.82,1,0.78,0.48,0.76,0.82,1,0.94,0.92,0.99,1,0.9,0.77,1,0.87,0.67,1,0.91,0.81,0.75,0.82,1,1,0.86,0.64,0.75,0.81,1,0.71,0.78,1,0.94,0.92,0.99,1,0.91,0.83,0.82,0.86,1,0.75,0.81,1,1,0.93,0.9,0.77,0.83,1,0.75,0.81,1,1,0.78,0.48,1,0.77,0.46,1,0.77,0.47,0.78,0.84,1,0.75,0.82,1,1,0.78,0.48,0.75,0.81,1,0.72,0.79,1,1,0.91,0.81,1,0.91,0.81,0.75,0.81,1,0.99,0.95,0.98,0.74,0.81,1,1,0.93,0.88,0.78,0.83,1,0.75,0.81,1,0.8,0.85,1,0.75,0.81,1,0.76,0.82,1,1,0.94,0.94,1,0.87,0.67,0.75,0.81,1,1,0.9,0.78,0.77,0.83,1,0.75,0.81,1,0.75,0.82,1,1,0.91,0.81,1,0.93,0.89,1,0.73,0.38,1,0.81,0.55,1,0.9,0.79,0.75,0.81,1,0.76,0.83,1,0.75,0.81,1,0.87,0.89,0.99,1,0.89,0.73,1,0.77,0.46,1,0.91,0.8,1,0.91,0.81,1,0.95,0.97,0.75,0.81,1,0.75,0.82,1,1,0.87,0.68,0.77,0.83,1,0.75,0.82,1,1,0.89,0.75,1,0.79,0.51,1,0.9,0.79,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.99,0.95,0.98,1,0.93,0.88,1,0.86,0.64,0.75,0.81,1,1,0.88,0.7,0.74,0.8,1,1,0.91,0.8,0.75,0.82,1,1,0.84,0.6,1,0.78,0.48,0.77,0.83,1,1,0.91,0.82,1,0.84,0.61,0.75,0.81,1,0.98,0.94,0.98,1,0.95,0.97,1,0.82,0.55,1,0.88,0.73,0.77,0.83,1,0.75,0.81,1,0.87,0.89,0.99,1,0.82,0.57,0.75,0.81,1,0.75,0.81,1,1,0.91,0.82,1,0.89,0.76,1,0.86,0.65,1,0.87,0.67,1,0.9,0.78,0.75,0.81,1,1,0.74,0.39,1,0.81,0.55,0.75,0.81,1,0.78,0.83,1,0.92,0.91,0.99,1,0.9,0.77,0.86,0.88,0.99,0.76,0.82,1,0.75,0.81,1,0.9,0.91,0.99,0.82,0.86,1,0.75,0.81,1,0.75,0.81,1,1,0.85,0.62,0.75,0.81,1,0.75,0.81,1,1,0.83,0.59,1,0.86,0.65,0.75,0.81,1,1,0.92,0.84,1,0.87,0.68,1,0.89,0.76,1,0.86,0.66,0.82,0.86,1,1,0.76,0.44,1,0.91,0.8,1,0.91,0.81,0.75,0.81,1,0.83,0.87,1,1,0.89,0.76,0.77,0.83,1,0.78,0.83,1,1,0.91,0.83,1,0.91,0.82,0.75,0.81,1,1,0.89,0.76,1,0.76,0.44,0.75,0.81,1,0.75,0.82,1,1,0.86,0.66,1,0.89,0.76,1,0.76,0.43,1,0.87,0.69,0.8,0.85,1,0.89,0.9,0.99,1,0.87,0.66,0.76,0.82,1,1,0.94,0.92,1,0.9,0.77,0.75,0.81,1,1,0.89,0.76,0.77,0.83,1,0.76,0.82,1,1,0.74,0.4,0.92,0.91,0.99,1,0.9,0.77,0.75,0.81,1,1,0.87,0.69,1,0.93,0.91,1,0.77,0.47,0.75,0.81,1,1,0.9,0.76,0.93,0.92,0.99,1,0.89,0.76,1,0.89,0.75,0.79,0.85,1,1,0.91,0.79,0.76,0.82,1,0.75,0.82,1,1,0.9,0.77,1,0.89,0.74,1,0.95,0.96,0.75,0.81,1,0.79,0.85,1,1,0.9,0.79,1,0.84,0.61,1,0.9,0.79,0.81,0.86,1,0.76,0.82,1,1,0.9,0.77,0.76,0.82,1,0.76,0.82,1,1,0.76,0.44,0.76,0.82,1,0.75,0.81,1,1,0.8,0.52,0.72,0.79,1,1,0.8,0.53,1,0.87,0.69,0.76,0.82,1,1,0.9,0.79,0.75,0.81,1,0.75,0.81,1,0.8,0.85,1,0.75,0.81,1,0.75,0.82,1,0.78,0.84,1,1,0.91,0.82,1,0.88,0.71,0.78,0.84,1,1,0.91,0.83,0.76,0.82,1,0.75,0.81,1,0.76,0.82,1,0.98,0.94,0.98,1,0.87,0.67,1,0.83,0.59,0.77,0.83,1,1,0.88,0.72,1,0.87,0.69,1,0.88,0.7,1,0.91,0.8,1,0.82,0.57,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.74,0.8,1,0.88,0.89,0.99,0.75,0.81,1,1,0.94,0.93,1,0.89,0.75,0.75,0.81,1,1,0.86,0.64,0.75,0.82,1,1,0.9,0.76,1,0.88,0.71,1,0.73,0.38,0.75,0.81,1,0.76,0.82,1,1,0.89,0.75,1,0.83,0.59,0.75,0.81,1,1,0.86,0.66,0.76,0.82,1,0.75,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.89,0.76,0.75,0.81,1,0.75,0.82,1,0.79,0.84,1,1,0.95,0.96,0.78,0.84,1,1,0.9,0.78,1,0.93,0.87,0.74,0.8,1,1,0.89,0.74,1,0.85,0.64,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,1,0.89,0.75,0.78,0.83,1,1,0.88,0.72,0.76,0.82,1,0.75,0.82,1,1,0.89,0.74,0.77,0.83,1,0.75,0.82,1,1,0.87,0.68,0.96,0.93,0.98,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.8,0.52,1,0.88,0.72,1,0.8,0.51,1,0.87,0.69,1,0.93,0.87,1,0.91,0.8,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.89,0.75,1,0.88,0.72,0.76,0.82,1,1,0.91,0.82,1,0.78,0.47,1,0.83,0.59,0.87,0.89,0.99,0.78,0.84,1,0.91,0.91,0.99,0.77,0.83,1,0.92,0.91,0.99,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.91,0.81,0.75,0.81,1,0.75,0.81,1,1,0.95,0.97,1,0.88,0.72,1,0.87,0.69,0.9,0.9,0.99,1,0.84,0.61,0.83,0.87,1,1,0.88,0.72,1,0.88,0.72,0.76,0.82,1,1,0.91,0.8,1,0.89,0.76,0.75,0.81,1,1,0.91,0.83,0.75,0.81,1,0.92,0.91,0.99,0.82,0.86,1,1,0.79,0.5,1,0.95,0.98,0.75,0.81,1,1,0.94,0.94,0.91,0.91,0.99,1,0.91,0.82,0.75,0.81,1,1,0.78,0.49,0.75,0.82,1,0.75,0.81,1,1,0.77,0.46,1,0.87,0.67,1,0.78,0.48,0.78,0.84,1,1,0.76,0.45,0.75,0.81,1,1,0.82,0.57,1,0.8,0.52,1,0.95,0.98,0.75,0.81,1,0.77,0.83,1,1,0.92,0.86,1,0.88,0.71,0.76,0.82,1,0.74,0.8,1,0.78,0.83,1,1,0.81,0.54,0.75,0.82,1,1,0.88,0.72,1,0.81,0.55,0.75,0.82,1,1,0.88,0.7,1,0.9,0.79,1,0.76,0.44,1,0.95,0.97,1,0.95,0.97,0.75,0.81,1,1,0.9,0.77,1,0.87,0.67,1,0.89,0.76,0.75,0.81,1,0.77,0.83,1,1,0.91,0.81,1,0.77,0.46,1,0.91,0.81,1,0.87,0.67,0.76,0.82,1,1,0.9,0.78,0.75,0.81,1,1,0.91,0.8,0.78,0.84,1,1,0.9,0.78,1,0.88,0.73,1,0.76,0.43,1,0.77,0.46,1,0.91,0.79,0.75,0.81,1,1,0.9,0.76,0.92,0.92,0.99,0.78,0.84,1,1,0.95,0.98,1,0.88,0.7,0.75,0.81,1,0.75,0.82,1,0.85,0.88,0.99,0.75,0.81,1,1,0.85,0.63,0.92,0.91,0.99,1,0.8,0.52,0.75,0.82,1,0.75,0.82,1,0.75,0.81,1,1,0.92,0.84,0.82,0.86,1,0.79,0.85,1,0.77,0.83,1,1,0.91,0.8,1,0.9,0.77,1,0.83,0.59,0.77,0.83,1,1,0.78,0.48,0.79,0.85,1,0.75,0.81,1,1,0.78,0.49,0.98,0.94,0.98,0.75,0.81,1,1,0.93,0.89,1,0.91,0.81,0.75,0.82,1,1,0.95,0.98,1,0.9,0.79,0.92,0.91,0.99,0.77,0.83,1,1,0.91,0.81,0.78,0.84,1,0.99,0.95,0.98,0.84,0.87,1,0.93,0.92,0.99,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,0.75,0.81,1,1,0.88,0.71,0.75,0.81,1,1,0.77,0.46,1,0.89,0.73,0.77,0.83,1,1,0.78,0.48,1,0.94,0.95,1,0.88,0.7,1,0.95,0.95,0.89,0.9,0.99,0.77,0.83,1,0.75,0.81,1,1,0.89,0.73,1,0.95,0.97,1,0.64,0.081,0.75,0.81,1,1,0.86,0.64,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.94,0.94,0.75,0.81,1,0.77,0.83,1,1,0.88,0.7,0.98,0.94,0.98,0.75,0.82,1,0.78,0.84,1,1,0.87,0.67,0.75,0.81,1,1,0.78,0.47,0.79,0.84,1,1,0.81,0.53,0.97,0.94,0.98,0.75,0.82,1,1,0.91,0.79,1,0.93,0.89,0.75,0.81,1,0.81,0.86,1,0.75,0.82,1,0.77,0.83,1,1,0.88,0.72,0.9,0.91,0.99,0.88,0.89,0.99,1,0.9,0.79,0.81,0.86,1,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.85,0.88,1,1,0.89,0.74,1,0.88,0.73,0.79,0.85,1,1,0.79,0.5,1,0.81,0.53,0.9,0.9,0.99,0.77,0.83,1,1,0.91,0.82,0.97,0.94,0.98,0.92,0.91,0.99,1,0.94,0.95,0.71,0.78,1,1,0.89,0.75,0.75,0.81,1,0.76,0.82,1,1,0.91,0.8,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.74,0.4,0.75,0.81,1,0.76,0.82,1,1,0.9,0.77,0.75,0.81,1,0.89,0.9,0.99,0.76,0.83,1,1,0.91,0.8,0.75,0.81,1,1,0.84,0.6,0.81,0.86,1,1,0.92,0.84,1,0.9,0.79,0.75,0.81,1,1,0.77,0.45,1,0.66,0.17,1,0.89,0.75,1,0.91,0.81,1,0.78,0.48,0.79,0.85,1,0.95,0.93,0.98,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.81,0.54,1,0.83,0.58,0.93,0.92,0.99,1,0.91,0.83,0.79,0.84,1,1,0.87,0.67,1,0.94,0.94,0.75,0.81,1,1,0.91,0.82,0.78,0.84,1,0.78,0.84,1,0.7,0.77,1,1,0.87,0.67,1,0.76,0.45,0.78,0.84,1,1,0.94,0.94,1,0.81,0.54,1,0.79,0.51,0.78,0.84,1,0.77,0.83,1,1,0.87,0.67,1,0.75,0.41,1,0.89,0.74,0.75,0.82,1,0.75,0.82,1,1,0.92,0.83,0.75,0.81,1,0.75,0.81,1,1,0.87,0.69,1,0.88,0.71,0.76,0.82,1,1,0.8,0.52,1,0.85,0.62,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.91,0.82,1,0.82,0.57,1,0.88,0.73,0.79,0.85,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.9,0.78,0.75,0.81,1,0.75,0.81,1,1,0.76,0.43,1,0.9,0.77,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,1,0.8,0.52,0.75,0.81,1,1,0.77,0.45,1,0.7,0.31,0.75,0.81,1,1,0.94,0.94,0.78,0.84,1,1,0.85,0.62,1,0.8,0.52,1,0.89,0.75,0.75,0.81,1,0.89,0.9,0.99,1,0.92,0.86,1,0.89,0.74,0.78,0.84,1,1,0.91,0.8,0.75,0.81,1,0.75,0.81,1,1,0.95,0.97,0.8,0.85,1,1,0.91,0.81,1,0.85,0.62,0.75,0.81,1,1,0.8,0.53,0.88,0.89,0.99,0.75,0.81,1,1,0.92,0.85,0.75,0.81,1,1,0.88,0.7,0.75,0.81,1,1,0.87,0.68,1,0.83,0.58,0.75,0.81,1,1,0.87,0.67,0.76,0.82,1,1,0.82,0.57,1,0.94,0.94,0.76,0.82,1,1,0.89,0.75,1,0.94,0.93,1,0.76,0.45,1,0.92,0.85,0.75,0.82,1,0.75,0.81,1,1,0.76,0.43,1,0.83,0.58,0.8,0.85,1,1,0.76,0.43,1,0.76,0.43,1,0.79,0.5,1,0.88,0.72,0.84,0.87,1,0.76,0.82,1,1,0.95,0.97,1,0.77,0.45,0.78,0.84,1,0.75,0.81,1,1,0.79,0.5,1,0.83,0.58,1,0.9,0.77,0.75,0.81,1,0.75,0.81,1,1,0.86,0.64,1,0.94,0.92,1,0.76,0.45,0.75,0.81,1,0.78,0.84,1,0.77,0.83,1,1,0.85,0.62,1,0.87,0.66,0.77,0.83,1,1,0.93,0.91,1,0.87,0.67,0.79,0.85,1,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.98,0.94,0.98,1,0.78,0.47,1,0.82,0.56,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,1,0.94,0.94,1,0.86,0.64,0.76,0.82,1,1,0.84,0.61,0.86,0.88,0.99,0.81,0.86,1,1,0.95,0.97,1,0.82,0.57,0.75,0.81,1,1,0.79,0.5,0.79,0.85,1,1,0.88,0.71,0.75,0.82,1,0.78,0.84,1,1,0.9,0.76,0.75,0.81,1,1,0.91,0.82,0.78,0.83,1,1,0.9,0.78,1,0.87,0.67,0.82,0.86,1,0.75,0.81,1,0.78,0.84,1,0.75,0.82,1,0.89,0.9,0.99,1,0.76,0.45,1,0.95,0.98,0.78,0.84,1,0.75,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.88,0.72,0.75,0.81,1,0.75,0.81,1,1,0.95,0.96,1,0.95,0.98,1,0.85,0.62,1,0.91,0.8,1,0.91,0.82,0.76,0.82,1,1,0.82,0.56,1,0.83,0.59,0.76,0.82,1,1,0.88,0.71,1,0.9,0.79,1,0.81,0.54,0.75,0.81,1,0.76,0.82,1,1,0.83,0.59,0.79,0.85,1,0.75,0.81,1,0.75,0.82,1,1,0.86,0.65,1,0.88,0.7,0.75,0.81,1,1,0.92,0.85,0.77,0.83,1,1,0.85,0.63,1,0.89,0.76,0.76,0.82,1,1,0.95,0.97,1,0.76,0.44,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,1,0.86,0.65,0.75,0.81,1,0.79,0.84,1,0.88,0.89,0.99,1,0.94,0.94,0.75,0.81,1,0.8,0.85,1,1,0.85,0.62,0.75,0.81,1,0.77,0.83,1,1,0.91,0.81,1,0.92,0.86,1,0.93,0.89,0.75,0.81,1,0.75,0.81,1,1,0.8,0.52,1,0.77,0.47,1,0.91,0.8,0.75,0.81,1,0.99,0.95,0.98,1,0.86,0.66,1,0.82,0.57,1,0.84,0.61,0.76,0.82,1,0.75,0.81,1,1,0.93,0.87,1,0.91,0.8,1,0.88,0.7,0.75,0.81,1,0.77,0.83,1,1,0.78,0.47,1,0.77,0.45,0.75,0.82,1,1,0.89,0.74,1,0.75,0.42,0.75,0.81,1,0.75,0.82,1,1,0.92,0.84,1,0.77,0.46,1,0.89,0.75,0.75,0.82,1,0.79,0.84,1,0.93,0.92,0.99,1,0.92,0.86,1,0.88,0.72,0.75,0.81,1,0.75,0.81,1,1,0.87,0.67,1,0.74,0.4,0.75,0.81,1,1,0.77,0.46,0.75,0.81,1,0.77,0.83,1,0.78,0.84,1,1,0.9,0.79,1,0.86,0.65,0.76,0.82,1,0.75,0.81,1,1,0.86,0.66,0.91,0.91,0.99,1,0.76,0.45,1,0.95,0.96,1,0.92,0.86,0.75,0.81,1,0.78,0.84,1,0.75,0.81,1,0.75,0.82,1,0.76,0.82,1,0.75,0.81,1,1,0.89,0.76,1,0.9,0.78,0.75,0.82,1,1,0.95,0.95,0.76,0.82,1,1,0.89,0.75,0.76,0.82,1,1,0.91,0.8,1,0.88,0.7,0.75,0.82,1,0.77,0.83,1,1,0.9,0.76,1,0.77,0.45,1,0.9,0.79,0.75,0.81,1,0.78,0.83,1,0.68,0.76,1,1,0.77,0.45,0.83,0.87,1,1,0.9,0.77,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,0.89,0.9,0.99,1,0.9,0.77,0.78,0.83,1,0.76,0.82,1,1,0.76,0.43,0.72,0.79,1,1,0.92,0.84,0.97,0.94,0.98,0.75,0.81,1,1,0.76,0.43,1,0.77,0.45,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,1,0.86,0.66,1,0.77,0.46,0.75,0.81,1,0.77,0.83,1,0.79,0.84,1,1,0.9,0.79,0.75,0.81,1,0.91,0.91,0.99,0.98,0.94,0.98,0.76,0.82,1,1,0.9,0.79,1,0.94,0.95,0.77,0.83,1,0.79,0.85,1,1,0.89,0.73,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,1,0.89,0.75,0.75,0.81,1,1,0.91,0.81,0.75,0.81,1,0.97,0.94,0.98,0.77,0.83,1,1,0.91,0.81,0.75,0.82,1,1,0.89,0.75,0.83,0.87,1,0.71,0.78,1,0.87,0.89,0.99,1,0.77,0.45,0.75,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.85,0.63,1,0.88,0.72,1,0.9,0.78,1,0.92,0.87,1,0.76,0.43,1,0.91,0.8,0.78,0.84,1,1,0.89,0.74,0.75,0.81,1,1,0.89,0.76,0.77,0.83,1,0.76,0.82,1,1,0.95,0.97,0.88,0.89,0.99,1,0.85,0.62,0.76,0.82,1,0.78,0.84,1,1,0.92,0.86,1,0.91,0.82,1,0.9,0.77,1,0.91,0.8,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,1,0.83,0.59,1,0.77,0.45,1,0.92,0.85,1,0.76,0.44,0.77,0.83,1,1,0.75,0.41,1,0.9,0.78,0.78,0.84,1,1,0.82,0.57,1,0.9,0.77,1,0.94,0.93,0.75,0.81,1,1,0.89,0.74,1,0.79,0.51,1,0.77,0.47,1,0.89,0.73,0.75,0.81,1,1,0.89,0.73,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.94,0.92,0.99,0.86,0.88,0.99,1,0.93,0.88,0.79,0.85,1,1,0.81,0.54,0.76,0.82,1,0.75,0.81,1,0.91,0.91,0.99,1,0.72,0.36,1,0.95,0.97,1,0.77,0.45,0.79,0.85,1,1,0.76,0.43,1,0.91,0.82,1,0.9,0.79,0.75,0.81,1,1,0.88,0.72,1,0.89,0.75,0.76,0.82,1,1,0.93,0.91,1,0.89,0.74,0.75,0.81,1,1,0.76,0.44,0.72,0.79,1,1,0.91,0.8,1,0.87,0.68,0.79,0.85,1,0.76,0.82,1,0.78,0.84,1,0.75,0.81,1,1,0.89,0.76,0.8,0.85,1,0.75,0.81,1,1,0.87,0.69,1,0.91,0.83,1,0.78,0.48,0.82,0.86,1,0.78,0.83,1,1,0.77,0.45,0.79,0.84,1,1,0.89,0.75,0.82,0.86,1,0.75,0.81,1,0.76,0.82,1,0.95,0.93,0.98,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.94,0.92,0.99,0.77,0.83,1,1,0.78,0.48,1,0.93,0.89,1,0.91,0.8,1,0.78,0.48,0.75,0.82,1,0.75,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.76,0.83,1,0.75,0.81,1,1,0.78,0.49,0.75,0.81,1,0.79,0.84,1,1,0.77,0.46,0.75,0.81,1,0.79,0.85,1,1,0.92,0.84,0.76,0.82,1,1,0.83,0.58,1,0.91,0.81,1,0.82,0.56,0.76,0.82,1,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.77,0.83,1,1,0.91,0.82,1,0.77,0.46,1,0.88,0.71,1,0.76,0.44,1,0.92,0.86,1,0.86,0.65,0.91,0.91,0.99,0.75,0.81,1,0.79,0.84,1,1,0.84,0.61,1,0.9,0.76,1,0.89,0.75,0.77,0.83,1,1,0.81,0.55,1,0.91,0.8,1,0.78,0.48,1,0.77,0.45,0.93,0.92,0.99,0.91,0.91,0.99,1,0.94,0.93,1,0.81,0.54,0.87,0.89,0.99,0.75,0.81,1,0.88,0.89,0.99,1,0.85,0.62,1,0.85,0.62,1,0.78,0.47,0.77,0.83,1,1,0.93,0.88,0.78,0.84,1,0.79,0.85,1,0.7,0.77,1,0.76,0.82,1,0.75,0.81,1,1,0.95,0.97,0.95,0.93,0.99,1,0.95,0.97,1,0.76,0.43,0.81,0.86,1,1,0.84,0.6,0.76,0.82,1,0.79,0.85,1,0.78,0.84,1,0.75,0.82,1,1,0.89,0.74,1,0.77,0.46,0.79,0.85,1,1,0.81,0.54,0.75,0.81,1,1,0.91,0.8,0.75,0.81,1,1,0.9,0.76,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.91,0.8,1,0.92,0.86,0.75,0.81,1,1,0.95,0.96,0.79,0.84,1,0.75,0.82,1,0.78,0.83,1,0.75,0.81,1,1,0.85,0.63,0.99,0.95,0.98,0.78,0.84,1,1,0.91,0.81,0.75,0.81,1,0.75,0.82,1,1,0.79,0.51,1,0.82,0.56,1,0.89,0.73,1,0.75,0.41,1,0.79,0.5,0.75,0.82,1,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,0.75,0.82,1,0.75,0.82,1,0.81,0.86,1,1,0.84,0.61,1,0.9,0.77,0.75,0.81,1,0.75,0.81,1,1,0.9,0.77,1,0.78,0.47,1,0.93,0.9,1,0.83,0.59,0.75,0.82,1,1,0.95,0.95,1,0.91,0.83,0.78,0.84,1,1,0.8,0.52,0.74,0.8,1,1,0.82,0.57,1,0.88,0.71,1,0.95,0.96,0.75,0.81,1,0.79,0.84,1,1,0.95,0.96,0.76,0.82,1,0.83,0.87,1,0.77,0.83,1,1,0.79,0.51,1,0.86,0.66,1,0.87,0.68,0.78,0.84,1,0.75,0.81,1,0.75,0.81,1,1,0.75,0.41,1,0.92,0.85,1,0.86,0.64,0.92,0.91,0.99,0.95,0.93,0.99,0.76,0.82,1,0.75,0.81,1,1,0.76,0.45,1,0.81,0.54,0.75,0.81,1,0.76,0.82,1,1,0.94,0.92,0.75,0.81,1,1,0.84,0.6,0.79,0.85,1,1,0.86,0.65,1,0.89,0.73,0.89,0.9,0.99,1,0.82,0.56,1,0.79,0.51,1,0.94,0.94,1,0.93,0.9,1,0.92,0.86,0.75,0.81,1,0.75,0.81,1,1,0.9,0.77,1,0.87,0.68,0.78,0.84,1,1,0.85,0.64,1,0.79,0.5,1,0.86,0.64,0.87,0.89,0.99,1,0.91,0.82,1,0.89,0.75,1,0.86,0.66,0.75,0.81,1,0.95,0.93,0.99,0.76,0.82,1,1,0.79,0.5,0.79,0.84,1,0.75,0.81,1,1,0.93,0.9,1,0.85,0.62,1,0.87,0.66,1,0.91,0.81,0.75,0.81,1,1,0.76,0.43,1,0.91,0.81,0.77,0.83,1,1,0.91,0.81,1,0.9,0.79,1,0.79,0.51,0.75,0.82,1,1,0.9,0.77,1,0.9,0.78,0.76,0.82,1,1,0.77,0.47,0.79,0.85,1,0.97,0.94,0.98,0.75,0.81,1,1,0.81,0.54,1,0.95,0.95,0.95,0.93,0.99,1,0.8,0.53,1,0.88,0.72,1,0.91,0.82,0.75,0.82,1,1,0.87,0.67,0.75,0.82,1,1,0.88,0.73,0.77,0.83,1,1,0.86,0.65,1,0.76,0.43,0.75,0.81,1,1,0.89,0.73,1,0.88,0.71,0.75,0.82,1,0.75,0.81,1,1,0.89,0.75,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.87,0.67,0.98,0.94,0.98,1,0.76,0.44,1,0.88,0.7,1,0.89,0.75,1,0.88,0.71,1,0.87,0.69,1,0.91,0.8,0.75,0.81,1,0.99,0.95,0.98,1,0.8,0.52,0.75,0.81,1,0.75,0.81,1,0.91,0.91,0.99,1,0.81,0.54,1,0.95,0.98,1,0.56,0,1,0.94,0.91,0.75,0.81,1,1,0.91,0.81,0.79,0.84,1,0.77,0.83,1,0.79,0.85,1,1,0.9,0.79,1,0.89,0.76,0.74,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.85,0.63,1,0.87,0.68,0.76,0.82,1,0.75,0.82,1,0.99,0.95,0.98,0.75,0.81,1,0.75,0.82,1,1,0.95,0.96,0.75,0.81,1,1,0.79,0.5,1,0.94,0.95,1,0.83,0.59,0.75,0.81,1,1,0.94,0.91,1,0.76,0.44,1,0.89,0.75,1,0.8,0.52,1,0.91,0.8,0.75,0.81,1,0.9,0.9,0.99,0.75,0.82,1,0.87,0.89,0.99,1,0.88,0.71,0.97,0.94,0.98,0.77,0.83,1,1,0.87,0.67,1,0.76,0.44,1,0.76,0.44,0.75,0.82,1,1,0.8,0.53,0.75,0.81,1,0.78,0.84,1,1,0.69,0.28,0.77,0.83,1,1,0.76,0.43,1,0.88,0.71,0.87,0.89,0.99,0.79,0.85,1,0.76,0.82,1,1,0.8,0.53,0.75,0.82,1,0.95,0.93,0.99,0.79,0.85,1,1,0.77,0.45,0.75,0.81,1,1,0.91,0.81,1,0.86,0.66,0.83,0.87,1,0.79,0.85,1,1,0.9,0.79,0.76,0.82,1,1,0.82,0.56,0.77,0.83,1,1,0.86,0.65,0.75,0.81,1,1,0.95,0.97,1,0.95,0.96,1,0.88,0.7,1,0.9,0.79,1,0.93,0.9,0.87,0.89,0.99,1,0.74,0.41,1,0.9,0.77,0.93,0.92,0.99,0.77,0.83,1,0.75,0.81,1,1,0.77,0.45,0.75,0.81,1,0.77,0.83,1,1,0.84,0.6,1,0.76,0.44,1,0.91,0.8,1,0.92,0.87,1,0.85,0.63,1,0.75,0.41,0.75,0.81,1,1,0.87,0.69,0.76,0.82,1,1,0.77,0.47,0.75,0.81,1,1,0.75,0.41,1,0.89,0.74,1,0.89,0.73,0.75,0.81,1,1,0.8,0.52,0.76,0.82,1,0.75,0.81,1,0.99,0.95,0.98,0.78,0.84,1,1,0.93,0.9,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.9,0.76,1,0.83,0.59,0.75,0.81,1,1,0.89,0.75,0.89,0.9,0.99,0.75,0.81,1,1,0.82,0.57,1,0.77,0.47,0.76,0.82,1,1,0.6,0,0.75,0.81,1,1,0.94,0.93,0.75,0.81,1,0.76,0.82,1,1,0.87,0.68,1,0.91,0.8,0.76,0.82,1,1,0.89,0.73,0.79,0.85,1,1,0.85,0.63,1,0.75,0.42,1,0.89,0.73,1,0.75,0.43,1,0.75,0.41,1,0.95,0.95,0.75,0.81,1,0.75,0.81,1,1,0.82,0.56,1,0.87,0.68,1,0.88,0.7,0.77,0.83,1,0.75,0.81,1,1,0.87,0.67,1,0.93,0.89,0.75,0.81,1,1,0.84,0.6,1,0.92,0.86,1,0.76,0.45,1,0.82,0.56,0.79,0.85,1,1,0.88,0.71,1,0.82,0.56,0.84,0.87,1,0.77,0.83,1,0.84,0.87,1,0.75,0.82,1,0.75,0.81,1,1,0.78,0.48,1,0.81,0.54,0.78,0.84,1,1,0.82,0.57,0.77,0.83,1,0.77,0.83,1,0.75,0.81,1,0.76,0.83,1,0.78,0.84,1,1,0.91,0.8,1,0.77,0.46,1,0.76,0.44,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.8,0.53,0.76,0.82,1,0.75,0.81,1,1,0.85,0.62,1,0.82,0.56,0.75,0.81,1,1,0.9,0.77,1,0.88,0.72,1,0.86,0.66,0.78,0.84,1,1,0.89,0.74,1,0.9,0.76,1,0.87,0.68,0.75,0.81,1,0.75,0.81,1,1,0.95,0.97,1,0.94,0.95,1,0.9,0.77,0.94,0.92,0.99,0.75,0.81,1,1,0.86,0.65,1,0.79,0.5,1,0.72,0.36,0.75,0.82,1,0.99,0.95,0.98,1,0.95,0.96,0.75,0.81,1,0.75,0.81,1,1,0.86,0.66,0.77,0.83,1,1,0.89,0.73,1,0.8,0.52,1,0.92,0.86,1,0.78,0.48,1,0.91,0.8,1,0.75,0.42,1,0.91,0.81,1,0.83,0.57,0.78,0.84,1,1,0.87,0.67,0.75,0.81,1,0.98,0.94,0.98,0.76,0.82,1,0.75,0.82,1,0.75,0.82,1,0.75,0.82,1,0.9,0.9,0.99,1,0.77,0.46,1,0.91,0.82,1,0.89,0.73,0.78,0.84,1,1,0.77,0.45,1,0.71,0.32,1,0.88,0.7,0.97,0.94,0.98,1,0.84,0.6,0.75,0.81,1,1,0.81,0.55,1,0.92,0.85,1,0.76,0.45,1,0.9,0.79,1,0.76,0.44,1,0.75,0.42,0.77,0.83,1,0.76,0.82,1,0.78,0.84,1,1,0.8,0.53,1,0.89,0.75,1,0.89,0.74,1,0.88,0.71,1,0.8,0.53,0.75,0.81,1,1,0.82,0.56,0.76,0.82,1,1,0.95,0.97,1,0.76,0.44,0.75,0.81,1,0.77,0.83,1,0.79,0.84,1,0.76,0.82,1,0.77,0.83,1,1,0.9,0.77,1,0.83,0.58,0.75,0.81,1,0.84,0.87,1,0.75,0.81,1,1,0.94,0.93,1,0.87,0.68,1,0.76,0.44,0.75,0.81,1,1,0.85,0.63,0.75,0.81,1,1,0.78,0.48,0.75,0.81,1,0.76,0.82,1,1,0.72,0.36,1,0.84,0.61,1,0.79,0.51,0.75,0.81,1,0.77,0.83,1,0.76,0.82,1,1,0.88,0.7,0.89,0.9,0.99,0.78,0.84,1,1,0.85,0.62,0.93,0.92,0.99,1,0.79,0.51,1,0.91,0.81,1,0.76,0.44,1,0.92,0.87,1,0.79,0.5,1,0.79,0.5,0.96,0.93,0.98,1,0.88,0.7,0.76,0.82,1,0.75,0.81,1,1,0.95,0.96,1,0.77,0.45,0.75,0.82,1,0.75,0.81,1,0.78,0.84,1,0.94,0.92,0.99,1,0.87,0.68,0.75,0.81,1,0.75,0.81,1,1,0.79,0.51,0.79,0.85,1,1,0.9,0.76,1,0.76,0.45,1,0.93,0.89,1,0.95,0.97,0.78,0.84,1,1,0.79,0.51,1,0.86,0.65,0.75,0.82,1,1,0.75,0.42,0.75,0.81,1,1,0.94,0.91,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.97,0.94,0.98,1,0.87,0.69,1,0.91,0.82,0.79,0.85,1,0.75,0.81,1,1,0.91,0.83,0.92,0.92,0.99,0.82,0.86,1,1,0.87,0.69,0.75,0.81,1,0.78,0.84,1,1,0.87,0.69,1,0.77,0.46,1,0.77,0.45,0.76,0.82,1,1,0.95,0.98,1,0.94,0.95,0.75,0.81,1,1,0.88,0.72,1,0.9,0.78,0.75,0.81,1,1,0.75,0.42,0.77,0.83,1,0.75,0.81,1,1,0.82,0.57,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.91,0.8,1,0.89,0.75,1,0.87,0.69,0.75,0.82,1,1,0.84,0.61,1,0.88,0.72,0.75,0.81,1,0.75,0.81,1,1,0.93,0.9,0.75,0.82,1,0.79,0.84,1,1,0.92,0.83,0.75,0.81,1,0.75,0.81,1,0.77,0.83,1,0.78,0.84,1,1,0.95,0.98,1,0.81,0.55,1,0.93,0.89,1,0.72,0.35,0.75,0.81,1,0.79,0.85,1,1,0.94,0.93,0.75,0.81,1,1,0.77,0.45,1,0.87,0.67,0.76,0.82,1,0.94,0.92,0.99,0.75,0.81,1,0.75,0.82,1,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.88,0.89,0.99,0.89,0.9,0.99,1,0.83,0.58,1,0.91,0.8,0.76,0.82,1,1,0.84,0.6,0.75,0.81,1,1,0.78,0.48,1,0.89,0.74,1,0.88,0.7,0.75,0.81,1,0.74,0.81,1,0.75,0.81,1,1,0.77,0.45,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.77,0.83,1,1,0.87,0.69,1,0.87,0.68,1,0.79,0.5,1,0.89,0.73,1,0.76,0.45,0.75,0.81,1,1,0.77,0.46,1,0.84,0.61,0.77,0.83,1,1,0.83,0.59,1,0.74,0.4,0.75,0.82,1,1,0.85,0.63,1,0.94,0.94,0.76,0.82,1,0.75,0.81,1,1,0.77,0.45,1,0.9,0.79,0.77,0.83,1,1,0.9,0.77,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,1,0.87,0.68,1,0.89,0.74,1,0.88,0.7,1,0.89,0.76,1,0.91,0.8,0.76,0.82,1,0.75,0.81,1,0.95,0.93,0.98,0.75,0.81,1,0.75,0.81,1,0.98,0.94,0.98,0.78,0.84,1,1,0.86,0.66,1,0.88,0.7,0.76,0.82,1,0.76,0.82,1,0.8,0.86,1,1,0.95,0.96,0.86,0.88,0.99,1,0.78,0.47,1,0.91,0.8,1,0.78,0.48,1,0.9,0.78,0.75,0.81,1,0.85,0.88,1,0.75,0.81,1,1,0.85,0.62,1,0.88,0.72,1,0.88,0.7,0.75,0.81,1,1,0.76,0.43,0.75,0.81,1,1,0.86,0.65,1,0.82,0.57,0.93,0.92,0.99,0.79,0.84,1,1,0.83,0.58,1,0.93,0.9,0.78,0.84,1,0.76,0.82,1,1,0.91,0.8,0.75,0.81,1,1,0.87,0.69,1,0.95,0.95,1,0.9,0.76,1,0.89,0.73,0.8,0.85,1,0.75,0.81,1,1,0.76,0.45,0.76,0.82,1,0.77,0.83,1,1,0.67,0.18,0.76,0.82,1,0.99,0.95,0.98,1,0.91,0.8,1,0.77,0.46,1,0.79,0.5,1,0.89,0.76,1,0.84,0.6,0.75,0.81,1,0.75,0.82,1,1,0.89,0.76,0.99,0.95,0.98,1,0.87,0.69,1,0.77,0.45,0.95,0.93,0.99,0.75,0.81,1,0.76,0.82,1,1,0.9,0.77,0.75,0.81,1,0.96,0.93,0.98,0.75,0.81,1,1,0.75,0.42,1,0.81,0.55,0.75,0.82,1,0.94,0.92,0.99,1,0.76,0.43,1,0.85,0.62,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.88,0.7,0.86,0.88,0.99,1,0.89,0.74,0.75,0.81,1,1,0.89,0.75,1,0.75,0.42,0.77,0.83,1,1,0.89,0.74,1,0.82,0.57,0.75,0.81,1,1,0.9,0.76,0.75,0.81,1,1,0.94,0.91,0.75,0.81,1,0.79,0.85,1,1,0.8,0.51,1,0.8,0.51,1,0.84,0.6,1,0.77,0.45,0.75,0.81,1,1,0.9,0.78,1,0.79,0.49,1,0.89,0.75,0.78,0.84,1,0.76,0.82,1,0.75,0.81,1,0.92,0.91,0.99,0.78,0.84,1,1,0.87,0.68,0.75,0.82,1,0.81,0.86,1,0.9,0.9,0.99,1,0.95,0.96,1,0.95,0.95,0.79,0.84,1,1,0.78,0.48,0.75,0.81,1,1,0.89,0.73,1,0.75,0.42,0.99,0.95,0.98,0.77,0.83,1,0.94,0.92,0.99,0.87,0.89,0.99,0.77,0.83,1,0.75,0.81,1,1,0.9,0.78,1,0.85,0.62,1,0.94,0.94,0.77,0.83,1,1,0.9,0.78,0.85,0.88,1,1,0.88,0.71,1,0.91,0.8,1,0.75,0.42,0.75,0.81,1,0.76,0.82,1,0.76,0.82,1,1,0.93,0.91,0.99,0.95,0.98,0.77,0.83,1,1,0.95,0.97,1,0.93,0.89,1,0.91,0.81,0.79,0.84,1,0.76,0.82,1,1,0.84,0.61,0.79,0.85,1,0.92,0.91,0.99,0.75,0.82,1,1,0.84,0.61,0.76,0.83,1,0.93,0.92,0.99,0.75,0.81,1,1,0.87,0.67,1,0.95,0.97,1,0.93,0.87,0.75,0.81,1,1,0.91,0.8,1,0.86,0.65,1,0.87,0.67,0.75,0.81,1,0.75,0.82,1,1,0.89,0.76,0.76,0.82,1,0.75,0.82,1,0.75,0.81,1,0.77,0.83,1,1,0.78,0.49,1,0.87,0.69,0.75,0.81,1,0.67,0.74,1,1,0.81,0.55,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.94,0.94,0.82,0.86,1,1,0.79,0.49,0.99,0.95,0.98,1,0.77,0.45,1,0.87,0.67,1,0.9,0.78,0.75,0.82,1,1,0.75,0.41,1,0.89,0.75,0.77,0.83,1,1,0.88,0.73,0.75,0.81,1,1,0.94,0.94,1,0.9,0.77,1,0.75,0.42,0.75,0.81,1,1,0.86,0.66,1,0.73,0.37,0.75,0.82,1,1,0.91,0.82,0.75,0.81,1,1,0.9,0.78,1,0.94,0.94,1,0.77,0.45,0.76,0.82,1,1,0.85,0.63,1,0.89,0.73,0.78,0.84,1,1,0.87,0.69,0.75,0.81,1,0.76,0.83,1,0.78,0.84,1,0.79,0.85,1,1,0.95,0.95,0.76,0.82,1,1,0.74,0.39,0.75,0.82,1,0.93,0.92,0.99,1,0.88,0.71,0.76,0.82,1,1,0.9,0.79,0.78,0.84,1,1,0.88,0.72,0.95,0.93,0.98,0.75,0.81,1,0.75,0.82,1,0.78,0.84,1,1,0.79,0.51,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.76,0.43,0.99,0.95,0.98,1,0.92,0.86,1,0.94,0.94,0.86,0.89,0.99,1,0.88,0.7,1,0.88,0.72,1,0.92,0.86,0.78,0.83,1,0.82,0.86,1,0.91,0.91,0.99,0.86,0.88,0.99,0.75,0.82,1,1,0.85,0.63,1,0.78,0.48,1,0.78,0.49,1,0.9,0.77,1,0.89,0.76,1,0.9,0.78,1,0.89,0.75,0.75,0.81,1,0.94,0.93,0.99,0.85,0.88,1,1,0.9,0.79,0.75,0.82,1,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,1,0.87,0.69,1,0.74,0.4,0.78,0.84,1,0.75,0.81,1,0.9,0.9,0.99,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.79,0.85,1,0.82,0.86,1,0.79,0.85,1,1,0.9,0.77,0.75,0.82,1,1,0.81,0.55,0.77,0.83,1,0.75,0.81,1,1,0.77,0.45,1,0.9,0.78,1,0.89,0.75,1,0.81,0.55,0.96,0.93,0.98,1,0.77,0.46,0.75,0.81,1,1,0.85,0.63,0.75,0.81,1,1,0.9,0.76,1,0.91,0.81,0.75,0.81,1,0.75,0.81,1,0.8,0.85,1,0.75,0.81,1,0.98,0.94,0.98,0.8,0.85,1,1,0.91,0.8,1,0.9,0.77,1,0.94,0.94,0.76,0.82,1,1,0.88,0.71,1,0.94,0.94,0.84,0.87,1,0.87,0.89,0.99,0.96,0.93,0.98,0.85,0.88,0.99,1,0.92,0.84,0.75,0.81,1,1,0.94,0.94,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.79,0.84,1,1,0.9,0.79,1,0.8,0.52,0.75,0.82,1,0.79,0.85,1,1,0.94,0.95,0.76,0.82,1,0.79,0.84,1,0.75,0.82,1,0.75,0.81,1,1,0.87,0.67,1,0.79,0.5,1,0.89,0.73,1,0.9,0.79,1,0.81,0.55,1,0.74,0.39,1,0.84,0.61,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,0.96,0.93,0.98,1,0.9,0.77,1,0.95,0.97,1,0.91,0.8,0.75,0.81,1,0.88,0.89,0.99,1,0.89,0.74,0.75,0.82,1,0.77,0.83,1,0.73,0.8,1,1,0.9,0.77,1,0.86,0.66,0.76,0.82,1,1,0.7,0.3,0.83,0.87,1,0.9,0.9,0.99,1,0.91,0.82,0.78,0.84,1,0.75,0.81,1,1,0.85,0.62,1,0.9,0.79,0.75,0.81,1,0.96,0.93,0.98,0.75,0.81,1,1,0.85,0.63,0.75,0.81,1,0.78,0.84,1,0.79,0.84,1,1,0.92,0.85,0.79,0.84,1,0.75,0.82,1,1,0.9,0.77,0.75,0.81,1,0.75,0.81,1,1,0.9,0.78,0.77,0.83,1,0.79,0.85,1,1,0.9,0.77,1,0.91,0.82,0.75,0.81,1,1,0.76,0.43,1,0.73,0.38,1,0.91,0.8,1,0.88,0.7,1,0.85,0.64,1,0.78,0.47,1,0.9,0.76,0.84,0.87,1,0.75,0.82,1,1,0.84,0.61,1,0.9,0.77,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,0.77,0.83,1,0.79,0.85,1,1,0.7,0.32,1,0.84,0.61,0.78,0.84,1,1,0.79,0.51,1,0.83,0.58,1,0.81,0.54,0.76,0.82,1,1,0.95,0.98,1,0.95,0.95,1,0.75,0.42,1,0.93,0.87,1,0.81,0.54,0.75,0.82,1,1,0.83,0.58,1,0.9,0.78,0.92,0.91,0.99,0.75,0.81,1,0.78,0.84,1,0.77,0.83,1,0.99,0.95,0.98,0.75,0.81,1,1,0.75,0.42,0.87,0.89,0.99,0.75,0.82,1,0.75,0.82,1,0.75,0.82,1,0.76,0.82,1,1,0.77,0.46,0.76,0.82,1,0.79,0.84,1,0.75,0.81,1,0.75,0.81,1,1,0.76,0.44,0.76,0.82,1,0.88,0.89,0.99,1,0.89,0.73,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,1,0.94,0.95,0.75,0.82,1,1,0.81,0.55,1,0.94,0.91,0.8,0.85,1,1,0.89,0.73,1,0.79,0.51,0.89,0.9,0.99,0.75,0.82,1,0.76,0.82,1,1,0.75,0.42,0.81,0.86,1,0.86,0.88,0.99,1,0.9,0.77,0.79,0.84,1,0.75,0.81,1,0.75,0.82,1,0.8,0.85,1,0.75,0.81,1,1,0.9,0.79,0.79,0.84,1,0.75,0.81,1,1,0.89,0.76,0.75,0.82,1,1,0.84,0.6,0.77,0.83,1,1,0.88,0.7,1,0.82,0.56,0.79,0.84,1,1,0.91,0.82,0.79,0.85,1,0.76,0.83,1,0.9,0.9,0.99,1,0.9,0.78,0.76,0.82,1,1,0.9,0.76,0.76,0.82,1,0.76,0.82,1,1,0.78,0.48,1,0.91,0.8,1,0.94,0.92,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,0.87,0.89,0.99,0.76,0.82,1,1,0.78,0.47,1,0.79,0.49,1,0.88,0.7,0.78,0.84,1,1,0.9,0.79,1,0.9,0.77,1,0.81,0.54,0.96,0.93,0.98,0.75,0.82,1,0.75,0.81,1,1,0.75,0.42,1,0.81,0.54,1,0.9,0.78,0.78,0.84,1,1,0.91,0.8,0.75,0.82,1,1,0.89,0.74,0.75,0.82,1,0.79,0.85,1,1,0.87,0.67,1,0.86,0.66,1,0.93,0.89,0.76,0.82,1,1,0.81,0.55,1,0.91,0.83,0.8,0.85,1,1,0.93,0.89,1,0.91,0.81,1,0.76,0.43,1,0.94,0.91,0.75,0.82,1,1,0.91,0.8,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.93,0.88,1,0.79,0.51,0.76,0.82,1,1,0.84,0.62,0.75,0.81,1,0.91,0.91,0.99,0.76,0.82,1,0.76,0.82,1,1,0.88,0.71,0.75,0.81,1,1,0.77,0.45,0.75,0.81,1,1,0.86,0.64,1,0.91,0.83,0.92,0.91,0.99,0.75,0.81,1,0.75,0.82,1,1,0.88,0.72,1,0.76,0.43,1,0.86,0.64,0.83,0.87,1,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,1,0.77,0.46,1,0.85,0.62,0.75,0.81,1,1,0.84,0.6,0.75,0.81,1,1,0.93,0.88,0.78,0.84,1,1,0.77,0.46,1,0.92,0.85,1,0.79,0.51,1,0.91,0.82,0.92,0.91,0.99,0.75,0.81,1,0.75,0.81,1,0.91,0.91,0.99,0.75,0.81,1,1,0.89,0.74,0.75,0.81,1,0.95,0.93,0.99,0.75,0.81,1,1,0.9,0.78,1,0.93,0.91,1,0.89,0.76,1,0.89,0.74,0.92,0.91,0.99,0.95,0.93,0.98,0.79,0.85,1,0.75,0.82,1,0.75,0.82,1,0.75,0.82,1,1,0.9,0.78,0.76,0.82,1,0.82,0.86,1,0.76,0.82,1,1,0.83,0.59,0.89,0.9,0.99,1,0.87,0.69,1,0.87,0.69,0.75,0.81,1,1,0.95,0.97,1,0.79,0.5,0.89,0.9,0.99,0.78,0.84,1,0.79,0.85,1,1,0.88,0.71,1,0.88,0.72,0.97,0.94,0.98,1,0.9,0.77,1,0.91,0.81,1,0.88,0.71,1,0.86,0.65,1,0.75,0.42,1,0.75,0.43,0.99,0.95,0.98,1,0.81,0.55,1,0.87,0.68,1,0.9,0.76,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.87,0.67,1,0.77,0.47,1,0.91,0.82,0.89,0.9,0.99,1,0.89,0.76,1,0.95,0.98,0.83,0.87,1,0.75,0.81,1,0.75,0.81,1,1,0.83,0.58,1,0.85,0.63,1,0.86,0.65,0.75,0.81,1,1,0.94,0.94,0.75,0.81,1,1,0.91,0.82,1,0.83,0.59,1,0.76,0.44,0.78,0.84,1,0.75,0.81,1,0.75,0.82,1,1,0.9,0.77,0.8,0.86,1,0.75,0.81,1,1,0.91,0.82,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.87,0.68,1,0.94,0.93,1,0.77,0.46,1,0.78,0.49,0.92,0.91,0.99,0.75,0.81,1,0.75,0.81,1,1,0.83,0.58,1,0.9,0.78,1,0.78,0.48,0.77,0.83,1,1,0.81,0.54,1,0.93,0.91,0.78,0.84,1,0.78,0.84,1,1,0.84,0.61,1,0.8,0.53,1,0.78,0.47,1,0.94,0.93,0.99,0.95,0.98,0.78,0.84,1,1,0.77,0.45,0.76,0.82,1,0.79,0.84,1,1,0.86,0.66,0.75,0.81,1,1,0.8,0.52,1,0.83,0.58,0.75,0.82,1,1,0.88,0.72,1,0.95,0.97,1,0.75,0.42,1,0.95,0.97,0.75,0.82,1,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.91,0.91,0.99,1,0.94,0.92,0.75,0.81,1,1,0.78,0.48,0.76,0.82,1,0.75,0.82,1,0.76,0.82,1,0.77,0.83,1,0.75,0.81,1,0.75,0.82,1,1,0.94,0.93,1,0.9,0.78,1,0.88,0.71,0.88,0.9,0.99,1,0.84,0.61,1,0.82,0.57,0.9,0.9,0.99,1,0.92,0.83,1,0.89,0.76,0.74,0.81,1,1,0.87,0.66,0.77,0.83,1,1,0.91,0.81,0.75,0.82,1,0.75,0.81,1,0.85,0.88,0.99,0.79,0.85,1,1,0.92,0.86,0.77,0.83,1,1,0.83,0.58,0.75,0.81,1,0.75,0.81,1,1,0.78,0.48,1,0.91,0.8,0.77,0.83,1,1,0.91,0.8,0.76,0.82,1,0.75,0.81,1,1,0.94,0.93,1,0.8,0.53,1,0.9,0.78,0.75,0.81,1,1,0.8,0.51,0.75,0.81,1,1,0.94,0.95,0.79,0.84,1,0.77,0.83,1,0.76,0.82,1,0.75,0.81,1,1,0.88,0.7,1,0.95,0.95,0.77,0.83,1,1,0.79,0.5,0.79,0.85,1,0.75,0.81,1,0.95,0.93,0.99,1,0.56,0,0.75,0.81,1,1,0.89,0.73,1,0.94,0.94,1,0.9,0.77,1,0.92,0.87,0.75,0.82,1,0.75,0.82,1,0.79,0.84,1,0.75,0.81,1,1,0.78,0.49,1,0.94,0.93,1,0.92,0.83,0.75,0.82,1,0.75,0.82,1,1,0.87,0.69,1,0.86,0.65,0.75,0.81,1,0.75,0.82,1,0.75,0.82,1,1,0.83,0.58,0.76,0.82,1,1,0.85,0.64,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.83,0.87,1,1,0.76,0.44,0.88,0.89,0.99,0.79,0.84,1,0.75,0.82,1,1,0.8,0.52,0.81,0.86,1,0.79,0.84,1,1,0.88,0.71,1,0.76,0.43,0.75,0.81,1,0.75,0.81,1,0.76,0.83,1,0.75,0.81,1,1,0.87,0.69,1,0.81,0.54,0.91,0.91,0.99,1,0.78,0.47,0.75,0.81,1,1,0.91,0.82,1,0.89,0.75,1,0.83,0.59,0.77,0.83,1,0.83,0.87,1,1,0.86,0.66,1,0.81,0.54,1,0.8,0.53,0.75,0.81,1,0.75,0.81,1,1,0.91,0.82,1,0.75,0.42,1,0.75,0.42,1,0.89,0.76,1,0.53,0,1,0.79,0.5,0.75,0.81,1,1,0.75,0.42,0.76,0.82,1,0.75,0.81,1,1,0.91,0.81,1,0.76,0.43,1,0.81,0.55,0.86,0.88,0.99,1,0.91,0.81,0.79,0.84,1,1,0.74,0.39,1,0.82,0.56,0.79,0.84,1,0.8,0.85,1,1,0.91,0.81,1,0.74,0.4,0.76,0.82,1,0.76,0.82,1,1,0.77,0.46,0.75,0.81,1,0.75,0.82,1,0.85,0.88,0.99,0.75,0.81,1,0.77,0.83,1,0.96,0.94,0.98,0.84,0.87,1,0.88,0.89,0.99,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.87,0.67,1,0.8,0.53,1,0.9,0.77,1,0.93,0.91,1,0.88,0.72,0.79,0.84,1,0.78,0.84,1,0.75,0.81,1,1,0.91,0.8,0.75,0.81,1,1,0.95,0.97,1,0.91,0.81,0.76,0.82,1,1,0.95,0.97,0.78,0.84,1,0.81,0.86,1,1,0.87,0.67,1,0.8,0.52,0.78,0.84,1,0.77,0.83,1,0.77,0.83,1,0.75,0.81,1,0.75,0.82,1,1,0.79,0.5,0.75,0.82,1,0.77,0.83,1,1,0.87,0.67,1,0.91,0.83,1,0.81,0.53,1,0.77,0.46,0.81,0.86,1,1,0.89,0.75,1,0.91,0.82,1,0.75,0.43,1,0.88,0.71,0.78,0.84,1,0.75,0.82,1,0.75,0.82,1,0.87,0.89,0.99,0.75,0.81,1,1,0.88,0.7,0.75,0.81,1,1,0.85,0.64,0.76,0.82,1,0.89,0.9,0.99,1,0.87,0.69,0.75,0.81,1,1,0.89,0.75,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.9,0.78,0.76,0.82,1,0.75,0.81,1,1,0.9,0.77,0.75,0.81,1,1,0.88,0.7,1,0.77,0.45,1,0.74,0.4,1,0.9,0.78,1,0.8,0.53,0.93,0.92,0.99,0.79,0.85,1,0.77,0.83,1,0.75,0.81,1,0.77,0.83,1,1,0.94,0.91,1,0.89,0.76,1,0.92,0.85,0.79,0.84,1,1,0.89,0.73,0.77,0.83,1,1,0.94,0.93,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,0.76,0.82,1,1,0.9,0.76,1,0.76,0.43,0.76,0.82,1,0.75,0.81,1,1,0.88,0.72,1,0.78,0.47,1,0.9,0.79,1,0.95,0.97,1,0.85,0.63,1,0.83,0.58,1,0.75,0.41,0.77,0.83,1,1,0.82,0.57,0.84,0.87,1,1,0.81,0.54,0.75,0.81,1,1,0.8,0.51,0.83,0.87,1,0.78,0.84,1,0.77,0.83,1,1,0.89,0.74,0.76,0.82,1,0.75,0.81,1,1,0.87,0.69,1,0.95,0.98,0.75,0.81,1,0.82,0.86,1,1,0.84,0.61,1,0.91,0.83,0.75,0.81,1,1,0.91,0.83,0.79,0.85,1,1,0.77,0.47,1,0.78,0.49,0.75,0.81,1,0.8,0.85,1,1,0.89,0.75,1,0.8,0.52,0.78,0.84,1,0.76,0.82,1,1,0.9,0.76,1,0.95,0.98,1,0.8,0.52,0.76,0.82,1,0.94,0.92,0.99,0.76,0.82,1,0.75,0.81,1,1,0.83,0.58,1,0.89,0.75,1,0.95,0.97,1,0.92,0.87,0.84,0.87,1,1,0.94,0.94,0.75,0.81,1,0.76,0.82,1,1,0.67,0.21,0.75,0.81,1,1,0.88,0.7,1,0.78,0.49,1,0.78,0.47,1,0.86,0.64,1,0.9,0.79,0.75,0.81,1,1,0.85,0.62,0.75,0.81,1,1,0.91,0.8,0.75,0.82,1,0.98,0.94,0.98,0.75,0.81,1,0.75,0.81,1,0.97,0.94,0.98,1,0.95,0.97,0.75,0.81,1,1,0.82,0.56,1,0.79,0.5,0.75,0.81,1,0.75,0.81,1,0.91,0.91,0.99,1,0.9,0.78,0.77,0.83,1,1,0.76,0.44,0.75,0.81,1,1,0.88,0.71,0.8,0.85,1,1,0.8,0.52,1,0.9,0.77,1,0.89,0.75,1,0.76,0.44,1,0.77,0.46,0.75,0.81,1,0.75,0.81,1,1,0.94,0.93,1,0.91,0.83,0.75,0.82,1,1,0.82,0.56,0.75,0.81,1,0.75,0.81,1,1,0.83,0.58,0.76,0.82,1,1,0.91,0.81,1,0.94,0.93,1,0.9,0.77,1,0.94,0.92,1,0.87,0.67,1,0.78,0.48,1,0.72,0.35,0.76,0.82,1,0.96,0.93,0.98,1,0.79,0.51,0.81,0.86,1,0.75,0.82,1,1,0.91,0.8,0.75,0.81,1,0.76,0.83,1,0.75,0.81,1,1,0.88,0.7,0.76,0.82,1,1,0.91,0.82,1,0.86,0.65,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.82,0.56,0.75,0.82,1,0.75,0.82,1,0.75,0.81,1,0.98,0.94,0.98,1,0.79,0.5,1,0.53,0,1,0.87,0.69,1,0.89,0.74,1,0.86,0.64,1,0.91,0.81,0.78,0.84,1,1,0.88,0.71,0.75,0.81,1,1,0.85,0.63,1,0.9,0.79,1,0.86,0.65,1,0.91,0.8,0.75,0.81,1,0.89,0.9,0.99,1,0.9,0.76,1,0.84,0.61,0.96,0.93,0.98,1,0.9,0.77,0.83,0.87,1,0.82,0.86,1,1,0.9,0.78,0.75,0.81,1,0.94,0.92,0.99,1,0.88,0.72,0.75,0.81,1,1,0.84,0.6,0.75,0.81,1,0.75,0.82,1,1,0.9,0.77,0.75,0.81,1,0.78,0.83,1,1,0.91,0.8,0.75,0.81,1,1,0.89,0.74,0.75,0.81,1,1,0.87,0.69,1,0.89,0.75,0.76,0.82,1,1,0.77,0.45,1,0.88,0.72,1,0.92,0.84,1,0.76,0.43,0.75,0.81,1,1,0.91,0.83,1,0.8,0.53,0.76,0.82,1,0.75,0.81,1,1,0.88,0.73,0.77,0.83,1,1,0.81,0.55,1,0.91,0.8,1,0.88,0.7,1,0.76,0.44,0.88,0.89,0.99,0.79,0.85,1,1,0.95,0.96,0.75,0.81,1,1,0.9,0.78,1,0.95,0.97,0.76,0.82,1,0.75,0.82,1,0.76,0.82,1,0.88,0.89,0.99,0.75,0.81,1,0.75,0.81,1,1,0.83,0.58,1,0.75,0.42,0.77,0.83,1,1,0.87,0.67,0.79,0.85,1,1,0.86,0.66,0.79,0.84,1,1,0.9,0.79,1,0.88,0.71,1,0.85,0.64,1,0.74,0.4,1,0.89,0.75,1,0.82,0.57,0.75,0.81,1,1,0.87,0.69,1,0.89,0.75,0.78,0.84,1,1,0.82,0.56,1,0.82,0.56,0.92,0.92,0.99,0.89,0.9,0.99,0.8,0.85,1,1,0.84,0.6,1,0.76,0.44,0.75,0.81,1,1,0.76,0.44,1,0.94,0.92,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.75,0.82,1,0.79,0.84,1,0.79,0.84,1,0.99,0.95,0.98,0.76,0.82,1,0.77,0.83,1,1,0.8,0.52,0.94,0.92,0.99,1,0.8,0.53,1,0.95,0.96,0.75,0.82,1,0.75,0.81,1,0.77,0.83,1,0.76,0.82,1,0.97,0.94,0.98,0.78,0.84,1,0.75,0.81,1,0.76,0.82,1,1,0.95,0.97,1,0.78,0.47,1,0.9,0.77,0.8,0.85,1,0.79,0.85,1,1,0.91,0.82,1,0.93,0.9,0.77,0.83,1,1,0.77,0.46,0.76,0.82,1,1,0.9,0.77,1,0.88,0.7,0.89,0.9,0.99,0.91,0.91,0.99,0.75,0.81,1,0.84,0.87,1,0.77,0.83,1,1,0.89,0.76,1,0.77,0.46,1,0.75,0.41,1,0.87,0.69,0.75,0.82,1,1,0.94,0.95,1,0.84,0.61,1,0.92,0.84,1,0.89,0.73,0.76,0.82,1,1,0.93,0.87,1,0.8,0.52,1,0.89,0.74,0.79,0.84,1,1,0.87,0.68,0.78,0.84,1,0.75,0.82,1,0.88,0.9,0.99,1,0.93,0.9,0.75,0.81,1,0.77,0.83,1,1,0.81,0.54,0.76,0.82,1,0.94,0.92,0.99,1,0.91,0.81,1,0.85,0.62,0.9,0.9,0.99,0.75,0.81,1,1,0.82,0.55,1,0.88,0.7,1,0.89,0.76,1,0.88,0.71,1,0.91,0.8,0.75,0.81,1,0.75,0.82,1,1,0.79,0.5,1,0.79,0.49,0.75,0.81,1,1,0.82,0.56,1,0.89,0.74,1,0.91,0.81,0.75,0.81,1,1,0.75,0.43,1,0.91,0.81,0.77,0.83,1,1,0.84,0.61,0.76,0.82,1,1,0.87,0.68,1,0.92,0.85,1,0.91,0.81,1,0.79,0.5,1,0.91,0.8,0.79,0.84,1,0.93,0.92,0.99,0.75,0.81,1,1,0.94,0.91,1,0.84,0.61,0.75,0.81,1,1,0.9,0.78,1,0.82,0.57,0.76,0.82,1,1,0.9,0.79,1,0.94,0.93,1,0.82,0.57,0.79,0.85,1,0.77,0.83,1,1,0.76,0.43,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,1,0.91,0.81,1,0.81,0.54,1,0.91,0.8,0.76,0.82,1,1,0.87,0.68,1,0.79,0.49,1,0.94,0.93,1,0.76,0.44,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.76,0.43,1,0.87,0.67,0.75,0.81,1,1,0.83,0.59,0.85,0.88,1,0.76,0.82,1,0.75,0.82,1,0.78,0.84,1,0.93,0.92,0.99,1,0.76,0.43,1,0.84,0.6,1,0.8,0.53,0.75,0.81,1,0.94,0.92,0.99,0.75,0.82,1,0.75,0.81,1,0.75,0.82,1,0.78,0.84,1,0.76,0.82,1,0.88,0.89,0.99,1,0.75,0.41,0.75,0.81,1,0.79,0.85,1,0.75,0.82,1,1,0.89,0.74,0.97,0.94,0.98,1,0.93,0.89,0.75,0.81,1,1,0.93,0.9,0.75,0.81,1,0.75,0.81,1,1,0.89,0.73,1,0.78,0.47,1,0.95,0.97,0.75,0.81,1,0.78,0.84,1,1,0.87,0.69,1,0.88,0.7,1,0.88,0.7,1,0.91,0.82,1,0.77,0.45,0.75,0.81,1,0.76,0.82,1,1,0.87,0.67,0.75,0.82,1,1,0.86,0.66,0.85,0.88,1,0.75,0.81,1,0.77,0.83,1,1,0.88,0.72,0.76,0.82,1,0.75,0.82,1,0.78,0.84,1,0.75,0.82,1,1,0.92,0.84,1,0.91,0.81,1,0.85,0.64,1,0.89,0.73,0.75,0.82,1,1,0.89,0.74,0.75,0.82,1,1,0.94,0.94,0.75,0.82,1,1,0.9,0.76,0.98,0.94,0.98,0.91,0.91,0.99,0.75,0.81,1,0.75,0.82,1,0.84,0.87,1,0.75,0.82,1,0.97,0.94,0.98,0.75,0.81,1,0.79,0.85,1,0.82,0.86,1,0.84,0.87,1,1,0.95,0.97,1,0.86,0.64,1,0.91,0.8,1,0.89,0.76,1,0.92,0.87,1,0.81,0.54,0.75,0.81,1,1,0.78,0.47,1,0.81,0.54,0.75,0.81,1,0.89,0.9,0.99,1,0.91,0.8,1,0.91,0.83,1,0.95,0.96,1,0.91,0.83,1,0.88,0.71,1,0.91,0.79,1,0.87,0.68,0.75,0.81,1,1,0.89,0.74,1,0.88,0.72,0.76,0.82,1,1,0.88,0.72,1,0.89,0.73,1,0.9,0.77,1,0.95,0.98,1,0.95,0.96,1,0.79,0.5,0.75,0.81,1,1,0.87,0.67,1,0.83,0.59,0.77,0.83,1,1,0.86,0.66,0.82,0.86,1,0.94,0.92,0.99,0.78,0.84,1,0.82,0.86,1,1,0.79,0.5,0.75,0.81,1,0.75,0.81,1,1,0.9,0.78,0.82,0.86,1,1,0.95,0.95,1,0.85,0.63,0.75,0.81,1,0.78,0.84,1,1,0.79,0.5,1,0.78,0.49,0.75,0.82,1,0.75,0.81,1,0.78,0.84,1,1,0.89,0.75,1,0.89,0.73,1,0.92,0.85,0.75,0.82,1,0.75,0.81,1,0.76,0.82,1,0.77,0.83,1,0.75,0.81,1,0.79,0.85,1,0.75,0.82,1,1,0.8,0.51,0.75,0.81,1,0.78,0.84,1,0.75,0.81,1,0.83,0.87,1,1,0.78,0.48,1,0.77,0.45,0.75,0.82,1,0.79,0.85,1,1,0.94,0.94,0.76,0.82,1,1,0.82,0.57,1,0.78,0.48,0.75,0.81,1,0.77,0.83,1,1,0.9,0.77,0.75,0.81,1,0.79,0.84,1,0.79,0.85,1,1,0.78,0.47,0.81,0.86,1,1,0.79,0.5,0.75,0.81,1,1,0.8,0.53,1,0.83,0.59,0.78,0.84,1,0.75,0.81,1,1,0.78,0.49,1,0.78,0.48,1,0.9,0.78,1,0.86,0.65,0.75,0.82,1,1,0.76,0.43,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,0.77,0.83,1,0.75,0.82,1,1,0.8,0.52,0.75,0.81,1,1,0.84,0.61,1,0.77,0.46,0.75,0.81,1,1,0.91,0.82,1,0.88,0.73,0.78,0.83,1,0.75,0.82,1,0.75,0.82,1,1,0.77,0.46,1,0.77,0.45,0.75,0.82,1,1,0.79,0.51,0.75,0.81,1,0.77,0.83,1,1,0.77,0.47,0.78,0.84,1,1,0.76,0.44,0.98,0.94,0.98,1,0.79,0.49,0.78,0.84,1,1,0.9,0.79,1,0.76,0.43,0.76,0.82,1,0.83,0.87,1,1,0.84,0.6,1,0.89,0.74,1,0.91,0.8,0.75,0.81,1,0.75,0.81,1,1,0.78,0.48,0.77,0.83,1,0.77,0.83,1,0.78,0.84,1,0.76,0.82,1,0.79,0.84,1,0.83,0.87,1,1,0.92,0.87,1,0.9,0.79,0.76,0.82,1,0.75,0.81,1,1,0.89,0.73,1,0.91,0.82,0.84,0.87,1,1,0.88,0.73,1,0.85,0.63,1,0.89,0.74,1,0.78,0.49,1,0.95,0.98,1,0.89,0.75,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.9,0.79,1,0.84,0.6,0.75,0.81,1,0.93,0.92,0.99,1,0.89,0.75,1,0.87,0.67,1,0.89,0.73,0.75,0.81,1,0.78,0.84,1,1,0.82,0.57,0.75,0.81,1,1,0.85,0.63,1,0.89,0.75,1,0.91,0.8,1,0.93,0.87,1,0.89,0.75,1,0.8,0.51,0.87,0.89,0.99,0.75,0.82,1,0.78,0.84,1,0.75,0.81,1,1,0.92,0.85,1,0.75,0.42,1,0.89,0.74,1,0.84,0.6,1,0.88,0.71,0.78,0.84,1,0.75,0.81,1,1,0.94,0.93,0.75,0.81,1,0.75,0.82,1,1,0.89,0.74,1,0.75,0.41,0.76,0.82,1,0.99,0.95,0.98,1,0.89,0.76,1,0.93,0.91,1,0.95,0.97,0.77,0.83,1,0.78,0.84,1,0.75,0.81,1,0.77,0.83,1,1,0.9,0.78,0.77,0.83,1,1,0.89,0.73,1,0.85,0.63,1,0.78,0.47,0.79,0.84,1,0.76,0.82,1,1,0.75,0.42,1,0.76,0.43,0.75,0.82,1,1,0.9,0.77,1,0.89,0.74,0.97,0.94,0.98,0.76,0.82,1,0.92,0.91,0.99,1,0.95,0.96,1,0.95,0.95,1,0.95,0.97,1,0.88,0.71,0.79,0.85,1,0.81,0.86,1,1,0.89,0.75,1,0.73,0.38,0.75,0.82,1,0.75,0.81,1,1,0.8,0.53,1,0.87,0.69,1,0.9,0.77,1,0.87,0.67,0.77,0.83,1,1,0.84,0.6,1,0.77,0.46,1,0.75,0.41,0.86,0.88,0.99,1,0.87,0.69,1,0.79,0.49,0.83,0.87,1,1,0.78,0.48,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,1,0.91,0.82,1,0.82,0.57,0.78,0.84,1,0.77,0.83,1,0.78,0.84,1,0.77,0.83,1,1,0.86,0.66,0.75,0.82,1,1,0.95,0.97,1,0.95,0.96,1,0.89,0.75,1,0.92,0.86,0.95,0.93,0.99,1,0.94,0.94,0.78,0.84,1,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,0.75,0.82,1,0.84,0.87,1,1,0.92,0.84,1,0.9,0.77,1,0.9,0.79,0.75,0.82,1,1,0.89,0.73,0.79,0.85,1,1,0.9,0.78,1,0.84,0.61,0.77,0.83,1,1,0.94,0.92,0.99,0.95,0.98,1,0.82,0.56,0.76,0.82,1,1,0.95,0.98,1,0.86,0.65,0.77,0.83,1,0.75,0.82,1,1,0.95,0.98,1,0.79,0.5,1,0.8,0.53,1,0.92,0.85,1,0.82,0.57,0.75,0.81,1,1,0.91,0.8,1,0.94,0.94,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.75,0.82,1,1,0.81,0.55,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.77,0.47,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,1,0.9,0.78,1,0.77,0.45,0.76,0.82,1,1,0.75,0.41,1,0.87,0.69,1,0.81,0.55,1,0.87,0.68,0.75,0.81,1,1,0.92,0.85,0.76,0.82,1,0.75,0.82,1,0.75,0.82,1,1,0.85,0.63,1,0.93,0.9,1,0.94,0.93,0.79,0.85,1,1,0.8,0.53,0.76,0.82,1,1,0.85,0.62,0.75,0.81,1,1,0.89,0.75,1,0.87,0.69,0.86,0.89,0.99,1,0.94,0.94,1,0.84,0.6,0.8,0.85,1,1,0.88,0.71,0.75,0.82,1,1,0.92,0.84,0.76,0.82,1,0.95,0.93,0.99,0.75,0.82,1,0.72,0.79,1,1,0.89,0.74,1,0.77,0.46,1,0.89,0.75,0.76,0.82,1,1,0.75,0.42,0.79,0.84,1,1,0.79,0.5,0.76,0.82,1,0.79,0.85,1,0.75,0.81,1,1,0.85,0.63,0.75,0.82,1,1,0.9,0.79,0.75,0.82,1,0.99,0.95,0.98,0.75,0.81,1,1,0.87,0.67,1,0.89,0.76,1,0.84,0.6,0.78,0.84,1,1,0.94,0.94,0.82,0.86,1,1,0.89,0.73,1,0.76,0.43,1,0.91,0.8,0.75,0.82,1,0.77,0.83,1,0.75,0.81,1,1,0.83,0.58,1,0.8,0.51,0.93,0.92,0.99,1,0.93,0.9,1,0.94,0.95,0.78,0.84,1,1,0.88,0.7,0.75,0.81,1,0.79,0.84,1,1,0.77,0.46,0.77,0.83,1,1,0.77,0.45,0.75,0.81,1,0.75,0.82,1,1,0.84,0.61,1,0.95,0.98,1,0.9,0.78,1,0.9,0.77,1,0.9,0.76,0.75,0.81,1,0.86,0.88,0.99,1,0.86,0.65,0.75,0.81,1,0.84,0.87,1,1,0.91,0.8,1,0.88,0.71,0.75,0.81,1,0.91,0.91,0.99,1,0.88,0.71,0.75,0.82,1,1,0.81,0.54,0.95,0.93,0.99,0.81,0.86,1,1,0.83,0.58,0.95,0.93,0.99,0.75,0.82,1,0.75,0.82,1,1,0.8,0.53,0.83,0.87,1,1,0.89,0.73,0.93,0.92,0.99,0.75,0.81,1,0.74,0.8,1,0.78,0.84,1,0.75,0.81,1,1,0.83,0.58,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.87,0.89,0.99,0.75,0.81,1,1,0.77,0.45,0.76,0.82,1,1,0.79,0.51,0.76,0.82,1,1,0.85,0.63,1,0.77,0.46,1,0.83,0.58,1,0.8,0.52,0.75,0.81,1,0.76,0.82,1,1,0.91,0.8,1,0.77,0.47,1,0.85,0.62,1,0.94,0.95,1,0.88,0.71,0.75,0.81,1,0.76,0.82,1,1,0.77,0.47,1,0.79,0.49,1,0.77,0.45,1,0.89,0.74,0.75,0.82,1,0.75,0.82,1,0.75,0.81,1,0.81,0.86,1,1,0.95,0.97,1,0.84,0.6,0.93,0.92,0.99,1,0.85,0.62,0.75,0.82,1,0.75,0.81,1,1,0.89,0.76,1,0.9,0.78,1,0.94,0.94,1,0.89,0.73,1,0.91,0.82,0.76,0.82,1,1,0.94,0.93,1,0.82,0.57,1,0.87,0.69,0.84,0.87,1,0.75,0.81,1,0.75,0.81,1,1,0.88,0.71,0.98,0.94,0.98,0.8,0.85,1,0.75,0.81,1,0.87,0.89,0.99,0.76,0.83,1,1,0.8,0.53,0.77,0.83,1,0.75,0.81,1,1,0.9,0.79,0.75,0.82,1,0.75,0.82,1,0.77,0.83,1,1,0.87,0.67,0.79,0.84,1,1,0.81,0.55,0.78,0.84,1,0.75,0.81,1,1,0.95,0.97,1,0.91,0.8,1,0.95,0.98,0.81,0.86,1,0.92,0.91,0.99,0.75,0.81,1,0.76,0.82,1,1,0.79,0.5,0.75,0.82,1,1,0.91,0.81,0.83,0.87,1,0.94,0.93,0.99,1,0.61,0,1,0.84,0.61,0.86,0.88,0.99,0.75,0.81,1,1,0.9,0.79,1,0.91,0.82,1,0.87,0.67,0.74,0.8,1,0.75,0.82,1,0.95,0.93,0.98,1,0.92,0.83,1,0.89,0.76,1,0.89,0.73,0.82,0.86,1,1,0.95,0.96,0.75,0.82,1,1,0.95,0.98,1,0.95,0.97,1,0.81,0.55,1,0.89,0.75,0.78,0.83,1,0.75,0.81,1,0.76,0.82,1,0.84,0.87,1,1,0.92,0.84,1,0.79,0.49,1,0.75,0.42,0.77,0.83,1,0.86,0.88,0.99,0.75,0.82,1,0.75,0.82,1,1,0.83,0.59,0.79,0.85,1,0.75,0.82,1,0.97,0.94,0.98,1,0.91,0.81,0.75,0.81,1,0.78,0.84,1,1,0.86,0.66,0.75,0.81,1,1,0.78,0.48,0.77,0.83,1,1,0.78,0.47,1,0.82,0.55,1,0.95,0.98,0.88,0.89,0.99,0.76,0.82,1,1,0.9,0.78,1,0.88,0.7,0.81,0.86,1,0.79,0.85,1,1,0.79,0.51,0.76,0.82,1,0.75,0.82,1,1,0.88,0.72,0.75,0.81,1,1,0.84,0.6,0.75,0.81,1,0.75,0.82,1,0.8,0.85,1,1,0.87,0.69,1,0.9,0.78,1,0.89,0.74,1,0.87,0.69,1,0.88,0.71,0.75,0.81,1,0.85,0.88,0.99,1,0.86,0.66,1,0.77,0.45,0.75,0.81,1,1,0.81,0.55,1,0.9,0.79,1,0.89,0.75,1,0.83,0.59,1,0.89,0.74,0.8,0.85,1,1,0.87,0.69,1,0.87,0.67,1,0.88,0.71,0.75,0.82,1,1,0.86,0.66,1,0.82,0.56,0.75,0.82,1,1,0.9,0.78,1,0.93,0.89,1,0.91,0.82,0.79,0.84,1,1,0.89,0.73,1,0.77,0.46,1,0.91,0.8,0.75,0.81,1,0.76,0.82,1,1,0.76,0.43,0.75,0.82,1,0.75,0.81,1,1,0.76,0.43,0.75,0.81,1,1,0.92,0.84,1,0.91,0.82,0.75,0.82,1,1,0.85,0.64,1,0.95,0.97,1,0.89,0.74,1,0.9,0.77,0.94,0.92,0.99,0.97,0.94,0.98,1,0.89,0.74,0.78,0.84,1,0.76,0.82,1,1,0.74,0.39,0.75,0.81,1,0.76,0.82,1,1,0.76,0.43,0.75,0.81,1,1,0.93,0.9,0.79,0.85,1,0.82,0.87,1,0.75,0.82,1,0.75,0.81,1,1,0.93,0.88,1,0.91,0.82,0.84,0.87,1,0.78,0.84,1,0.79,0.84,1,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.81,0.55,1,0.91,0.81,1,0.91,0.82,1,0.81,0.55,1,0.89,0.75,0.75,0.82,1,0.77,0.83,1,1,0.88,0.7,1,0.73,0.38,1,0.89,0.76,1,0.86,0.66,1,0.75,0.41,1,0.77,0.46,0.75,0.81,1,0.77,0.83,1,1,0.95,0.95,1,0.87,0.66,0.84,0.87,1,1,0.78,0.47,1,0.78,0.48,0.75,0.81,1,0.76,0.82,1,1,0.91,0.81,0.77,0.83,1,0.78,0.83,1,1,0.83,0.59,0.75,0.82,1,0.75,0.81,1,1,0.82,0.56,0.87,0.89,0.99,1,0.92,0.87,1,0.79,0.5,1,0.79,0.5,1,0.78,0.48,1,0.77,0.47,0.75,0.81,1,1,0.79,0.51,0.76,0.82,1,0.75,0.81,1,1,0.9,0.78,0.76,0.82,1,0.75,0.81,1,1,0.78,0.49,0.83,0.87,1,0.75,0.81,1,0.91,0.91,0.99,1,0.79,0.5,1,0.85,0.64,1,0.91,0.81,1,0.95,0.97,1,0.9,0.78,1,0.9,0.77,0.76,0.82,1,0.75,0.81,1,0.79,0.84,1,0.78,0.84,1,1,0.94,0.92,0.83,0.87,1,1,0.88,0.7,1,0.88,0.72,1,0.94,0.92,0.94,0.92,0.99,1,0.87,0.66,1,0.89,0.74,1,0.81,0.54,0.77,0.83,1,1,0.89,0.76,1,0.88,0.71,0.78,0.84,1,1,0.92,0.86,1,0.79,0.5,0.79,0.85,1,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,0.77,0.83,1,1,0.76,0.44,1,0.76,0.44,0.75,0.81,1,1,0.83,0.59,0.76,0.82,1,1,0.89,0.73,1,0.83,0.59,0.79,0.84,1,0.8,0.85,1,1,0.8,0.52,0.77,0.83,1,0.75,0.81,1,1,0.89,0.74,1,0.5,0,0.76,0.82,1,0.75,0.82,1,0.76,0.82,1,0.76,0.82,1,1,0.95,0.96,1,0.89,0.74,1,0.78,0.47,0.75,0.82,1,1,0.86,0.66,0.75,0.81,1,0.75,0.81,1,0.83,0.87,1,1,0.85,0.63,1,0.91,0.82,1,0.85,0.62,1,0.76,0.44,0.75,0.82,1,1,0.91,0.82,1,0.86,0.66,0.75,0.81,1,1,0.8,0.52,0.78,0.84,1,0.75,0.81,1,0.75,0.81,1,1,0.89,0.74,1,0.91,0.81,0.75,0.81,1,1,0.95,0.96,1,0.87,0.69,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.88,0.7,0.75,0.82,1,0.75,0.81,1,0.91,0.91,0.99,0.76,0.82,1,1,0.91,0.8,0.75,0.81,1,0.98,0.94,0.98,1,0.93,0.9,0.76,0.82,1,1,0.79,0.5,1,0.88,0.7,0.91,0.91,0.99,0.75,0.82,1,0.75,0.82,1,0.98,0.94,0.98,1,0.93,0.91,0.85,0.88,0.99,0.77,0.83,1,1,0.9,0.78,1,0.76,0.44,1,0.89,0.75,0.75,0.81,1,1,0.9,0.77,0.75,0.81,1,0.77,0.83,1,0.78,0.84,1,1,0.93,0.91,0.76,0.82,1,0.76,0.82,1,1,0.9,0.78,0.96,0.93,0.98,0.8,0.85,1,1,0.91,0.81,1,0.75,0.42,0.77,0.83,1,1,0.87,0.69,0.98,0.94,0.98,0.75,0.81,1,1,0.75,0.42,1,0.9,0.78,1,0.95,0.97,1,0.89,0.75,0.8,0.85,1,1,0.87,0.67,0.75,0.81,1,1,0.91,0.83,0.75,0.82,1,0.9,0.9,0.99,1,0.94,0.93,1,0.76,0.43,0.75,0.81,1,1,0.8,0.53,1,0.79,0.49,0.87,0.89,0.99,1,0.75,0.42,0.75,0.81,1,1,0.94,0.93,1,0.89,0.75,0.77,0.83,1,1,0.95,0.97,1,0.86,0.66,1,0.87,0.67,1,0.75,0.42,0.76,0.82,1,0.75,0.81,1,0.78,0.84,1,0.75,0.81,1,0.98,0.94,0.98,1,0.91,0.8,0.76,0.82,1,1,0.92,0.84,0.75,0.82,1,1,0.85,0.62,0.92,0.91,0.99,0.88,0.89,0.99,1,0.95,0.96,0.75,0.81,1,0.81,0.86,1,1,0.87,0.67,0.97,0.94,0.98,0.78,0.84,1,1,0.75,0.42,1,0.88,0.71,1,0.74,0.39,0.8,0.85,1,0.75,0.82,1,1,0.95,0.95,0.79,0.85,1,1,0.94,0.92,0.75,0.82,1,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,0.86,0.88,0.99,0.77,0.83,1,0.81,0.86,1,0.75,0.81,1,0.75,0.81,1,0.94,0.92,0.99,1,0.91,0.82,0.77,0.83,1,1,0.75,0.42,0.75,0.82,1,0.75,0.82,1,0.89,0.9,0.99,1,0.87,0.68,1,0.79,0.49,1,0.78,0.48,0.75,0.81,1,1,0.89,0.74,0.75,0.81,1,0.93,0.92,0.99,0.75,0.81,1,0.92,0.91,0.99,0.75,0.81,1,0.73,0.8,1,0.77,0.83,1,1,0.89,0.75,1,0.77,0.46,0.75,0.82,1,1,0.95,0.97,1,0.83,0.58,1,0.9,0.77,0.75,0.81,1,0.85,0.88,0.99,1,0.88,0.71,0.86,0.88,0.99,0.77,0.83,1,0.79,0.84,1,0.75,0.82,1,1,0.89,0.76,0.75,0.82,1,0.77,0.83,1,0.75,0.81,1,1,0.87,0.69,1,0.8,0.53,0.75,0.81,1,1,0.76,0.44,0.89,0.9,0.99,1,0.8,0.52,1,0.77,0.45,1,0.88,0.72,0.94,0.92,0.99,1,0.91,0.81,1,0.95,0.97,1,0.94,0.92,0.77,0.83,1,0.84,0.87,1,1,0.89,0.75,0.75,0.81,1,1,0.88,0.7,0.76,0.82,1,1,0.74,0.39,1,0.91,0.82,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.93,0.92,0.99,0.75,0.81,1,1,0.94,0.95,1,0.75,0.41,0.75,0.81,1,1,0.77,0.45,1,0.79,0.49,1,0.84,0.61,1,0.79,0.49,1,0.82,0.57,0.77,0.83,1,0.75,0.81,1,0.76,0.82,1,1,0.87,0.69,0.75,0.81,1,0.78,0.84,1,1,0.89,0.75,0.9,0.9,0.99,1,0.88,0.72,1,0.94,0.94,1,0.88,0.7,0.75,0.81,1,0.77,0.83,1,0.75,0.82,1,1,0.82,0.56,0.77,0.83,1,1,0.92,0.87,1,0.9,0.76,1,0.88,0.7,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.85,0.62,0.79,0.85,1,1,0.88,0.72,1,0.93,0.9,0.75,0.81,1,1,0.94,0.92,0.75,0.82,1,0.75,0.81,1,1,0.77,0.47,1,0.84,0.6,0.91,0.91,0.99,0.78,0.84,1,0.78,0.84,1,0.75,0.81,1,1,0.87,0.68,0.76,0.82,1,0.76,0.82,1,0.75,0.81,1,1,0.77,0.46,0.75,0.81,1,1,0.76,0.44,0.82,0.86,1,1,0.84,0.61,1,0.87,0.68,0.75,0.82,1,1,0.95,0.97,1,0.86,0.64,1,0.88,0.72,1,0.76,0.43,0.76,0.82,1,0.98,0.94,0.98,0.78,0.83,1,1,0.82,0.56,1,0.95,0.97,0.79,0.84,1,1,0.83,0.58,1,0.9,0.77,0.76,0.82,1,0.78,0.84,1,0.76,0.82,1,0.76,0.82,1,1,0.91,0.82,0.8,0.85,1,1,0.94,0.94,0.75,0.81,1,1,0.87,0.67,1,0.77,0.45,0.75,0.81,1,1,0.91,0.83,1,0.8,0.52,1,0.77,0.46,0.79,0.85,1,1,0.89,0.74,1,0.84,0.6,0.75,0.81,1,1,0.76,0.45,1,0.79,0.49,0.75,0.82,1,0.75,0.81,1,1,0.89,0.73,1,0.78,0.47,0.75,0.81,1,1,0.95,0.98,0.75,0.81,1,1,0.82,0.57,0.76,0.82,1,0.93,0.92,0.99,0.76,0.82,1,1,0.9,0.78,1,0.95,0.97,1,0.77,0.46,0.76,0.82,1,1,0.88,0.71,0.94,0.92,0.99,1,0.79,0.51,1,0.75,0.42,0.99,0.95,0.98,1,0.79,0.49,0.75,0.81,1,1,0.95,0.96,0.99,0.95,0.98,1,0.83,0.58,0.75,0.82,1,1,0.91,0.82,0.78,0.84,1,0.77,0.83,1,0.75,0.81,1,1,0.84,0.61,1,0.92,0.85,0.78,0.84,1,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.89,0.73,1,0.76,0.44,0.78,0.84,1,1,0.75,0.42,1,0.87,0.68,1,0.85,0.63,1,0.89,0.73,1,0.74,0.4,1,0.88,0.72,1,0.9,0.76,1,0.91,0.8,0.76,0.82,1,1,0.78,0.48,0.76,0.82,1,0.76,0.82,1,1,0.94,0.94,0.78,0.84,1,1,0.89,0.75,1,0.79,0.5,1,0.88,0.72,1,0.89,0.75,1,0.87,0.69,1,0.93,0.9,1,0.89,0.74,1,0.95,0.95,1,0.93,0.88,1,0.86,0.64,0.75,0.81,1,1,0.88,0.7,1,0.91,0.81,0.75,0.81,1,0.85,0.88,0.99,0.75,0.82,1,1,0.85,0.64,0.75,0.81,1,1,0.89,0.73,0.97,0.94,0.98,1,0.86,0.65,0.88,0.89,0.99,1,0.88,0.71,0.97,0.94,0.98,0.75,0.81,1,0.81,0.86,1,0.75,0.82,1,0.78,0.83,1,0.76,0.82,1,1,0.89,0.74,0.75,0.81,1,0.77,0.83,1,1,0.76,0.44,0.78,0.83,1,0.75,0.81,1,0.76,0.82,1,0.83,0.87,1,0.75,0.81,1,0.95,0.93,0.99,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,0.97,0.94,0.98,1,0.9,0.78,1,0.9,0.76,1,0.76,0.44,1,0.77,0.46,1,0.86,0.65,1,0.88,0.72,0.98,0.94,0.98,1,0.88,0.71,1,0.85,0.64,0.89,0.9,0.99,0.79,0.85,1,1,0.91,0.8,0.78,0.84,1,0.75,0.81,1,1,0.78,0.47,0.78,0.83,1,1,0.86,0.65,1,0.94,0.94,0.75,0.81,1,1,0.79,0.51,0.78,0.84,1,1,0.89,0.74,1,0.89,0.73,1,0.75,0.41,1,0.89,0.76,1,0.87,0.68,1,0.92,0.84,0.75,0.82,1,1,0.94,0.92,1,0.94,0.93,0.76,0.82,1,1,0.87,0.69,0.78,0.84,1,0.79,0.84,1,0.95,0.93,0.99,1,0.88,0.73,1,0.77,0.47,0.75,0.82,1,0.98,0.94,0.98,1,0.82,0.56,0.75,0.81,1,1,0.91,0.8,0.86,0.88,0.99,1,0.87,0.69,1,0.9,0.76,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,0.89,0.9,0.99,1,0.88,0.71,0.75,0.81,1,1,0.92,0.84,1,0.87,0.69,0.75,0.82,1,1,0.88,0.72,1,0.95,0.96,0.79,0.85,1,0.76,0.82,1,1,0.81,0.53,0.75,0.81,1,1,0.88,0.71,0.79,0.84,1,1,0.93,0.91,1,0.94,0.91,1,0.91,0.8,0.76,0.82,1,1,0.83,0.58,1,0.89,0.76,1,0.85,0.62,0.75,0.81,1,1,0.89,0.76,0.75,0.81,1,1,0.89,0.76,1,0.91,0.81,1,0.9,0.77,1,0.83,0.59,0.75,0.82,1,1,0.86,0.64,0.79,0.84,1,1,0.82,0.57,0.79,0.85,1,1,0.91,0.8,1,0.75,0.42,0.75,0.81,1,0.99,0.95,0.98,0.87,0.89,0.99,0.75,0.81,1,1,0.9,0.79,0.75,0.82,1,1,0.86,0.65,1,0.84,0.61,1,0.87,0.67,1,0.84,0.61,1,0.79,0.5,1,0.85,0.63,1,0.86,0.65,0.75,0.82,1,1,0.88,0.71,0.98,0.94,0.98,1,0.94,0.95,1,0.93,0.9,0.76,0.82,1,0.76,0.82,1,0.79,0.85,1,1,0.79,0.5,1,0.93,0.9,1,0.88,0.72,1,0.77,0.47,0.8,0.85,1,1,0.85,0.62,0.96,0.93,0.98,0.75,0.81,1,1,0.77,0.45,1,0.9,0.76,1,0.88,0.71,0.75,0.81,1,1,0.87,0.69,1,0.75,0.41,1,0.92,0.85,1,0.88,0.72,1,0.66,0.18,1,0.94,0.92,1,0.9,0.78,0.76,0.82,1,0.75,0.81,1,0.76,0.82,1,1,0.87,0.66,0.76,0.82,1,0.75,0.82,1,0.75,0.81,1,0.78,0.84,1,1,0.76,0.45,1,0.89,0.76,0.75,0.81,1,0.75,0.81,1,1,0.89,0.75,1,0.89,0.74,0.76,0.82,1,1,0.79,0.5,1,0.83,0.59,0.78,0.84,1,0.75,0.82,1,1,0.95,0.97,1,0.79,0.5,0.75,0.81,1,1,0.88,0.72,1,0.89,0.75,0.78,0.83,1,0.75,0.81,1,1,0.94,0.94,0.95,0.93,0.99,0.75,0.81,1,1,0.88,0.72,1,0.91,0.81,1,0.87,0.67,0.75,0.82,1,1,0.87,0.69,1,0.92,0.83,1,0.78,0.49,1,0.94,0.93,0.77,0.83,1,0.91,0.91,0.99,1,0.92,0.86,1,0.78,0.48,0.75,0.81,1,0.75,0.81,1,1,0.94,0.91,0.76,0.83,1,0.87,0.89,0.99,1,0.83,0.59,0.77,0.83,1,1,0.95,0.95,1,0.8,0.52,1,0.9,0.76,1,0.85,0.64,0.75,0.81,1,1,0.88,0.71,1,0.89,0.75,0.88,0.89,0.99,1,0.88,0.7,1,0.89,0.73,1,0.75,0.41,0.79,0.84,1,1,0.76,0.45,1,0.88,0.7,1,0.88,0.72,0.76,0.82,1,0.78,0.84,1,1,0.81,0.53,1,0.9,0.77,0.78,0.84,1,0.75,0.81,1,1,0.84,0.61,1,0.85,0.63,0.75,0.82,1,1,0.79,0.49,1,0.76,0.44,0.75,0.81,1,1,0.79,0.5,1,0.9,0.77,1,0.88,0.71,1,0.75,0.41,1,0.9,0.77,0.75,0.81,1,0.88,0.89,0.99,0.79,0.85,1,1,0.9,0.79,0.78,0.84,1,1,0.9,0.78,1,0.84,0.6,1,0.83,0.59,0.75,0.81,1,0.75,0.81,1,1,0.95,0.95,1,0.77,0.45,1,0.89,0.74,1,0.94,0.93,1,0.85,0.63,1,0.85,0.63,1,0.94,0.94,0.75,0.82,1,1,0.8,0.53,0.75,0.82,1,0.82,0.86,1,1,0.79,0.5,0.96,0.93,0.98,1,0.88,0.7,0.79,0.84,1,1,0.94,0.94,0.75,0.81,1,1,0.88,0.71,0.92,0.91,0.99,0.76,0.82,1,1,0.9,0.78,1,0.88,0.72,0.77,0.83,1,1,0.76,0.43,0.77,0.83,1,0.77,0.83,1,0.75,0.81,1,1,0.77,0.47,1,0.87,0.69,0.78,0.84,1,0.75,0.81,1,0.79,0.84,1,0.78,0.84,1,1,0.94,0.92,0.77,0.83,1,1,0.76,0.43,0.99,0.95,0.98,1,0.82,0.56,1,0.9,0.76,1,0.94,0.94,1,0.8,0.52,1,0.87,0.69,0.75,0.81,1,0.76,0.82,1,1,0.88,0.7,0.76,0.82,1,0.77,0.83,1,0.76,0.82,1,0.75,0.81,1,1,0.95,0.96,1,0.91,0.81,0.77,0.83,1,0.98,0.94,0.98,0.78,0.84,1,0.75,0.81,1,1,0.74,0.4,0.78,0.84,1,1,0.95,0.98,1,0.83,0.58,0.75,0.82,1,1,0.9,0.77,0.77,0.83,1,0.79,0.85,1,1,0.88,0.71,1,0.87,0.68,1,0.91,0.79,0.75,0.81,1,1,0.78,0.48,0.78,0.84,1,1,0.94,0.93,0.82,0.86,1,1,0.9,0.78,0.77,0.83,1,1,0.86,0.65,0.86,0.88,0.99,0.75,0.81,1,1,0.78,0.48,1,0.88,0.72,0.75,0.81,1,1,0.95,0.96,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.88,0.89,0.99,0.75,0.82,1,1,0.77,0.46,1,0.75,0.42,0.77,0.83,1,0.78,0.84,1,1,0.89,0.74,0.8,0.85,1,0.78,0.84,1,0.75,0.82,1,0.78,0.84,1,1,0.88,0.71,1,0.83,0.58,0.75,0.82,1,1,0.81,0.54,1,0.8,0.53,0.75,0.81,1,0.76,0.82,1,1,0.95,0.97,0.76,0.82,1,1,0.78,0.48,0.91,0.91,0.99,1,0.77,0.47,0.75,0.82,1,1,0.9,0.78,1,0.9,0.78,1,0.88,0.73,1,0.95,0.98,0.77,0.83,1,1,0.91,0.83,0.75,0.81,1,1,0.9,0.77,0.77,0.83,1,1,0.85,0.64,0.77,0.83,1,1,0.75,0.42,0.75,0.82,1,1,0.84,0.62,0.71,0.79,1,1,0.91,0.82,0.75,0.81,1,1,0.95,0.96,1,0.82,0.57,1,0.95,0.97,1,0.87,0.67,1,0.88,0.7,0.79,0.85,1,0.76,0.82,1,1,0.86,0.65,1,0.91,0.8,1,0.89,0.76,0.92,0.91,0.99,1,0.85,0.62,0.79,0.85,1,1,0.78,0.48,1,0.92,0.83,1,0.83,0.59,1,0.8,0.52,0.8,0.85,1,0.76,0.82,1,1,0.88,0.71,0.75,0.81,1,1,0.9,0.76,0.78,0.84,1,0.89,0.9,0.99,0.75,0.81,1,1,0.94,0.91,1,0.76,0.44,0.77,0.83,1,0.91,0.91,0.99,1,0.89,0.75,0.76,0.82,1,1,0.77,0.45,0.75,0.82,1,0.91,0.91,0.99,1,0.88,0.72,1,0.88,0.72,1,0.77,0.46,0.75,0.81,1,0.75,0.82,1,0.79,0.85,1,1,0.91,0.81,1,0.76,0.43,1,0.84,0.61,1,0.75,0.41,0.75,0.81,1,0.75,0.81,1,1,0.94,0.94,1,0.9,0.79,1,0.75,0.43,0.76,0.82,1,0.75,0.81,1,0.76,0.82,1,0.89,0.9,0.99,0.95,0.93,0.99,0.8,0.85,1,1,0.88,0.7,1,0.95,0.98,0.91,0.91,0.99,1,0.77,0.47,1,0.83,0.59,0.8,0.85,1,1,0.91,0.81,0.77,0.83,1,0.94,0.92,0.99,1,0.87,0.67,0.77,0.83,1,1,0.78,0.48,0.75,0.81,1,1,0.82,0.56,0.75,0.81,1,0.99,0.95,0.98,0.75,0.81,1,1,0.87,0.67,0.75,0.81,1,1,0.76,0.43,0.75,0.81,1,0.76,0.83,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.76,0.44,0.76,0.82,1,0.91,0.91,0.99,0.76,0.82,1,1,0.9,0.77,1,0.9,0.79,0.79,0.85,1,1,0.9,0.79,1,0.89,0.73,0.76,0.82,1,0.9,0.9,0.99,0.78,0.84,1,1,0.89,0.73,1,0.78,0.48,0.89,0.9,0.99,1,0.9,0.76,1,0.88,0.7,1,0.89,0.73,0.77,0.83,1,1,0.89,0.74,1,0.81,0.55,0.94,0.92,0.99,1,0.89,0.74,1,0.77,0.45,1,0.9,0.78,0.83,0.87,1,1,0.91,0.8,1,0.9,0.79,1,0.86,0.64,0.76,0.82,1,0.81,0.86,1,0.77,0.83,1,0.81,0.86,1,0.78,0.83,1,1,0.94,0.92,0.99,0.95,0.98,1,0.76,0.43,1,0.79,0.49,1,0.94,0.94,1,0.85,0.62,1,0.87,0.69,0.78,0.84,1,1,0.77,0.47,1,0.86,0.66,0.78,0.84,1,0.79,0.85,1,0.75,0.81,1,0.81,0.86,1,1,0.88,0.73,0.99,0.95,0.98,1,0.79,0.5,1,0.88,0.7,0.75,0.82,1,1,0.86,0.65,0.76,0.83,1,0.79,0.84,1,0.85,0.88,0.99,0.75,0.82,1,1,0.79,0.5,1,0.8,0.51,1,0.9,0.77,1,0.82,0.56,0.75,0.81,1,0.79,0.85,1,1,0.82,0.55,1,0.88,0.7,0.75,0.82,1,0.76,0.82,1,0.78,0.84,1,0.78,0.84,1,0.75,0.81,1,1,0.85,0.63,0.75,0.82,1,0.75,0.81,1,0.77,0.83,1,1,0.88,0.7,1,0.9,0.76,0.76,0.82,1,1,0.9,0.79,1,0.9,0.76,1,0.79,0.5,1,0.87,0.69,1,0.88,0.72,1,0.78,0.47,0.75,0.82,1,0.94,0.92,0.99,0.8,0.85,1,1,0.89,0.74,1,0.9,0.78,0.78,0.83,1,1,0.9,0.78,1,0.93,0.9,0.97,0.94,0.98,0.76,0.82,1,1,0.78,0.48,0.8,0.85,1,0.76,0.82,1,1,0.91,0.81,0.78,0.84,1,1,0.79,0.49,0.75,0.81,1,0.83,0.87,1,0.75,0.81,1,0.78,0.84,1,0.78,0.84,1,0.78,0.84,1,1,0.95,0.97,1,0.82,0.56,1,0.89,0.75,1,0.92,0.84,0.76,0.82,1,1,0.81,0.55,0.75,0.81,1,1,0.72,0.35,0.75,0.82,1,0.85,0.88,0.99,1,0.77,0.46,1,0.94,0.93,0.76,0.82,1,1,0.95,0.96,0.81,0.86,1,0.9,0.9,0.99,1,0.9,0.79,1,0.9,0.77,0.78,0.83,1,0.79,0.85,1,0.79,0.85,1,0.77,0.83,1,0.77,0.83,1,0.79,0.85,1,1,0.88,0.72,1,0.9,0.78,1,0.86,0.64,1,0.89,0.76,0.91,0.91,0.99,1,0.92,0.87,0.77,0.83,1,1,0.88,0.7,1,0.77,0.47,0.75,0.81,1,0.75,0.81,1,1,0.87,0.66,0.75,0.81,1,1,0.77,0.46,0.75,0.82,1,1,0.93,0.87,1,0.9,0.78,0.89,0.9,0.99,1,0.78,0.48,1,0.94,0.92,1,0.94,0.94,1,0.79,0.5,1,0.85,0.63,0.75,0.81,1,1,0.94,0.92,1,0.62,0.0092,1,0.79,0.51,1,0.73,0.38,1,0.86,0.64,0.75,0.81,1,1,0.75,0.41,1,0.87,0.68,1,0.74,0.4,1,0.94,0.93,1,0.87,0.69,0.76,0.82,1,1,0.95,0.96,1,0.79,0.5,1,0.81,0.54,1,0.95,0.98,0.75,0.82,1,0.75,0.82,1,0.78,0.83,1,1,0.75,0.43,1,0.87,0.67,0.76,0.82,1,1,0.94,0.95,0.77,0.83,1,1,0.87,0.66,0.75,0.82,1,1,0.9,0.77,1,0.76,0.43,0.79,0.84,1,0.86,0.88,0.99,1,0.82,0.57,0.77,0.83,1,0.75,0.81,1,0.78,0.84,1,0.77,0.83,1,1,0.81,0.55,0.92,0.91,0.99,1,0.92,0.83,1,0.82,0.57,0.91,0.91,0.99,0.79,0.85,1,1,0.95,0.95,0.73,0.8,1,1,0.82,0.57,1,0.95,0.96,1,0.89,0.73,1,0.78,0.49,0.77,0.83,1,1,0.9,0.76,1,0.88,0.71,1,0.86,0.64,1,0.75,0.42,0.75,0.81,1,0.78,0.84,1,1,0.88,0.7,1,0.85,0.63,1,0.91,0.83,0.76,0.82,1,1,0.88,0.7,1,0.78,0.48,1,0.74,0.4,1,0.92,0.85,0.79,0.85,1,1,0.91,0.8,1,0.89,0.75,0.75,0.81,1,0.85,0.88,0.99,0.75,0.81,1,0.78,0.83,1,0.78,0.84,1,1,0.85,0.63,0.75,0.82,1,1,0.89,0.73,1,0.87,0.67,0.8,0.85,1,1,0.91,0.79,0.76,0.82,1,1,0.83,0.58,0.78,0.84,1,1,0.94,0.94,1,0.76,0.43,1,0.88,0.72,1,0.78,0.48,0.75,0.82,1,0.75,0.82,1,0.75,0.82,1,1,0.79,0.5,0.75,0.81,1,1,0.75,0.41,1,0.89,0.75,1,0.77,0.46,0.98,0.94,0.98,0.75,0.81,1,0.76,0.82,1,1,0.91,0.8,0.85,0.88,0.99,0.88,0.89,0.99,1,0.94,0.94,0.87,0.89,0.99,1,0.94,0.94,1,0.77,0.45,0.95,0.93,0.99,1,0.94,0.92,1,0.9,0.79,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.91,0.81,0.75,0.81,1,0.75,0.81,1,1,0.9,0.78,0.78,0.84,1,1,0.95,0.97,1,0.9,0.78,0.75,0.81,1,1,0.86,0.66,1,0.79,0.51,1,0.89,0.76,1,0.84,0.61,1,0.91,0.81,1,0.91,0.79,1,0.89,0.74,1,0.89,0.75,1,0.86,0.66,1,0.9,0.78,1,0.76,0.44,1,0.9,0.79,0.76,0.82,1,0.75,0.81,1,1,0.79,0.5,1,0.9,0.77,1,0.9,0.79,0.79,0.85,1,1,0.93,0.9,1,0.91,0.8,1,0.95,0.97,1,0.87,0.69,0.93,0.92,0.99,1,0.9,0.77,0.77,0.83,1,0.77,0.83,1,1,0.94,0.92,0.75,0.81,1,0.75,0.82,1,0.77,0.83,1,1,0.8,0.53,1,0.91,0.81,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.85,0.62,1,0.92,0.84,1,0.85,0.63,0.79,0.85,1,0.79,0.85,1,1,0.8,0.52,0.93,0.92,0.99,1,0.91,0.83,0.77,0.83,1,1,0.91,0.83,1,0.78,0.47,1,0.84,0.61,1,0.91,0.82,0.76,0.82,1,1,0.89,0.76,1,0.88,0.71,0.75,0.82,1,1,0.88,0.7,1,0.87,0.67,0.76,0.82,1,1,0.9,0.78,1,0.76,0.43,1,0.91,0.82,0.75,0.81,1,0.79,0.85,1,1,0.6,0,1,0.9,0.77,1,0.8,0.52,0.78,0.84,1,1,0.91,0.82,1,0.89,0.74,1,0.89,0.75,1,0.83,0.59,1,0.9,0.76,1,0.8,0.52,1,0.89,0.74,1,0.88,0.71,1,0.91,0.81,0.82,0.86,1,1,0.86,0.64,1,0.91,0.8,0.78,0.84,1,0.75,0.81,1,1,0.88,0.7,0.8,0.85,1,1,0.83,0.59,1,0.89,0.73,0.77,0.83,1,0.76,0.82,1,1,0.79,0.51,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.89,0.73,0.75,0.81,1,0.75,0.82,1,1,0.77,0.45,0.97,0.94,0.98,0.75,0.81,1,0.75,0.81,1,1,0.87,0.69,1,0.88,0.71,1,0.89,0.73,0.75,0.82,1,0.93,0.92,0.99,0.77,0.83,1,1,0.83,0.59,0.76,0.82,1,1,0.83,0.58,0.75,0.81,1,0.75,0.81,1,1,0.91,0.82,0.76,0.82,1,1,0.77,0.46,1,0.91,0.8,1,0.94,0.92,1,0.81,0.54,0.75,0.81,1,0.95,0.93,0.99,0.96,0.93,0.98,1,0.9,0.79,1,0.78,0.49,1,0.94,0.95,1,0.91,0.81,0.75,0.81,1,1,0.91,0.81,0.78,0.84,1,1,0.87,0.68,0.76,0.82,1,0.92,0.91,0.99,0.78,0.84,1,1,0.95,0.95,1,0.77,0.45,0.76,0.82,1,1,0.82,0.56,0.75,0.81,1,0.78,0.83,1,0.82,0.86,1,0.75,0.82,1,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.78,0.48,0.75,0.81,1,1,0.89,0.75,0.77,0.83,1,0.78,0.84,1,1,0.76,0.44,1,0.79,0.49,0.81,0.86,1,0.76,0.82,1,1,0.89,0.75,0.89,0.9,0.99,0.79,0.84,1,1,0.87,0.68,0.75,0.81,1,1,0.91,0.81,1,0.92,0.86,0.79,0.84,1,1,0.92,0.84,1,0.91,0.81,1,0.87,0.68,0.97,0.94,0.98,1,0.94,0.95,0.76,0.82,1,1,0.88,0.72,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.78,0.48,1,0.9,0.77,1,0.85,0.63,1,0.8,0.52,1,0.76,0.43,0.75,0.81,1,1,0.8,0.53,0.75,0.82,1,1,0.87,0.68,0.78,0.84,1,1,0.88,0.7,0.78,0.83,1,0.78,0.84,1,1,0.95,0.96,0.75,0.82,1,1,0.82,0.57,1,0.89,0.75,0.75,0.82,1,0.83,0.87,1,1,0.89,0.73,0.88,0.89,0.99,1,0.73,0.38,0.76,0.82,1,0.8,0.85,1,1,0.77,0.46,0.77,0.83,1,0.76,0.82,1,0.9,0.9,0.99,0.93,0.92,0.99,1,0.94,0.91,1,0.83,0.59,0.78,0.84,1,0.79,0.85,1,1,0.87,0.69,0.75,0.81,1,1,0.76,0.43,0.78,0.84,1,0.77,0.83,1,0.88,0.89,0.99,0.93,0.92,0.99,1,0.87,0.67,0.79,0.85,1,0.78,0.84,1,1,0.81,0.53,1,0.81,0.54,1,0.75,0.42,1,0.93,0.89,1,0.94,0.94,1,0.75,0.41,1,0.83,0.58,1,0.78,0.49,1,0.83,0.59,1,0.9,0.77,1,0.87,0.68,1,0.85,0.63,0.92,0.91,0.99,1,0.9,0.77,0.75,0.81,1,0.83,0.87,1,1,0.73,0.37,1,0.87,0.67,1,0.93,0.89,0.81,0.86,1,0.75,0.81,1,1,0.84,0.61,0.89,0.9,0.99,1,0.91,0.82,1,0.93,0.89,0.84,0.87,1,0.75,0.81,1,1,0.86,0.64,0.75,0.81,1,0.81,0.86,1,0.75,0.81,1,0.75,0.81,1,0.78,0.83,1,1,0.77,0.45,0.75,0.82,1,0.75,0.81,1,0.79,0.85,1,0.75,0.81,1,1,0.95,0.95,1,0.76,0.44,0.77,0.83,1,1,0.78,0.48,0.76,0.82,1,0.76,0.82,1,0.89,0.9,0.99,1,0.84,0.61,0.76,0.82,1,1,0.94,0.95,1,0.82,0.56,0.75,0.82,1,1,0.83,0.59,0.76,0.82,1,0.76,0.82,1,0.82,0.86,1,0.75,0.82,1,0.75,0.82,1,0.77,0.83,1,1,0.8,0.53,1,0.9,0.78,0.76,0.82,1,0.98,0.94,0.98,0.94,0.92,0.99,0.78,0.83,1,0.76,0.83,1,0.75,0.81,1,0.75,0.81,1,1,0.89,0.75,0.75,0.81,1,1,0.78,0.49,0.88,0.89,0.99,1,0.85,0.63,0.77,0.83,1,1,0.85,0.64,1,0.9,0.79,0.95,0.93,0.99,1,0.81,0.55,0.74,0.8,1,0.75,0.81,1,0.84,0.87,1,0.77,0.83,1,1,0.89,0.75,1,0.8,0.52,1,0.88,0.7,1,0.79,0.5,0.75,0.82,1,1,0.95,0.98,1,0.87,0.69,1,0.9,0.76,1,0.91,0.82,0.96,0.93,0.98,0.78,0.84,1,1,0.87,0.69,1,0.94,0.95,0.86,0.88,0.99,1,0.88,0.71,1,0.82,0.57,1,0.95,0.98,0.76,0.82,1,1,0.68,0.23,0.78,0.84,1,0.76,0.82,1,0.84,0.87,1,1,0.9,0.79,0.75,0.81,1,1,0.91,0.81,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.92,0.83,1,0.94,0.93,1,0.95,0.95,0.78,0.83,1,1,0.9,0.76,1,0.7,0.31,1,0.88,0.72,1,0.87,0.67,1,0.88,0.7,0.81,0.86,1,1,0.88,0.73,1,0.86,0.65,0.75,0.81,1,0.75,0.82,1,0.75,0.82,1,0.76,0.82,1,0.77,0.83,1,1,0.77,0.46,0.78,0.84,1,0.76,0.82,1,0.75,0.82,1,0.76,0.82,1,1,0.75,0.42,1,0.86,0.65,0.79,0.84,1,1,0.9,0.78,0.83,0.87,1,0.75,0.81,1,1,0.91,0.82,1,0.82,0.56,1,0.81,0.55,1,0.95,0.98,0.75,0.81,1,0.75,0.82,1,1,0.84,0.61,1,0.83,0.58,1,0.81,0.54,1,0.81,0.54,1,0.87,0.69,0.77,0.83,1,0.79,0.85,1,1,0.91,0.8,1,0.87,0.67,1,0.92,0.85,0.78,0.83,1,0.75,0.81,1,1,0.89,0.74,1,0.79,0.51,0.76,0.82,1,1,0.9,0.77,0.75,0.81,1,0.9,0.9,0.99,0.81,0.86,1,1,0.92,0.84,0.76,0.82,1,0.88,0.89,0.99,0.76,0.82,1,1,0.94,0.91,0.92,0.91,0.99,1,0.77,0.46,0.95,0.93,0.99,0.75,0.82,1,0.83,0.87,1,0.77,0.83,1,0.9,0.91,0.99,1,0.94,0.92,1,0.91,0.83,1,0.84,0.6,1,0.89,0.74,0.75,0.82,1,0.76,0.82,1,0.94,0.92,0.99,1,0.89,0.75,1,0.88,0.72,1,0.77,0.47,0.75,0.81,1,1,0.9,0.79,1,0.94,0.95,0.77,0.83,1,0.76,0.82,1,1,0.95,0.96,0.76,0.82,1,0.75,0.82,1,1,0.93,0.89,0.98,0.94,0.98,0.97,0.94,0.98,0.75,0.81,1,1,0.8,0.51,1,0.83,0.59,0.76,0.82,1,0.79,0.84,1,0.79,0.84,1,0.75,0.81,1,1,0.95,0.97,0.78,0.84,1,0.77,0.83,1,1,0.91,0.8,1,0.82,0.57,1,0.92,0.84,0.76,0.82,1,0.9,0.9,0.99,1,0.8,0.52,1,0.94,0.94,1,0.9,0.78,0.79,0.85,1,0.76,0.82,1,1,0.84,0.6,1,0.72,0.36,0.77,0.83,1,0.76,0.82,1,1,0.78,0.49,0.75,0.81,1,1,0.87,0.69,1,0.75,0.42,0.75,0.81,1,0.78,0.84,1,1,0.82,0.56,0.78,0.84,1,0.75,0.81,1,0.78,0.84,1,0.76,0.82,1,0.75,0.81,1,1,0.77,0.45,1,0.85,0.63,0.76,0.82,1,0.78,0.84,1,1,0.77,0.46,1,0.88,0.71,1,0.83,0.59,1,0.9,0.77,0.76,0.82,1,0.8,0.85,1,0.8,0.85,1,0.94,0.93,0.99,0.79,0.85,1,1,0.81,0.55,1,0.89,0.76,1,0.78,0.47,1,0.94,0.94,0.75,0.82,1,1,0.82,0.56,0.91,0.91,0.99,0.75,0.82,1,1,0.94,0.93,0.75,0.81,1,0.77,0.83,1,0.77,0.83,1,0.75,0.81,1,1,0.87,0.69,1,0.95,0.97,1,0.73,0.37,0.76,0.82,1,0.75,0.82,1,0.93,0.92,0.99,0.76,0.82,1,1,0.86,0.66,0.75,0.82,1,1,0.95,0.98,1,0.76,0.44,1,0.81,0.54,0.76,0.82,1,1,0.91,0.8,1,0.91,0.8,1,0.89,0.73,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,1,0.81,0.54,0.76,0.82,1,0.76,0.82,1,1,0.86,0.64,0.75,0.81,1,1,0.76,0.44,1,0.9,0.79,1,0.91,0.81,1,0.93,0.87,1,0.89,0.74,1,0.87,0.68,1,0.78,0.48,0.89,0.9,0.99,0.85,0.88,0.99,1,0.75,0.42,1,0.89,0.73,1,0.87,0.66,1,0.88,0.71,0.75,0.82,1,1,0.91,0.79,1,0.89,0.73,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.82,0.57,0.75,0.81,1,0.75,0.82,1,0.77,0.83,1,0.78,0.84,1,0.79,0.84,1,1,0.75,0.42,0.75,0.81,1,0.78,0.84,1,1,0.86,0.64,0.79,0.84,1,0.78,0.84,1,1,0.9,0.77,1,0.88,0.72,1,0.74,0.39,0.78,0.84,1,1,0.89,0.75,0.77,0.83,1,0.77,0.83,1,1,0.86,0.64,1,0.94,0.94,1,0.84,0.6,1,0.9,0.78,1,0.88,0.71,1,0.83,0.59,0.78,0.84,1,1,0.81,0.54,0.77,0.83,1,0.77,0.83,1,0.76,0.82,1,1,0.86,0.65,1,0.76,0.44,0.79,0.85,1,1,0.77,0.46,1,0.94,0.92,0.75,0.81,1,1,0.84,0.62,0.76,0.82,1,0.79,0.84,1,1,0.88,0.72,1,0.89,0.74,0.76,0.82,1,1,0.86,0.65,1,0.9,0.77,0.79,0.84,1,1,0.86,0.64,0.77,0.83,1,1,0.75,0.41,0.99,0.95,0.98,0.87,0.89,0.99,1,0.88,0.7,0.92,0.91,0.99,1,0.89,0.74,1,0.89,0.74,1,0.9,0.77,0.75,0.82,1,1,0.88,0.72,0.75,0.81,1,1,0.85,0.62,1,0.88,0.7,1,0.89,0.74,1,0.88,0.71,1,0.75,0.41,0.75,0.81,1,0.9,0.9,0.99,0.75,0.81,1,1,0.95,0.98,0.76,0.82,1,0.78,0.84,1,1,0.73,0.38,1,0.88,0.71,1,0.76,0.44,1,0.86,0.65,0.8,0.85,1,1,0.93,0.89,1,0.71,0.34,1,0.78,0.47,0.75,0.82,1,1,0.82,0.57,0.75,0.81,1,0.79,0.84,1,0.81,0.86,1,1,0.76,0.45,1,0.9,0.77,0.75,0.81,1,1,0.94,0.93,1,0.89,0.76,1,0.87,0.69,0.78,0.84,1,1,0.87,0.66,0.75,0.81,1,1,0.89,0.75,1,0.91,0.82,0.75,0.81,1,0.76,0.82,1,0.75,0.82,1,0.76,0.82,1,1,0.88,0.72,0.8,0.85,1,0.87,0.89,0.99,1,0.82,0.56,0.76,0.82,1,1,0.78,0.47,1,0.8,0.52,0.77,0.83,1,1,0.86,0.65,0.82,0.86,1,0.75,0.81,1,0.75,0.81,1,1,0.91,0.81,1,0.89,0.75,1,0.85,0.64,1,0.93,0.9,1,0.83,0.58,1,0.8,0.53,1,0.82,0.57,1,0.94,0.95,1,0.84,0.61,0.8,0.85,1,1,0.75,0.41,0.82,0.86,1,1,0.91,0.8,0.8,0.85,1,0.77,0.83,1,0.9,0.9,0.99,1,0.84,0.61,0.77,0.83,1,0.75,0.82,1,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.76,0.82,1,0.77,0.83,1,1,0.8,0.52,0.98,0.94,0.98,1,0.78,0.48,0.76,0.82,1,0.75,0.81,1,0.79,0.85,1,0.75,0.82,1,1,0.9,0.79,0.81,0.86,1,1,0.95,0.95,1,0.83,0.58,1,0.81,0.54,1,0.89,0.73,0.75,0.82,1,0.8,0.86,1,0.75,0.82,1,1,0.82,0.57,0.75,0.81,1,1,0.84,0.6,1,0.84,0.62,1,0.82,0.57,1,0.8,0.52,0.75,0.81,1,0.75,0.82,1,0.75,0.81,1,1,0.89,0.75,0.99,0.95,0.98,1,0.89,0.73,0.79,0.85,1,0.97,0.94,0.98,0.85,0.88,0.99,0.76,0.82,1,1,0.49,0,0.75,0.81,1,1,0.87,0.67,0.8,0.85,1,0.76,0.82,1,1,0.83,0.58,0.9,0.91,0.99,0.75,0.81,1,0.79,0.85,1,0.89,0.9,0.99,0.78,0.84,1,0.78,0.84,1,0.75,0.81,1,0.79,0.84,1,0.79,0.85,1,1,0.79,0.5,1,0.95,0.98,1,0.94,0.91,1,0.91,0.8,0.76,0.82,1,1,0.94,0.92,1,0.86,0.65,1,0.76,0.43,0.84,0.87,1,0.76,0.82,1,0.76,0.82,1,0.75,0.81,1,0.93,0.92,0.99,1,0.89,0.75,0.75,0.81,1,1,0.94,0.94,1,0.88,0.72,1,0.9,0.78,0.75,0.82,1,0.83,0.87,1,0.77,0.83,1,0.76,0.82,1,1,0.78,0.47,0.75,0.81,1,1,0.9,0.77,0.75,0.81,1,0.77,0.83,1,1,0.89,0.75,1,0.86,0.65,1,0.92,0.86,0.9,0.9,0.99,1,0.89,0.76,0.86,0.88,0.99,0.75,0.81,1,0.79,0.84,1,1,0.9,0.77,1,0.82,0.57,0.75,0.81,1,1,0.95,0.98,1,0.9,0.77,1,0.75,0.42,0.75,0.82,1,0.78,0.83,1,1,0.75,0.42,0.75,0.81,1,0.79,0.85,1,0.79,0.85,1,1,0.75,0.41,1,0.77,0.45,1,0.9,0.78,1,0.88,0.7,1,0.88,0.7,0.75,0.81,1,1,0.73,0.37,1,0.88,0.7,1,0.89,0.74,0.77,0.83,1,0.9,0.9,0.99,0.77,0.83,1,1,0.91,0.79,0.76,0.82,1,0.94,0.92,0.99,1,0.81,0.54,0.78,0.84,1,1,0.88,0.71,0.75,0.81,1,0.75,0.81,1,1,0.71,0.33,1,0.9,0.77,0.96,0.93,0.98,0.8,0.85,1,1,0.84,0.62,0.75,0.81,1,1,0.91,0.8,1,0.79,0.49,0.95,0.93,0.99,1,0.9,0.79,1,0.94,0.93,0.75,0.81,1,0.76,0.82,1,0.75,0.82,1,0.75,0.82,1,0.78,0.84,1,0.97,0.94,0.98,1,0.79,0.49,0.77,0.83,1,0.99,0.95,0.98,1,0.89,0.76,1,0.9,0.78,1,0.81,0.54,0.98,0.94,0.98,0.79,0.85,1,0.8,0.85,1,0.79,0.84,1,0.75,0.81,1,1,0.88,0.73,1,0.9,0.78,1,0.88,0.71,0.78,0.84,1,1,0.95,0.97,1,0.83,0.59,1,0.87,0.67,0.77,0.83,1,0.78,0.84,1,1,0.76,0.43,1,0.89,0.74,1,0.95,0.96,1,0.89,0.76,1,0.74,0.39,1,0.81,0.54,1,0.92,0.87,1,0.89,0.76,1,0.9,0.76,0.78,0.84,1,0.77,0.83,1,0.76,0.82,1,1,0.91,0.8,1,0.91,0.8,1,0.88,0.72,0.78,0.83,1,1,0.92,0.85,1,0.89,0.76,0.99,0.95,0.98,1,0.9,0.77,1,0.87,0.67,1,0.87,0.66,1,0.89,0.75,1,0.94,0.94,0.76,0.82,1,0.75,0.81,1,0.71,0.78,1,0.75,0.81,1,0.75,0.81,1,1,0.83,0.58,1,0.89,0.74,0.92,0.92,0.99,1,0.91,0.8,1,0.87,0.68,0.88,0.89,0.99,0.75,0.81,1,1,0.86,0.66,1,0.9,0.78,0.88,0.89,0.99,0.76,0.82,1,1,0.91,0.81,0.79,0.85,1,1,0.89,0.73,0.79,0.85,1,1,0.8,0.52,1,0.84,0.62,0.77,0.83,1,1,0.76,0.43,1,0.89,0.74,0.79,0.85,1,0.75,0.82,1,0.78,0.84,1,0.75,0.81,1,1,0.95,0.95,1,0.9,0.78,0.79,0.84,1,1,0.83,0.58,1,0.9,0.79,1,0.91,0.81,1,0.77,0.46,0.77,0.83,1,0.75,0.81,1,0.77,0.83,1,0.76,0.82,1,0.98,0.94,0.98,1,0.94,0.94,1,0.78,0.49,1,0.8,0.52,1,0.89,0.73,1,0.92,0.86,1,0.8,0.52,0.76,0.82,1,1,0.75,0.42,1,0.83,0.59,0.75,0.81,1,1,0.9,0.77,1,0.88,0.73,0.75,0.82,1,0.98,0.94,0.98,1,0.81,0.55,0.78,0.83,1,0.75,0.81,1,1,0.9,0.76,0.78,0.84,1,1,0.9,0.76,1,0.88,0.71,0.79,0.85,1,0.75,0.81,1,1,0.87,0.69,0.75,0.81,1,1,0.9,0.79,1,0.89,0.76,1,0.89,0.74,0.93,0.92,0.99,1,0.89,0.74,0.75,0.82,1,1,0.9,0.77,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,0.78,0.84,1,1,0.89,0.76,1,0.76,0.45,0.79,0.85,1,1,0.76,0.43,1,0.8,0.53,1,0.79,0.5,0.97,0.94,0.98,1,0.78,0.48,1,0.89,0.75,1,0.82,0.56,0.97,0.94,0.98,1,0.9,0.76,0.75,0.81,1,0.77,0.83,1,1,0.79,0.5,0.79,0.85,1,1,0.76,0.44,1,0.91,0.8,0.75,0.82,1,1,0.79,0.5,1,0.93,0.89,1,0.75,0.42,1,0.9,0.78,1,0.9,0.76,1,0.8,0.52,0.79,0.84,1,1,0.9,0.76,0.78,0.84,1,1,0.89,0.74,0.91,0.91,0.99,1,0.85,0.63,0.98,0.94,0.98,0.77,0.83,1,1,0.91,0.82,1,0.88,0.71,0.77,0.83,1,0.78,0.84,1,1,0.89,0.75,0.78,0.83,1,1,0.86,0.65,0.75,0.81,1,1,0.86,0.65,0.77,0.83,1,1,0.8,0.51,0.79,0.85,1,1,0.77,0.45,1,0.78,0.48,0.75,0.81,1,0.79,0.84,1,0.76,0.82,1,0.75,0.82,1,1,0.85,0.62,0.93,0.92,0.99,0.78,0.84,1,0.75,0.82,1,1,0.94,0.93,1,0.88,0.72,1,0.86,0.66,0.79,0.84,1,1,0.89,0.74,0.76,0.82,1,1,0.81,0.54,1,0.85,0.62,0.87,0.89,0.99,0.89,0.9,0.99,0.77,0.83,1,1,0.88,0.7,1,0.83,0.58,0.76,0.82,1,0.75,0.81,1,0.76,0.82,1,0.79,0.84,1,0.75,0.81,1,0.75,0.81,1,1,0.8,0.51,0.75,0.81,1,1,0.89,0.76,1,0.9,0.78,0.77,0.83,1,1,0.9,0.78,0.76,0.82,1,1,0.88,0.72,1,0.76,0.43,0.76,0.82,1,0.75,0.81,1,1,0.76,0.45,0.75,0.81,1,1,0.81,0.53,1,0.75,0.41,0.77,0.83,1,1,0.92,0.86,1,0.88,0.7,1,0.76,0.43,0.75,0.81,1,1,0.89,0.75,0.89,0.9,0.99,1,0.95,0.97,1,0.75,0.42,1,0.94,0.94,1,0.91,0.81,0.76,0.82,1,0.95,0.93,0.99,0.77,0.83,1,1,0.76,0.44,0.75,0.81,1,1,0.75,0.41,1,0.91,0.81,0.96,0.93,0.98,0.75,0.81,1,1,0.94,0.93,1,0.86,0.66,0.9,0.9,0.99,0.75,0.81,1,1,0.78,0.47,0.75,0.82,1,0.82,0.86,1,1,0.82,0.56,0.83,0.87,1,0.79,0.84,1,1,0.86,0.65,0.75,0.82,1,0.75,0.81,1,1,0.94,0.93,0.85,0.88,0.99,1,0.87,0.68,1,0.88,0.71,1,0.78,0.47,0.78,0.84,1,0.78,0.84,1,0.78,0.84,1,0.75,0.81,1,1,0.87,0.68,1,0.87,0.68,0.78,0.84,1,1,0.75,0.41,1,0.95,0.97,0.75,0.82,1,1,0.91,0.8,1,0.9,0.76,0.75,0.82,1,1,0.92,0.84,1,0.95,0.98,0.75,0.82,1,0.89,0.9,0.99,0.77,0.83,1,0.75,0.82,1,0.75,0.81,1,1,0.82,0.57,1,0.9,0.76,0.94,0.92,0.99,1,0.94,0.94,0.79,0.85,1,0.88,0.89,0.99,1,0.93,0.89,0.76,0.82,1,0.78,0.84,1,0.79,0.85,1,1,0.62,0.0066,1,0.95,0.95,1,0.88,0.72,1,0.82,0.56,1,0.94,0.95,1,0.82,0.56,1,0.82,0.57,1,0.91,0.82,1,0.88,0.7,0.93,0.92,0.99,1,0.75,0.41,0.77,0.83,1,0.75,0.82,1,1,0.89,0.75,0.85,0.88,0.99,0.75,0.81,1,1,0.87,0.68,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.81,0.86,1,0.87,0.89,0.99,1,0.75,0.43,0.75,0.82,1,1,0.87,0.69,1,0.9,0.79,1,0.89,0.75,1,0.75,0.42,1,0.88,0.71,1,0.87,0.67,0.75,0.81,1,0.76,0.82,1,1,0.78,0.48,0.75,0.81,1,0.75,0.81,1,1,0.9,0.79,0.75,0.82,1,0.76,0.82,1,0.8,0.85,1,1,0.93,0.9,1,0.82,0.57,0.92,0.91,0.99,1,0.95,0.97,0.76,0.82,1,1,0.91,0.8,1,0.9,0.78,1,0.89,0.75,1,0.95,0.95,0.75,0.81,1,1,0.89,0.75,1,0.89,0.76,0.86,0.88,0.99,0.77,0.83,1,0.76,0.82,1,1,0.94,0.92,0.77,0.83,1,0.76,0.82,1,1,0.95,0.98,1,0.9,0.77,1,0.88,0.7,1,0.76,0.44,0.78,0.84,1,0.75,0.81,1,0.98,0.94,0.98,1,0.83,0.58,1,0.91,0.8,1,0.9,0.79,0.76,0.82,1,0.75,0.81,1,1,0.94,0.92,1,0.77,0.46,1,0.89,0.73,1,0.67,0.21,1,0.89,0.74,0.75,0.82,1,0.75,0.81,1,0.76,0.82,1,1,0.8,0.52,1,0.91,0.81,1,0.77,0.47,1,0.78,0.48,0.75,0.81,1,1,0.88,0.72,0.77,0.83,1,0.75,0.82,1,1,0.89,0.74,1,0.88,0.7,0.75,0.81,1,1,0.9,0.76,1,0.89,0.73,1,0.78,0.47,1,0.77,0.46,0.77,0.83,1,1,0.9,0.78,1,0.75,0.42,0.75,0.82,1,1,0.89,0.76,1,0.86,0.64,1,0.78,0.48,0.99,0.95,0.98,0.8,0.85,1,0.79,0.84,1,1,0.88,0.7,0.75,0.81,1,1,0.88,0.7,1,0.94,0.95,0.76,0.82,1,0.77,0.83,1,1,0.77,0.47,1,0.87,0.69,1,0.91,0.8,0.76,0.82,1,0.75,0.81,1,0.75,0.81,1,1,0.91,0.81,0.75,0.82,1,0.96,0.93,0.98,0.79,0.84,1,1,0.77,0.45,0.78,0.84,1,0.89,0.9,0.99,1,0.89,0.73,0.75,0.81,1,1,0.93,0.88,1,0.88,0.71,1,0.94,0.92,1,0.89,0.74,1,0.82,0.57,1,0.8,0.51,0.81,0.86,1,1,0.91,0.82,0.75,0.81,1,1,0.87,0.67,0.75,0.82,1,0.95,0.93,0.99,1,0.76,0.44,0.77,0.83,1,1,0.78,0.48,0.78,0.84,1,1,0.9,0.76,0.76,0.82,1,0.79,0.85,1,0.77,0.83,1,0.75,0.82,1,1,0.95,0.96,0.78,0.84,1,0.75,0.81,1,1,0.87,0.68,0.76,0.83,1,0.75,0.82,1,0.76,0.82,1,1,0.91,0.82,0.77,0.83,1,0.77,0.83,1,0.75,0.81,1,1,0.88,0.71,1,0.82,0.57,0.76,0.82,1,1,0.95,0.95,0.75,0.81,1,1,0.94,0.94,0.75,0.81,1,1,0.89,0.73,0.79,0.85,1,1,0.89,0.73,0.92,0.91,0.99,0.75,0.81,1,0.78,0.84,1,1,0.76,0.44,0.76,0.82,1,1,0.89,0.76,1,0.9,0.78,1,0.88,0.72,1,0.85,0.62,1,0.89,0.73,0.75,0.82,1,1,0.94,0.94,0.75,0.82,1,0.78,0.84,1,1,0.8,0.51,0.76,0.82,1,1,0.92,0.83,0.98,0.94,0.98,1,0.9,0.77,0.78,0.84,1,0.77,0.83,1,1,0.81,0.55,1,0.8,0.51,0.77,0.83,1,0.75,0.82,1,1,0.86,0.65,1,0.92,0.86,0.82,0.86,1,0.77,0.83,1,0.79,0.84,1,1,0.85,0.62,0.79,0.84,1,0.79,0.85,1,0.78,0.84,1,1,0.8,0.53,1,0.85,0.62,0.75,0.82,1,1,0.78,0.47,1,0.85,0.63,0.78,0.84,1,0.77,0.83,1,1,0.77,0.45,1,0.94,0.92,1,0.87,0.67,1,0.89,0.73,1,0.94,0.92,0.76,0.82,1,1,0.74,0.4,0.75,0.81,1,1,0.88,0.71,1,0.88,0.7,1,0.89,0.75,0.85,0.88,1,1,0.74,0.4,0.82,0.86,1,1,0.93,0.9,0.95,0.93,0.99,0.75,0.81,1,0.98,0.95,0.98,1,0.77,0.45,1,0.81,0.54,1,0.89,0.75,1,0.77,0.45,1,0.76,0.43,1,0.94,0.92,0.88,0.89,0.99,1,0.91,0.8,1,0.78,0.47,1,0.88,0.71,0.99,0.95,0.98,1,0.89,0.74,1,0.82,0.56,0.79,0.84,1,0.75,0.82,1,1,0.76,0.44,1,0.81,0.55,1,0.81,0.55,1,0.75,0.41,0.75,0.81,1,1,0.86,0.64,0.75,0.82,1,0.79,0.85,1,1,0.9,0.77,0.96,0.93,0.98,1,0.89,0.75,0.79,0.85,1,1,0.85,0.62,0.75,0.82,1,0.79,0.85,1,0.77,0.83,1,1,0.89,0.74,1,0.89,0.73,0.75,0.82,1,1,0.95,0.97,0.75,0.81,1,0.76,0.82,1,1,0.86,0.65,1,0.86,0.64,1,0.9,0.79,0.75,0.82,1,1,0.86,0.65,1,0.77,0.46,1,0.8,0.51,0.75,0.82,1,1,0.92,0.84,1,0.85,0.63,1,0.95,0.97,1,0.71,0.33,0.75,0.82,1,0.99,0.95,0.98,0.75,0.82,1,0.76,0.82,1,1,0.95,0.97,1,0.9,0.78,0.94,0.92,0.99,0.78,0.83,1,0.81,0.86,1,0.78,0.84,1,0.78,0.84,1,0.76,0.82,1,0.87,0.89,0.99,0.76,0.82,1,0.78,0.84,1,0.79,0.85,1,0.79,0.85,1,0.94,0.92,0.99,1,0.91,0.8,1,0.8,0.52,0.77,0.83,1,1,0.82,0.56,0.94,0.92,0.99,1,0.88,0.7,1,0.85,0.63,0.96,0.93,0.98,0.9,0.9,0.99,1,0.78,0.48,0.78,0.83,1,1,0.94,0.94,1,0.93,0.9,0.98,0.94,0.98,1,0.95,0.98,1,0.83,0.59,0.94,0.92,0.99,1,0.85,0.64,0.98,0.94,0.98,1,0.9,0.79,0.99,0.95,0.98,1,0.95,0.97,1,0.84,0.61,0.75,0.81,1,1,0.89,0.75,1,0.89,0.73,0.9,0.9,0.99,0.75,0.81,1,0.75,0.81,1,1,0.87,0.68,0.77,0.83,1,0.75,0.81,1,1,0.88,0.7,1,0.91,0.8,1,0.8,0.53,1,0.82,0.56,1,0.89,0.75,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,1,0.95,0.95,0.84,0.87,1,0.97,0.94,0.98,1,0.82,0.57,0.75,0.81,1,0.91,0.91,0.99,1,0.89,0.74,0.79,0.84,1,0.96,0.93,0.98,0.75,0.81,1,0.78,0.84,1,1,0.89,0.76,0.79,0.84,1,0.75,0.82,1,1,0.95,0.97,1,0.79,0.49,0.75,0.81,1,0.75,0.81,1,0.77,0.83,1,1,0.76,0.44,1,0.85,0.64,1,0.75,0.42,1,0.9,0.79,1,0.91,0.81,1,0.89,0.75,1,0.81,0.55,1,0.9,0.77,1,0.87,0.68,0.76,0.82,1,1,0.94,0.95,0.75,0.81,1,1,0.95,0.97,1,0.84,0.61,1,0.8,0.53,0.75,0.82,1,1,0.95,0.98,1,0.79,0.51,0.79,0.84,1,0.78,0.83,1,1,0.91,0.81,1,0.9,0.76,0.76,0.82,1,0.77,0.83,1,0.75,0.81,1,1,0.91,0.83,0.78,0.84,1,1,0.76,0.44,1,0.84,0.61,1,0.92,0.84,1,0.87,0.68,0.86,0.88,0.99,1,0.87,0.69,1,0.89,0.75,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,0.75,0.82,1,1,0.91,0.82,0.9,0.9,0.99,1,0.9,0.77,0.75,0.81,1,1,0.77,0.46,0.75,0.81,1,0.8,0.85,1,0.75,0.82,1,1,0.9,0.79,1,0.76,0.44,0.75,0.82,1,0.75,0.82,1,1,0.85,0.62,1,0.95,0.97,0.77,0.83,1,1,0.9,0.78,1,0.82,0.56,0.95,0.93,0.98,1,0.88,0.7,0.79,0.84,1,0.76,0.82,1,1,0.76,0.44,0.91,0.91,0.99,1,0.82,0.56,0.75,0.82,1,1,0.9,0.77,0.77,0.83,1,1,0.88,0.73,1,0.85,0.62,1,0.95,0.96,0.79,0.85,1,0.75,0.82,1,0.75,0.81,1,0.78,0.83,1,0.77,0.83,1,1,0.9,0.78,0.75,0.81,1,1,0.89,0.76,1,0.94,0.92,0.76,0.82,1,1,0.88,0.71,1,0.86,0.64,1,0.94,0.93,1,0.9,0.78,0.75,0.82,1,0.76,0.82,1,1,0.88,0.7,1,0.91,0.79,1,0.77,0.46,1,0.77,0.46,1,0.89,0.74,0.78,0.84,1,0.75,0.81,1,1,0.9,0.76,1,0.89,0.73,0.87,0.89,0.99,1,0.82,0.56,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.9,0.79,1,0.8,0.52,0.75,0.81,1,0.76,0.82,1,0.75,0.81,1,1,0.95,0.95,0.75,0.82,1,1,0.92,0.86,1,0.76,0.44,1,0.95,0.96,0.96,0.93,0.98,0.78,0.84,1,1,0.82,0.57,1,0.76,0.44,1,0.87,0.69,1,0.9,0.79,1,0.73,0.38,1,0.93,0.88,0.75,0.82,1,0.78,0.84,1,1,0.83,0.59,1,0.9,0.77,0.91,0.91,0.99,1,0.9,0.77,1,0.87,0.66,0.76,0.82,1,0.75,0.81,1,1,0.9,0.78,1,0.8,0.51,1,0.82,0.56,1,0.92,0.85,0.75,0.81,1,1,0.81,0.55,0.92,0.92,0.99,0.75,0.82,1,0.77,0.83,1,1,0.8,0.52,1,0.81,0.55,0.75,0.81,1,0.77,0.83,1,1,0.86,0.64,0.93,0.92,0.99,0.79,0.84,1,1,0.82,0.56,1,0.86,0.66,0.98,0.94,0.98,0.93,0.92,0.99,1,0.58,0,0.78,0.84,1,0.9,0.9,0.99,1,0.89,0.75,0.76,0.82,1,1,0.87,0.67,1,0.88,0.71,0.77,0.83,1,0.76,0.82,1,0.76,0.82,1,0.78,0.84,1,1,0.91,0.82,0.75,0.81,1,0.75,0.81,1,0.77,0.83,1,0.9,0.9,0.99,0.76,0.82,1,0.75,0.81,1,1,0.95,0.97,1,0.95,0.96,1,0.86,0.66,1,0.88,0.71,0.75,0.81,1,0.75,0.81,1,1,0.66,0.16,0.75,0.81,1,0.96,0.93,0.98,0.75,0.81,1,0.77,0.83,1,0.76,0.82,1,0.96,0.94,0.98,0.75,0.82,1,0.75,0.82,1,0.92,0.91,0.99,1,0.93,0.9,0.75,0.81,1,1,0.81,0.55,0.75,0.81,1,0.79,0.85,1,1,0.89,0.76,0.76,0.82,1,0.75,0.81,1,0.97,0.94,0.98,0.76,0.82,1,0.81,0.86,1,1,0.89,0.74,0.77,0.83,1,0.75,0.81,1,1,0.85,0.63,1,0.92,0.85,0.81,0.86,1,0.93,0.92,0.99,0.78,0.84,1,1,0.88,0.72,1,0.88,0.72,0.75,0.82,1,0.78,0.84,1,1,0.78,0.49,0.76,0.82,1,1,0.83,0.59,1,0.78,0.47,1,0.89,0.76,1,0.88,0.72,1,0.82,0.57,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.85,0.62,0.79,0.85,1,1,0.94,0.92,1,0.92,0.86,1,0.87,0.69,1,0.81,0.54,0.99,0.95,0.98,0.78,0.84,1,0.83,0.87,1,1,0.9,0.78,1,0.93,0.9,1,0.76,0.44,1,0.91,0.8,1,0.9,0.77,1,0.95,0.97,1,0.81,0.54,0.77,0.83,1,1,0.95,0.98,1,0.89,0.74,1,0.77,0.47,0.76,0.82,1,0.76,0.82,1,1,0.8,0.51,1,0.9,0.77,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.89,0.73,1,0.82,0.56,0.94,0.93,0.99,1,0.91,0.83,0.75,0.81,1,1,0.82,0.57,1,0.91,0.82,0.79,0.84,1,1,0.9,0.77,0.79,0.85,1,1,0.86,0.66,1,0.9,0.76,1,0.8,0.52,0.98,0.94,0.98,0.78,0.84,1,1,0.91,0.82,1,0.78,0.48,1,0.79,0.5,0.77,0.83,1,1,0.95,0.96,1,0.94,0.94,1,0.79,0.5,1,0.9,0.76,1,0.87,0.67,1,0.89,0.73,1,0.75,0.42,0.9,0.91,0.99,0.91,0.91,0.99,1,0.87,0.67,0.76,0.82,1,0.75,0.82,1,0.97,0.94,0.98,0.75,0.82,1,0.75,0.81,1,0.76,0.82,1,1,0.85,0.63,0.8,0.85,1,1,0.9,0.76,0.75,0.82,1,0.77,0.83,1,1,0.91,0.82,0.75,0.81,1,1,0.89,0.76,1,0.9,0.78,1,0.91,0.79,1,0.81,0.55,0.98,0.94,0.98,0.97,0.94,0.98,1,0.9,0.78,1,0.79,0.5,1,0.78,0.47,0.82,0.86,1,0.92,0.91,0.99,1,0.89,0.75,0.75,0.81,1,1,0.95,0.97,1,0.82,0.56,0.75,0.82,1,1,0.85,0.64,1,0.76,0.43,1,0.75,0.42,0.76,0.82,1,1,0.85,0.62,1,0.91,0.81,0.79,0.84,1,1,0.92,0.86,1,0.87,0.67,0.76,0.82,1,0.79,0.85,1,0.76,0.82,1,1,0.9,0.78,0.95,0.93,0.99,1,0.87,0.68,0.76,0.82,1,0.75,0.82,1,0.77,0.83,1,0.92,0.91,0.99,1,0.9,0.76,0.87,0.89,0.99,0.77,0.83,1,1,0.91,0.8,1,0.87,0.69,0.75,0.81,1,0.75,0.82,1,0.98,0.94,0.98,1,0.77,0.47,1,0.78,0.47,0.97,0.94,0.98,1,0.9,0.76,0.75,0.81,1,1,0.92,0.84,1,0.87,0.67,1,0.82,0.57,0.75,0.82,1,0.8,0.85,1,1,0.81,0.55,1,0.91,0.82,0.78,0.84,1,0.84,0.87,1,1,0.93,0.91,0.78,0.84,1,0.79,0.85,1,0.78,0.84,1,0.75,0.81,1,1,0.9,0.79,1,0.91,0.8,1,0.95,0.98,1,0.94,0.92,0.76,0.82,1,0.75,0.82,1,1,0.87,0.68,1,0.76,0.43,1,0.88,0.72,0.81,0.86,1,0.79,0.85,1,1,0.78,0.48,1,0.91,0.82,1,0.89,0.75,1,0.8,0.52,0.75,0.81,1,1,0.75,0.42,1,0.75,0.42,1,0.95,0.96,0.78,0.84,1,0.75,0.82,1,0.75,0.81,1,1,0.83,0.59,1,0.91,0.8,1,0.94,0.91,0.75,0.81,1,0.77,0.83,1,0.76,0.82,1,1,0.91,0.8,1,0.91,0.79,0.88,0.89,0.99,0.85,0.88,0.99,1,0.78,0.48,0.75,0.82,1,0.77,0.83,1,1,0.9,0.77,1,0.88,0.71,1,0.9,0.78,1,0.89,0.75,1,0.87,0.69,1,0.88,0.72,0.89,0.9,0.99,0.77,0.83,1,0.75,0.81,1,0.97,0.94,0.98,1,0.78,0.47,0.75,0.82,1,0.76,0.82,1,0.76,0.82,1,0.77,0.83,1,0.79,0.84,1,0.75,0.81,1,0.75,0.81,1,1,0.92,0.83,1,0.77,0.45,1,0.95,0.96,0.89,0.9,0.99,0.82,0.86,1,0.85,0.88,1,1,0.87,0.67,0.75,0.81,1,1,0.79,0.49,1,0.85,0.62,1,0.77,0.47,1,0.86,0.66,1,0.86,0.66,0.75,0.81,1,1,0.77,0.47,1,0.8,0.52,1,0.85,0.62,1,0.95,0.98,0.76,0.82,1,0.75,0.81,1,0.75,0.82,1,1,0.87,0.66,0.91,0.91,0.99,0.78,0.84,1,0.8,0.85,1,0.75,0.81,1,0.76,0.82,1,1,0.88,0.7,0.77,0.83,1,0.77,0.83,1,0.79,0.84,1,1,0.94,0.93,0.83,0.87,1,0.75,0.81,1,0.75,0.81,1,0.77,0.83,1,0.75,0.81,1,0.75,0.81,1,0.75,0.81,1,1,0.85,0.63,0.75,0.81,1,0.76,0.82,1,1,0.9,0.78,1,0.92,0.84,0.75,0.82,1,0.75,0.82,1,1,0.95,0.97,1,0.95,0.96,0.75,0.81,1,0.75,0.81,1,1,0.77,0.47,0.75,0.81,1,1,0.86,0.65,0.76,0.82,1,1,0.89,0.75,1,0.87,0.69,0.76,0.82,1,0.78,0.84,1,1,0.8,0.52,0.77,0.83,1,0.78,0.84,1,0.94,0.92,0.99,0.95,0.93,0.99,0.96,0.93,0.98,1,0.93,0.89,1,0.76,0.43,1,0.91,0.8,0.76,0.82,1,0.96,0.93,0.98,0.78,0.84,1,1,0.78,0.48,1,0.89,0.76,0.75,0.81,1,1,0.78,0.48,1,0.84,0.61,0.75,0.81,1,1,0.78,0.48,0.75,0.81,1,1,0.85,0.62,0.75,0.81,1,0.79,0.85,1,1,0.83,0.57,0.79,0.85,1,0.78,0.84,1,1,0.88,0.7,0.78,0.84,1,1,0.86,0.64,0.78,0.83,1,1,0.95,0.95,1,0.95,0.96,0.84,0.87,1,1,0.95,0.96,0.75,0.81,1,1,0.93,0.88,1,0.83,0.59,1,0.76,0.44,1,0.88,0.71,1,0.75,0.42,1,0.69,0.29,0.75,0.81,1,0.77,0.83,1,1,0.84,0.6,0.77,0.83,1,1,0.91,0.81,0.76,0.82,1,0.91,0.91,0.99,1,0.73,0.37,0.76,0.82,1,1,0.9,0.79,0.75,0.81,1,0.78,0.84,1,0.75,0.81,1,1,0.91,0.8,0.76,0.82,1,1,0.88,0.71,1,0.89,0.75,1,0.87,0.69,1,0.89,0.73,1,0.91,0.8,1,0.89,0.74,1,0.76,0.44,1,0.89,0.76,1,0.87,0.67,0.79,0.84,1,1,0.72,0.34,0.75,0.81,1,1,0.76,0.45,1,0.89,0.73,0.77,0.83,1,1,0.92,0.87,1,0.91,0.81,1,0.91,0.81,1,0.75,0.41,1,0.91,0.8,1,0.83,0.6,1,0.92,0.84,0.76,0.82,1,1,0.87,0.67,1,0.89,0.75,0.88,0.89,0.99,1,0.89,0.75,1,0.94,0.91,0.76,0.82,1,1,0.74,0.38,0.75,0.81,1,1,0.95,0.97,0.75,0.81,1,1,0.73,0.37,0.76,0.82,1,1,0.79,0.49,0.75,0.82,1,0.77,0.83,1,0.83,0.87,1,0.75,0.82,1,0.84,0.87,1,1,0.88,0.71,0.76,0.82,1,0.95,0.93,0.99,0.76,0.82,1,1,0.79,0.51,0.75,0.81,1,1,0.89,0.76,1,0.9,0.77,1,0.76,0.44,0.76,0.82,1,1,0.77,0.47,1,0.54,0,0.75,0.81,1,1,0.94,0.93,0.76,0.82,1,1,0.91,0.79,0.97,0.94,0.98,1,0.79,0.5,1,0.86,0.64,0.77,0.83,1,0.77,0.83,1,1,0.82,0.57,1,0.89,0.75,1,0.85,0.64,0.75,0.82,1,1,0.8,0.51,0.78,0.84,1,0.78,0.84,1,0.96,0.93,0.98,1,0.82,0.57,0.76,0.82,1,1,0.74,0.4,1,0.93,0.9,1,0.75,0.42,0.75,0.82,1,0.75,0.82,1,1,0.93,0.88,1,0.87,0.67,0.78,0.83,1,1,0.85,0.63,0.75,0.81,1,1,0.91,0.8,1,0.75,0.41,0.75,0.81,1,0.75,0.82,1,1,0.91,0.82,0.75,0.82,1,1,0.75,0.42,1,0.77,0.46,1,0.77,0.47,1,0.59,0,1,0.9,0.79,1,0.87,0.69,1,0.86,0.64,1,0.9,0.76,0.75,0.82,1,0.77,0.83,1,1,0.81,0.55,1,0.77,0.46,1,0.87,0.68,1,0.87,0.69,0.75,0.82,1,1,0.88,0.72,1,0.82,0.57,1,0.91,0.81,1,0.92,0.84,0.75,0.82,1,0.97,0.94,0.98,0.75,0.81,1,0.75,0.82,1,0.76,0.82,1,1,0.87,0.68,0.75,0.81,1,1,0.89,0.74,1,0.88,0.7,1,0.78,0.49,1,0.86,0.66,1,0.86,0.65,1,0.89,0.74,1,0.8,0.51,1,0.95,0.95,1,0.76,0.44,0.76,0.82,1,0.78,0.84,1,0.75,0.81,1,1,0.89,0.74,1,0.86,0.65,0.97,0.94,0.98,0.93,0.92,0.99,0.78,0.84,1,1,0.75,0.41,0.79,0.84,1,0.78,0.83,1,1,0.83,0.59,1,0.95,0.95,1,0.87,0.68,1,0.9,0.78,1,0.9,0.79,1,0.93,0.9,0.78,0.84,1,1,0.77,0.45,1,0.86,0.66,1,0.82,0.55,1,0.94,0.93,0.75,0.82,1,1,0.85,0.63,0.96,0.93,0.98,1,0.88,0.72,1,0.88,0.71,1,0.73,0.37,0.79,0.85,1,0.75,0.81,1,0.77,0.83,1,0.88,0.89,0.99,0.75,0.81,1,0.89,0.9,0.99,0.78,0.84,1,0.75,0.81,1,1,0.93,0.91,0.95,0.93,0.99,1,0.94,0.94,1,0.91,0.81,1,0.85,0.64,1,0.91,0.82,0.75,0.81,1,1,0.87,0.69,0.75,0.82,1,0.75,0.81,1,1,0.95,0.95,1,0.87,0.69,0.75,0.82,1,1,0.91,0.81,1,0.83,0.58,1,0.9,0.77,1,0.87,0.68,0.96,0.93,0.98,1,0.89,0.75,0.86,0.88,0.99,1,0.75,0.42,0.75,0.81,1,1,0.95,0.98,1,0.95,0.97,1,0.85,0.62,1,0.95,0.96,1,0.82,0.57,1,0.84,0.61,0.79,0.85,1,1,0.76,0.44,0.75,0.81,1,1,0.62,0.026]"),fr=JSON.parse("[19,13,10,10,9.9,9.6,9.2,8.3,8.1,8.1,7.6,7,7,6.7,6.4,6.4,6.1,5.9,5.8,5.6,5.6,5.4,5.3,5,4.8,4.8,4.7,4.7,4.7,4.6,4.6,4.5,4.5,4.5,4.4,4.4,4.4,4.3,4.3,4.3,4.2,4.2,4.2,4.1,4.1,4.1,4.1,4,4,4,4,4,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.9,3.8,3.8,3.8,3.7,3.7,3.6,3.6,3.6,3.6,3.6,3.6,3.6,3.6,3.6,3.5,3.5,3.5,3.5,3.5,3.5,3.4,3.4,3.4,3.3,3.3,3.3,3.3,3.3,3.3,3.2,3.2,3.2,3.2,3.2,3.1,3.1,3.1,3.1,3.1,3,3,3,3,3,3,3,3,3,3,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.9,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.6,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.5,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.3,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.2,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2.1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.9,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.8,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.4,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.2,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1.1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.99,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.96,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.94,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.93,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.92,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.91,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.9,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.89,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.88,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.87,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.86,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.85,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.84,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.83,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.82,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.81,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.79,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.78,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.77,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.76,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.75,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.73,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.71,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.68,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.67,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.66,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.63,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.61,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.59,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.57,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.56,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55,0.55]"),X8={starPositions:ur,starColors:dr,starSizes:fr};function pr(i){vt.DefaultUp=new N(0,0,1);const t=new r5,e=window.getComputedStyle(i).getPropertyValue("--bg-color");t.background=new Y0().setStyle(e);const n=i.getBoundingClientRect(),r=new Lt(75,n.width/n.height,.1,1e3);r.up.set(0,0,1);const s=new j4({antialias:!0});s.setSize(n.width,n.height),i.appendChild(s.domElement);const a=new J4(r,s.domElement);a.rotateSpeed=-.15;const o=new se({uniforms:{sizeMul:{value:.75},floorSize:{value:3},starDimmingPower:{value:2},baseOpacity:{value:.5},skewWeight:{value:.5},skewColor:new Xn(new N(1,1,1))},vertexShader:`
attribute float size;
varying vec3 vColor;
varying float vOpacity;
uniform float floorSize;
uniform float starDimmingPower;
uniform float sizeMul;
void main() {
  vColor = color;
  float modifiedSize = size * sizeMul;
  if (modifiedSize < floorSize) {
    vOpacity = pow((modifiedSize / floorSize), starDimmingPower);
  } else {
    vOpacity = 1.0;
  }
  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
  if (modifiedSize < floorSize) {
   gl_PointSize = floorSize / -mvPosition.z;
  } else {
   gl_PointSize = modifiedSize / -mvPosition.z;
  }
  gl_Position = projectionMatrix * mvPosition;
}`,fragmentShader:`
varying vec3 vColor;
varying float vOpacity;
uniform float baseOpacity;
uniform vec3 skewColor;
uniform float skewWeight;
void main() {
  gl_FragColor = (vec4( vColor, vOpacity * baseOpacity ) + skewWeight * vec4( skewColor, vOpacity * baseOpacity )) / (1.0 + skewWeight);
}`,blending:Y8,depthTest:!1,transparent:!0,vertexColors:!0}),l=new ae;l.setAttribute("position",new Wt(X8.starPositions,3)),l.setAttribute("color",new Wt(X8.starColors,3)),l.setAttribute("size",new Wt(X8.starSizes,1));const c=new l5(l,o);t.add(c),r.position.y=-.1,a.update();function u(){c.rotation.z+=5e-5,a.update(),s.render(t,r)}function d(){const f=i.getBoundingClientRect();r.aspect=f.width/f.height,r.updateProjectionMatrix(),s.setSize(f.width,f.height)}return s.setAnimationLoop(u),window.addEventListener("resize",d),s.domElement}const mr={"canvas-container":"_canvas-container_lr7yu_1"},vr=Bi(function(){const t=p8.useRef(null),e=p8.useRef(null);return p8.useEffect(()=>{if(!t.current||e.current)return;const n=pr(t.current);e.current=n},[]),A1.jsxs(A1.Fragment,{children:[A1.jsx("div",{className:mr["canvas-container"],ref:t}),A1.jsx(zi,{})]})});export{vr as default};
